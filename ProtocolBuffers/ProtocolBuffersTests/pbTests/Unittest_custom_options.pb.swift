// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
import ProtocolBuffers

var UnittestCustomOptionsRootfileOpt1:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootfileOpt1Static
   }
}
var UnittestCustomOptionsRootmessageOpt1:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootmessageOpt1Static
   }
}
var UnittestCustomOptionsRootfieldOpt1:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootfieldOpt1Static
   }
}
var UnittestCustomOptionsRootfieldOpt2:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootfieldOpt2Static
   }
}
var UnittestCustomOptionsRootenumOpt1:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootenumOpt1Static
   }
}
var UnittestCustomOptionsRootenumValueOpt1:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootenumValueOpt1Static
   }
}
var UnittestCustomOptionsRootserviceOpt1:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootserviceOpt1Static
   }
}
var UnittestCustomOptionsRootmethodOpt1:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootmethodOpt1Static
   }
}
var UnittestCustomOptionsRootboolOpt:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootboolOptStatic
   }
}
var UnittestCustomOptionsRootint32Opt:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootint32OptStatic
   }
}
var UnittestCustomOptionsRootint64Opt:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootint64OptStatic
   }
}
var UnittestCustomOptionsRootuint32Opt:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootuint32OptStatic
   }
}
var UnittestCustomOptionsRootuint64Opt:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootuint64OptStatic
   }
}
var UnittestCustomOptionsRootsint32Opt:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootsint32OptStatic
   }
}
var UnittestCustomOptionsRootsint64Opt:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootsint64OptStatic
   }
}
var UnittestCustomOptionsRootfixed32Opt:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootfixed32OptStatic
   }
}
var UnittestCustomOptionsRootfixed64Opt:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootfixed64OptStatic
   }
}
var UnittestCustomOptionsRootsfixed32Opt:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootsfixed32OptStatic
   }
}
var UnittestCustomOptionsRootsfixed64Opt:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootsfixed64OptStatic
   }
}
var UnittestCustomOptionsRootfloatOpt:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootfloatOptStatic
   }
}
var UnittestCustomOptionsRootdoubleOpt:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootdoubleOptStatic
   }
}
var UnittestCustomOptionsRootstringOpt:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootstringOptStatic
   }
}
var UnittestCustomOptionsRootbytesOpt:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootbytesOptStatic
   }
}
var UnittestCustomOptionsRootenumOpt:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootenumOptStatic
   }
}
var UnittestCustomOptionsRootmessageTypeOpt:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootmessageTypeOptStatic
   }
}
var UnittestCustomOptionsRootquux:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootquuxStatic
   }
}
var UnittestCustomOptionsRootcorge:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootcorgeStatic
   }
}
var UnittestCustomOptionsRootgrault:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootgraultStatic
   }
}
var UnittestCustomOptionsRootgarply:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootgarplyStatic
   }
}
var UnittestCustomOptionsRootcomplexOpt1:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootcomplexOpt1Static
   }
}
var UnittestCustomOptionsRootcomplexOpt2:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootcomplexOpt2Static
   }
}
var UnittestCustomOptionsRootcomplexOpt3:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootcomplexOpt3Static
   }
}
var UnittestCustomOptionsRootcomplexOpt6:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootcomplexOpt6Static
   }
}
var UnittestCustomOptionsRootfileopt:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootfileoptStatic
   }
}
var UnittestCustomOptionsRootmsgopt:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootmsgoptStatic
   }
}
var UnittestCustomOptionsRootfieldopt:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootfieldoptStatic
   }
}
var UnittestCustomOptionsRootenumopt:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootenumoptStatic
   }
}
var UnittestCustomOptionsRootenumvalopt:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootenumvaloptStatic
   }
}
var UnittestCustomOptionsRootserviceopt:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootserviceoptStatic
   }
}
var UnittestCustomOptionsRootmethodopt:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootmethodoptStatic
   }
}
var ComplexOptionType2ComplexOptionType4complexOpt4:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.ComplexOptionType2ComplexOptionType4complexOpt4Static
   }
}
var AggregateMessageSetElementmessageSetExtension:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.AggregateMessageSetElementmessageSetExtensionStatic
   }
}
var Aggregatenested:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.AggregatenestedStatic
   }
}
var NestedOptionTypenestedExtension:ConcreateExtensionField {
   get {
       return UnittestCustomOptionsRoot.sharedInstance.NestedOptionTypenestedExtensionStatic
   }
}
struct UnittestCustomOptionsRoot {
  static var sharedInstance : UnittestCustomOptionsRoot {
   struct Static {
       static let instance : UnittestCustomOptionsRoot = UnittestCustomOptionsRoot()
   }
   return Static.instance
  }
  var UnittestCustomOptionsRootfileOpt1Static:ConcreateExtensionField
  var UnittestCustomOptionsRootmessageOpt1Static:ConcreateExtensionField
  var UnittestCustomOptionsRootfieldOpt1Static:ConcreateExtensionField
  var UnittestCustomOptionsRootfieldOpt2Static:ConcreateExtensionField
  var UnittestCustomOptionsRootenumOpt1Static:ConcreateExtensionField
  var UnittestCustomOptionsRootenumValueOpt1Static:ConcreateExtensionField
  var UnittestCustomOptionsRootserviceOpt1Static:ConcreateExtensionField
  var UnittestCustomOptionsRootmethodOpt1Static:ConcreateExtensionField
  var UnittestCustomOptionsRootboolOptStatic:ConcreateExtensionField
  var UnittestCustomOptionsRootint32OptStatic:ConcreateExtensionField
  var UnittestCustomOptionsRootint64OptStatic:ConcreateExtensionField
  var UnittestCustomOptionsRootuint32OptStatic:ConcreateExtensionField
  var UnittestCustomOptionsRootuint64OptStatic:ConcreateExtensionField
  var UnittestCustomOptionsRootsint32OptStatic:ConcreateExtensionField
  var UnittestCustomOptionsRootsint64OptStatic:ConcreateExtensionField
  var UnittestCustomOptionsRootfixed32OptStatic:ConcreateExtensionField
  var UnittestCustomOptionsRootfixed64OptStatic:ConcreateExtensionField
  var UnittestCustomOptionsRootsfixed32OptStatic:ConcreateExtensionField
  var UnittestCustomOptionsRootsfixed64OptStatic:ConcreateExtensionField
  var UnittestCustomOptionsRootfloatOptStatic:ConcreateExtensionField
  var UnittestCustomOptionsRootdoubleOptStatic:ConcreateExtensionField
  var UnittestCustomOptionsRootstringOptStatic:ConcreateExtensionField
  var UnittestCustomOptionsRootbytesOptStatic:ConcreateExtensionField
  var UnittestCustomOptionsRootenumOptStatic:ConcreateExtensionField
  var UnittestCustomOptionsRootmessageTypeOptStatic:ConcreateExtensionField
  var UnittestCustomOptionsRootquuxStatic:ConcreateExtensionField
  var UnittestCustomOptionsRootcorgeStatic:ConcreateExtensionField
  var UnittestCustomOptionsRootgraultStatic:ConcreateExtensionField
  var UnittestCustomOptionsRootgarplyStatic:ConcreateExtensionField
  var UnittestCustomOptionsRootcomplexOpt1Static:ConcreateExtensionField
  var UnittestCustomOptionsRootcomplexOpt2Static:ConcreateExtensionField
  var UnittestCustomOptionsRootcomplexOpt3Static:ConcreateExtensionField
  var UnittestCustomOptionsRootcomplexOpt6Static:ConcreateExtensionField
  var UnittestCustomOptionsRootfileoptStatic:ConcreateExtensionField
  var UnittestCustomOptionsRootmsgoptStatic:ConcreateExtensionField
  var UnittestCustomOptionsRootfieldoptStatic:ConcreateExtensionField
  var UnittestCustomOptionsRootenumoptStatic:ConcreateExtensionField
  var UnittestCustomOptionsRootenumvaloptStatic:ConcreateExtensionField
  var UnittestCustomOptionsRootserviceoptStatic:ConcreateExtensionField
  var UnittestCustomOptionsRootmethodoptStatic:ConcreateExtensionField
  var ComplexOptionType2ComplexOptionType4complexOpt4Static:ConcreateExtensionField
  var AggregateMessageSetElementmessageSetExtensionStatic:ConcreateExtensionField
  var AggregatenestedStatic:ConcreateExtensionField
  var NestedOptionTypenestedExtensionStatic:ConcreateExtensionField
  var extensionRegistry:ExtensionRegistry

  init() {
    UnittestCustomOptionsRootfileOpt1Static = ConcreateExtensionField(type:ExtensionType.ExtensionTypeUInt64, extendedClass:PBFileOptions.self, fieldNumber: 7736974, defaultValue:UInt64(0), messageOrGroupClass:Int64.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    UnittestCustomOptionsRootmessageOpt1Static = ConcreateExtensionField(type:ExtensionType.ExtensionTypeInt32, extendedClass:PBMessageOptions.self, fieldNumber: 7739036, defaultValue:Int32(0), messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    UnittestCustomOptionsRootfieldOpt1Static = ConcreateExtensionField(type:ExtensionType.ExtensionTypeFixed64, extendedClass:PBFieldOptions.self, fieldNumber: 7740936, defaultValue:UInt64(0), messageOrGroupClass:Int64.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    UnittestCustomOptionsRootfieldOpt2Static = ConcreateExtensionField(type:ExtensionType.ExtensionTypeInt32, extendedClass:PBFieldOptions.self, fieldNumber: 7753913, defaultValue:Int32(42), messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    UnittestCustomOptionsRootenumOpt1Static = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSFixed32, extendedClass:PBEnumOptions.self, fieldNumber: 7753576, defaultValue:Int32(0), messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    UnittestCustomOptionsRootenumValueOpt1Static = ConcreateExtensionField(type:ExtensionType.ExtensionTypeInt32, extendedClass:PBEnumValueOptions.self, fieldNumber: 1560678, defaultValue:Int32(0), messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    UnittestCustomOptionsRootserviceOpt1Static = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSInt64, extendedClass:PBServiceOptions.self, fieldNumber: 7887650, defaultValue:Int64(0), messageOrGroupClass:Int64.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    UnittestCustomOptionsRootmethodOpt1Static = ConcreateExtensionField(type:ExtensionType.ExtensionTypeEnum, extendedClass:PBMethodOptions.self, fieldNumber: 7890860, defaultValue:MethodOpt1.Methodopt1Val1.rawValue, messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    UnittestCustomOptionsRootboolOptStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeBool, extendedClass:PBMessageOptions.self, fieldNumber: 7706090, defaultValue:false, messageOrGroupClass:Bool.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    UnittestCustomOptionsRootint32OptStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeInt32, extendedClass:PBMessageOptions.self, fieldNumber: 7705709, defaultValue:Int32(0), messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    UnittestCustomOptionsRootint64OptStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeInt64, extendedClass:PBMessageOptions.self, fieldNumber: 7705542, defaultValue:Int64(0), messageOrGroupClass:Int64.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    UnittestCustomOptionsRootuint32OptStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeUInt32, extendedClass:PBMessageOptions.self, fieldNumber: 7704880, defaultValue:UInt32(0), messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    UnittestCustomOptionsRootuint64OptStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeUInt64, extendedClass:PBMessageOptions.self, fieldNumber: 7702367, defaultValue:UInt64(0), messageOrGroupClass:Int64.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    UnittestCustomOptionsRootsint32OptStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSInt32, extendedClass:PBMessageOptions.self, fieldNumber: 7701568, defaultValue:Int32(0), messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    UnittestCustomOptionsRootsint64OptStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSInt64, extendedClass:PBMessageOptions.self, fieldNumber: 7700863, defaultValue:Int64(0), messageOrGroupClass:Int64.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    UnittestCustomOptionsRootfixed32OptStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeFixed32, extendedClass:PBMessageOptions.self, fieldNumber: 7700307, defaultValue:UInt32(0), messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    UnittestCustomOptionsRootfixed64OptStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeFixed64, extendedClass:PBMessageOptions.self, fieldNumber: 7700194, defaultValue:UInt64(0), messageOrGroupClass:Int64.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    UnittestCustomOptionsRootsfixed32OptStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSFixed32, extendedClass:PBMessageOptions.self, fieldNumber: 7698645, defaultValue:Int32(0), messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    UnittestCustomOptionsRootsfixed64OptStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeSFixed64, extendedClass:PBMessageOptions.self, fieldNumber: 7685475, defaultValue:Int64(0), messageOrGroupClass:Int64.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    UnittestCustomOptionsRootfloatOptStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeFloat, extendedClass:PBMessageOptions.self, fieldNumber: 7675390, defaultValue:Float(0), messageOrGroupClass:Float.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    UnittestCustomOptionsRootdoubleOptStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeDouble, extendedClass:PBMessageOptions.self, fieldNumber: 7673293, defaultValue:Double(0), messageOrGroupClass:Double.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    UnittestCustomOptionsRootstringOptStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeString, extendedClass:PBMessageOptions.self, fieldNumber: 7673285, defaultValue:"", messageOrGroupClass:String.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    UnittestCustomOptionsRootbytesOptStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeBytes, extendedClass:PBMessageOptions.self, fieldNumber: 7673238, defaultValue:[Byte](), messageOrGroupClass:[Byte].self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    UnittestCustomOptionsRootenumOptStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeEnum, extendedClass:PBMessageOptions.self, fieldNumber: 7673233, defaultValue:DummyMessageContainingEnum.TestEnumType.TestOptionEnumType1.rawValue, messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    UnittestCustomOptionsRootmessageTypeOptStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:PBMessageOptions.self, fieldNumber: 7665967, defaultValue:DummyMessageInvalidAsOptionType(), messageOrGroupClass:DummyMessageInvalidAsOptionType.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    UnittestCustomOptionsRootquuxStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeInt32, extendedClass:ComplexOptionType1.self, fieldNumber: 7663707, defaultValue:Int32(0), messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    UnittestCustomOptionsRootcorgeStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:ComplexOptionType1.self, fieldNumber: 7663442, defaultValue:ComplexOptionType3(), messageOrGroupClass:ComplexOptionType3.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    UnittestCustomOptionsRootgraultStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeInt32, extendedClass:ComplexOptionType2.self, fieldNumber: 7650927, defaultValue:Int32(0), messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    UnittestCustomOptionsRootgarplyStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:ComplexOptionType2.self, fieldNumber: 7649992, defaultValue:ComplexOptionType1(), messageOrGroupClass:ComplexOptionType1.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    UnittestCustomOptionsRootcomplexOpt1Static = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:PBMessageOptions.self, fieldNumber: 7646756, defaultValue:ComplexOptionType1(), messageOrGroupClass:ComplexOptionType1.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    UnittestCustomOptionsRootcomplexOpt2Static = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:PBMessageOptions.self, fieldNumber: 7636949, defaultValue:ComplexOptionType2(), messageOrGroupClass:ComplexOptionType2.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    UnittestCustomOptionsRootcomplexOpt3Static = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:PBMessageOptions.self, fieldNumber: 7636463, defaultValue:ComplexOptionType3(), messageOrGroupClass:ComplexOptionType3.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    UnittestCustomOptionsRootcomplexOpt6Static = ConcreateExtensionField(type:ExtensionType.ExtensionTypeGroup, extendedClass:PBMessageOptions.self, fieldNumber: 7595468, defaultValue:ComplexOpt6(), messageOrGroupClass:ComplexOpt6.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    UnittestCustomOptionsRootfileoptStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:PBFileOptions.self, fieldNumber: 15478479, defaultValue:Aggregate(), messageOrGroupClass:Aggregate.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    UnittestCustomOptionsRootmsgoptStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:PBMessageOptions.self, fieldNumber: 15480088, defaultValue:Aggregate(), messageOrGroupClass:Aggregate.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    UnittestCustomOptionsRootfieldoptStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:PBFieldOptions.self, fieldNumber: 15481374, defaultValue:Aggregate(), messageOrGroupClass:Aggregate.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    UnittestCustomOptionsRootenumoptStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:PBEnumOptions.self, fieldNumber: 15483218, defaultValue:Aggregate(), messageOrGroupClass:Aggregate.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    UnittestCustomOptionsRootenumvaloptStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:PBEnumValueOptions.self, fieldNumber: 15486921, defaultValue:Aggregate(), messageOrGroupClass:Aggregate.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    UnittestCustomOptionsRootserviceoptStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:PBServiceOptions.self, fieldNumber: 15497145, defaultValue:Aggregate(), messageOrGroupClass:Aggregate.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    UnittestCustomOptionsRootmethodoptStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:PBMethodOptions.self, fieldNumber: 15512713, defaultValue:Aggregate(), messageOrGroupClass:Aggregate.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    ComplexOptionType2ComplexOptionType4complexOpt4Static = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:PBMessageOptions.self, fieldNumber: 7633546, defaultValue:ComplexOptionType2.ComplexOptionType4(), messageOrGroupClass:ComplexOptionType2.ComplexOptionType4.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    AggregateMessageSetElementmessageSetExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:AggregateMessageSet.self, fieldNumber: 15447542, defaultValue:AggregateMessageSetElement(), messageOrGroupClass:AggregateMessageSetElement.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:true)
    AggregatenestedStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:PBFileOptions.self, fieldNumber: 15476903, defaultValue:Aggregate(), messageOrGroupClass:Aggregate.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    NestedOptionTypenestedExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeInt32, extendedClass:PBFileOptions.self, fieldNumber: 7912573, defaultValue:Int32(0), messageOrGroupClass:Int32.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:false)
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(extensionRegistry)
    PBDescriptorRoot.sharedInstance.registerAllExtensions(extensionRegistry)
  }
  func registerAllExtensions(registry:ExtensionRegistry) {
    registry.addExtension(UnittestCustomOptionsRootfileOpt1Static)
    registry.addExtension(UnittestCustomOptionsRootmessageOpt1Static)
    registry.addExtension(UnittestCustomOptionsRootfieldOpt1Static)
    registry.addExtension(UnittestCustomOptionsRootfieldOpt2Static)
    registry.addExtension(UnittestCustomOptionsRootenumOpt1Static)
    registry.addExtension(UnittestCustomOptionsRootenumValueOpt1Static)
    registry.addExtension(UnittestCustomOptionsRootserviceOpt1Static)
    registry.addExtension(UnittestCustomOptionsRootmethodOpt1Static)
    registry.addExtension(UnittestCustomOptionsRootboolOptStatic)
    registry.addExtension(UnittestCustomOptionsRootint32OptStatic)
    registry.addExtension(UnittestCustomOptionsRootint64OptStatic)
    registry.addExtension(UnittestCustomOptionsRootuint32OptStatic)
    registry.addExtension(UnittestCustomOptionsRootuint64OptStatic)
    registry.addExtension(UnittestCustomOptionsRootsint32OptStatic)
    registry.addExtension(UnittestCustomOptionsRootsint64OptStatic)
    registry.addExtension(UnittestCustomOptionsRootfixed32OptStatic)
    registry.addExtension(UnittestCustomOptionsRootfixed64OptStatic)
    registry.addExtension(UnittestCustomOptionsRootsfixed32OptStatic)
    registry.addExtension(UnittestCustomOptionsRootsfixed64OptStatic)
    registry.addExtension(UnittestCustomOptionsRootfloatOptStatic)
    registry.addExtension(UnittestCustomOptionsRootdoubleOptStatic)
    registry.addExtension(UnittestCustomOptionsRootstringOptStatic)
    registry.addExtension(UnittestCustomOptionsRootbytesOptStatic)
    registry.addExtension(UnittestCustomOptionsRootenumOptStatic)
    registry.addExtension(UnittestCustomOptionsRootmessageTypeOptStatic)
    registry.addExtension(UnittestCustomOptionsRootquuxStatic)
    registry.addExtension(UnittestCustomOptionsRootcorgeStatic)
    registry.addExtension(UnittestCustomOptionsRootgraultStatic)
    registry.addExtension(UnittestCustomOptionsRootgarplyStatic)
    registry.addExtension(UnittestCustomOptionsRootcomplexOpt1Static)
    registry.addExtension(UnittestCustomOptionsRootcomplexOpt2Static)
    registry.addExtension(UnittestCustomOptionsRootcomplexOpt3Static)
    registry.addExtension(UnittestCustomOptionsRootcomplexOpt6Static)
    registry.addExtension(UnittestCustomOptionsRootfileoptStatic)
    registry.addExtension(UnittestCustomOptionsRootmsgoptStatic)
    registry.addExtension(UnittestCustomOptionsRootfieldoptStatic)
    registry.addExtension(UnittestCustomOptionsRootenumoptStatic)
    registry.addExtension(UnittestCustomOptionsRootenumvaloptStatic)
    registry.addExtension(UnittestCustomOptionsRootserviceoptStatic)
    registry.addExtension(UnittestCustomOptionsRootmethodoptStatic)
    registry.addExtension(ComplexOptionType2ComplexOptionType4complexOpt4Static)
    registry.addExtension(AggregateMessageSetElementmessageSetExtensionStatic)
    registry.addExtension(AggregatenestedStatic)
    registry.addExtension(NestedOptionTypenestedExtensionStatic)
  }
  static func fileOpt1() -> ConcreateExtensionField {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootfileOpt1Static
  }
  static func messageOpt1() -> ConcreateExtensionField {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootmessageOpt1Static
  }
  static func fieldOpt1() -> ConcreateExtensionField {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootfieldOpt1Static
  }
  static func fieldOpt2() -> ConcreateExtensionField {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootfieldOpt2Static
  }
  static func enumOpt1() -> ConcreateExtensionField {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootenumOpt1Static
  }
  static func enumValueOpt1() -> ConcreateExtensionField {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootenumValueOpt1Static
  }
  static func serviceOpt1() -> ConcreateExtensionField {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootserviceOpt1Static
  }
  static func methodOpt1() -> ConcreateExtensionField {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootmethodOpt1Static
  }
  static func boolOpt() -> ConcreateExtensionField {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootboolOptStatic
  }
  static func int32Opt() -> ConcreateExtensionField {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootint32OptStatic
  }
  static func int64Opt() -> ConcreateExtensionField {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootint64OptStatic
  }
  static func uint32Opt() -> ConcreateExtensionField {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootuint32OptStatic
  }
  static func uint64Opt() -> ConcreateExtensionField {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootuint64OptStatic
  }
  static func sint32Opt() -> ConcreateExtensionField {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootsint32OptStatic
  }
  static func sint64Opt() -> ConcreateExtensionField {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootsint64OptStatic
  }
  static func fixed32Opt() -> ConcreateExtensionField {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootfixed32OptStatic
  }
  static func fixed64Opt() -> ConcreateExtensionField {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootfixed64OptStatic
  }
  static func sfixed32Opt() -> ConcreateExtensionField {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootsfixed32OptStatic
  }
  static func sfixed64Opt() -> ConcreateExtensionField {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootsfixed64OptStatic
  }
  static func floatOpt() -> ConcreateExtensionField {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootfloatOptStatic
  }
  static func doubleOpt() -> ConcreateExtensionField {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootdoubleOptStatic
  }
  static func stringOpt() -> ConcreateExtensionField {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootstringOptStatic
  }
  static func bytesOpt() -> ConcreateExtensionField {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootbytesOptStatic
  }
  static func enumOpt() -> ConcreateExtensionField {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootenumOptStatic
  }
  static func messageTypeOpt() -> ConcreateExtensionField {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootmessageTypeOptStatic
  }
  static func quux() -> ConcreateExtensionField {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootquuxStatic
  }
  static func corge() -> ConcreateExtensionField {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootcorgeStatic
  }
  static func grault() -> ConcreateExtensionField {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootgraultStatic
  }
  static func garply() -> ConcreateExtensionField {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootgarplyStatic
  }
  static func complexOpt1() -> ConcreateExtensionField {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootcomplexOpt1Static
  }
  static func complexOpt2() -> ConcreateExtensionField {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootcomplexOpt2Static
  }
  static func complexOpt3() -> ConcreateExtensionField {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootcomplexOpt3Static
  }
  static func complexOpt6() -> ConcreateExtensionField {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootcomplexOpt6Static
  }
  static func fileopt() -> ConcreateExtensionField {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootfileoptStatic
  }
  static func msgopt() -> ConcreateExtensionField {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootmsgoptStatic
  }
  static func fieldopt() -> ConcreateExtensionField {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootfieldoptStatic
  }
  static func enumopt() -> ConcreateExtensionField {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootenumoptStatic
  }
  static func enumvalopt() -> ConcreateExtensionField {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootenumvaloptStatic
  }
  static func serviceopt() -> ConcreateExtensionField {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootserviceoptStatic
  }
  static func methodopt() -> ConcreateExtensionField {
       return UnittestCustomOptionsRoot.sharedInstance.UnittestCustomOptionsRootmethodoptStatic
  }
}



//Enum type declaration start 

enum MethodOpt1:Int32 {
  case Methodopt1Val1 = 1
  case Methodopt1Val2 = 2

  static func IsValidValue(value:MethodOpt1) ->Bool {
    switch value {
      case .Methodopt1Val1, .Methodopt1Val2:
        return true;
      default:
        return false;
    }
  }
}



//Enum type declaration end 



//Enum type declaration start 

enum AggregateEnum:Int32 {
  case Value = 1

  static func IsValidValue(value:AggregateEnum) ->Bool {
    switch value {
      case .Value:
        return true;
      default:
        return false;
    }
  }
}



//Enum type declaration end 

func == (lhs: TestMessageWithCustomOptions, rhs: TestMessageWithCustomOptions) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasField1 == rhs.hasField1) && (!lhs.hasField1 || lhs.field1 == rhs.field1)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: CustomOptionFooRequest, rhs: CustomOptionFooRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: CustomOptionFooResponse, rhs: CustomOptionFooResponse) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: CustomOptionFooClientMessage, rhs: CustomOptionFooClientMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: CustomOptionFooServerMessage, rhs: CustomOptionFooServerMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: DummyMessageContainingEnum, rhs: DummyMessageContainingEnum) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: DummyMessageInvalidAsOptionType, rhs: DummyMessageInvalidAsOptionType) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: CustomOptionMinIntegerValues, rhs: CustomOptionMinIntegerValues) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: CustomOptionMaxIntegerValues, rhs: CustomOptionMaxIntegerValues) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: CustomOptionOtherValues, rhs: CustomOptionOtherValues) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: SettingRealsFromPositiveInts, rhs: SettingRealsFromPositiveInts) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: SettingRealsFromNegativeInts, rhs: SettingRealsFromNegativeInts) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: ComplexOptionType1, rhs: ComplexOptionType1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasFoo == rhs.hasFoo) && (!lhs.hasFoo || lhs.foo == rhs.foo)
  fieldCheck = fieldCheck && (lhs.hasFoo2 == rhs.hasFoo2) && (!lhs.hasFoo2 || lhs.foo2 == rhs.foo2)
  fieldCheck = fieldCheck && (lhs.hasFoo3 == rhs.hasFoo3) && (!lhs.hasFoo3 || lhs.foo3 == rhs.foo3)
  fieldCheck = fieldCheck && (lhs.foo4 == rhs.foo4)
  fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(100), endExclusive:Int32(536870912))
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: ComplexOptionType2.ComplexOptionType4, rhs: ComplexOptionType2.ComplexOptionType4) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasWaldo == rhs.hasWaldo) && (!lhs.hasWaldo || lhs.waldo == rhs.waldo)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: ComplexOptionType2, rhs: ComplexOptionType2) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasBar == rhs.hasBar) && (!lhs.hasBar || lhs.bar == rhs.bar)
  fieldCheck = fieldCheck && (lhs.hasBaz == rhs.hasBaz) && (!lhs.hasBaz || lhs.baz == rhs.baz)
  fieldCheck = fieldCheck && (lhs.hasFred == rhs.hasFred) && (!lhs.hasFred || lhs.fred == rhs.fred)
  fieldCheck = fieldCheck && (lhs.barney == rhs.barney)
  fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(100), endExclusive:Int32(536870912))
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: ComplexOptionType3.ComplexOptionType5, rhs: ComplexOptionType3.ComplexOptionType5) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasPlugh == rhs.hasPlugh) && (!lhs.hasPlugh || lhs.plugh == rhs.plugh)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: ComplexOptionType3, rhs: ComplexOptionType3) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasQux == rhs.hasQux) && (!lhs.hasQux || lhs.qux == rhs.qux)
  fieldCheck = fieldCheck && (lhs.hasComplexOptionType5 == rhs.hasComplexOptionType5) && (!lhs.hasComplexOptionType5 || lhs.complexOptionType5 == rhs.complexOptionType5)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: ComplexOpt6, rhs: ComplexOpt6) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasXyzzy == rhs.hasXyzzy) && (!lhs.hasXyzzy || lhs.xyzzy == rhs.xyzzy)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: VariousComplexOptions, rhs: VariousComplexOptions) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: AggregateMessageSet, rhs: AggregateMessageSet) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(4), endExclusive:Int32(2147483647))
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: AggregateMessageSetElement, rhs: AggregateMessageSetElement) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasS == rhs.hasS) && (!lhs.hasS || lhs.s == rhs.s)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: Aggregate, rhs: Aggregate) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasI == rhs.hasI) && (!lhs.hasI || lhs.i == rhs.i)
  fieldCheck = fieldCheck && (lhs.hasS == rhs.hasS) && (!lhs.hasS || lhs.s == rhs.s)
  fieldCheck = fieldCheck && (lhs.hasSub == rhs.hasSub) && (!lhs.hasSub || lhs.sub == rhs.sub)
  fieldCheck = fieldCheck && (lhs.hasFile == rhs.hasFile) && (!lhs.hasFile || lhs.file == rhs.file)
  fieldCheck = fieldCheck && (lhs.hasMset == rhs.hasMset) && (!lhs.hasMset || lhs.mset == rhs.mset)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: AggregateMessage, rhs: AggregateMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasFieldname == rhs.hasFieldname) && (!lhs.hasFieldname || lhs.fieldname == rhs.fieldname)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: NestedOptionType.NestedMessage, rhs: NestedOptionType.NestedMessage) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasNestedField == rhs.hasNestedField) && (!lhs.hasNestedField || lhs.nestedField == rhs.nestedField)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: NestedOptionType, rhs: NestedOptionType) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

final public class TestMessageWithCustomOptions : GeneratedMessage {


    //Enum type declaration start 

    enum AnEnum:Int32 {
      case AnenumVal1 = 1
      case AnenumVal2 = 2

      static func IsValidValue(value:AnEnum) ->Bool {
        switch value {
          case .AnenumVal1, .AnenumVal2:
            return true;
          default:
            return false;
        }
      }
    }



    //Enum type declaration end 

  private(set) var hasField1:Bool = false
  private(set) var field1:String = ""

  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasField1 {
      output.writeString(1, value:field1)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasField1 {
      size += WireFormat.computeStringSize(1, value:field1)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> TestMessageWithCustomOptions {
    return TestMessageWithCustomOptions.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestMessageWithCustomOptions {
    return TestMessageWithCustomOptions.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> TestMessageWithCustomOptions {
    return TestMessageWithCustomOptions.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestMessageWithCustomOptions {
    return TestMessageWithCustomOptions.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> TestMessageWithCustomOptions {
    return TestMessageWithCustomOptions.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestMessageWithCustomOptions {
    return TestMessageWithCustomOptions.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> TestMessageWithCustomOptionsBuilder {
    return TestMessageWithCustomOptionsBuilder()
  }
  class func builderWithPrototype(prototype:TestMessageWithCustomOptions) -> TestMessageWithCustomOptionsBuilder {
    return TestMessageWithCustomOptions.builder().mergeFrom(prototype)
  }
  func builder() -> TestMessageWithCustomOptionsBuilder {
    return TestMessageWithCustomOptions.builder()
  }
  func toBuilder() -> TestMessageWithCustomOptionsBuilder {
    return TestMessageWithCustomOptions.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if hasField1 {
      output += "\(indent) field1: \(field1) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasField1 {
             hashCode = (hashCode &* 31) &+ field1.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "TestMessageWithCustomOptions"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return TestMessageWithCustomOptions.self
  }


  //Meta information declaration end

}

final class TestMessageWithCustomOptionsBuilder : GeneratedMessageBuilder {
  private var builderResult:TestMessageWithCustomOptions

  required override init () {
     builderResult = TestMessageWithCustomOptions()
     super.init()
  }
  var hasField1:Bool {
       get {
            return builderResult.hasField1
       }
  }
  var field1:String {
       get {
            return builderResult.field1
       }
       set (value) {
           builderResult.hasField1 = true
           builderResult.field1 = value
       }
  }
  func clearField1() -> TestMessageWithCustomOptionsBuilder{
       builderResult.hasField1 = false
       builderResult.field1 = ""
       return self
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> TestMessageWithCustomOptionsBuilder {
    builderResult = TestMessageWithCustomOptions()
    return self
  }
  override func clone() -> TestMessageWithCustomOptionsBuilder {
    return TestMessageWithCustomOptions.builderWithPrototype(builderResult)
  }
  override func build() -> TestMessageWithCustomOptions {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> TestMessageWithCustomOptions {
    var returnMe:TestMessageWithCustomOptions = builderResult
    return returnMe
  }
  func mergeFrom(other:TestMessageWithCustomOptions) -> TestMessageWithCustomOptionsBuilder {
    if (other == TestMessageWithCustomOptions()) {
     return self
    }
    if other.hasField1 {
         field1 = other.field1
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->TestMessageWithCustomOptionsBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestMessageWithCustomOptionsBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 10 :
        field1 = input.readString()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class CustomOptionFooRequest : GeneratedMessage {
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> CustomOptionFooRequest {
    return CustomOptionFooRequest.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> CustomOptionFooRequest {
    return CustomOptionFooRequest.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> CustomOptionFooRequest {
    return CustomOptionFooRequest.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->CustomOptionFooRequest {
    return CustomOptionFooRequest.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> CustomOptionFooRequest {
    return CustomOptionFooRequest.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> CustomOptionFooRequest {
    return CustomOptionFooRequest.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> CustomOptionFooRequestBuilder {
    return CustomOptionFooRequestBuilder()
  }
  class func builderWithPrototype(prototype:CustomOptionFooRequest) -> CustomOptionFooRequestBuilder {
    return CustomOptionFooRequest.builder().mergeFrom(prototype)
  }
  func builder() -> CustomOptionFooRequestBuilder {
    return CustomOptionFooRequest.builder()
  }
  func toBuilder() -> CustomOptionFooRequestBuilder {
    return CustomOptionFooRequest.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "CustomOptionFooRequest"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return CustomOptionFooRequest.self
  }


  //Meta information declaration end

}

final class CustomOptionFooRequestBuilder : GeneratedMessageBuilder {
  private var builderResult:CustomOptionFooRequest

  required override init () {
     builderResult = CustomOptionFooRequest()
     super.init()
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> CustomOptionFooRequestBuilder {
    builderResult = CustomOptionFooRequest()
    return self
  }
  override func clone() -> CustomOptionFooRequestBuilder {
    return CustomOptionFooRequest.builderWithPrototype(builderResult)
  }
  override func build() -> CustomOptionFooRequest {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> CustomOptionFooRequest {
    var returnMe:CustomOptionFooRequest = builderResult
    return returnMe
  }
  func mergeFrom(other:CustomOptionFooRequest) -> CustomOptionFooRequestBuilder {
    if (other == CustomOptionFooRequest()) {
     return self
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->CustomOptionFooRequestBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> CustomOptionFooRequestBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class CustomOptionFooResponse : GeneratedMessage {
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> CustomOptionFooResponse {
    return CustomOptionFooResponse.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> CustomOptionFooResponse {
    return CustomOptionFooResponse.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> CustomOptionFooResponse {
    return CustomOptionFooResponse.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->CustomOptionFooResponse {
    return CustomOptionFooResponse.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> CustomOptionFooResponse {
    return CustomOptionFooResponse.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> CustomOptionFooResponse {
    return CustomOptionFooResponse.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> CustomOptionFooResponseBuilder {
    return CustomOptionFooResponseBuilder()
  }
  class func builderWithPrototype(prototype:CustomOptionFooResponse) -> CustomOptionFooResponseBuilder {
    return CustomOptionFooResponse.builder().mergeFrom(prototype)
  }
  func builder() -> CustomOptionFooResponseBuilder {
    return CustomOptionFooResponse.builder()
  }
  func toBuilder() -> CustomOptionFooResponseBuilder {
    return CustomOptionFooResponse.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "CustomOptionFooResponse"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return CustomOptionFooResponse.self
  }


  //Meta information declaration end

}

final class CustomOptionFooResponseBuilder : GeneratedMessageBuilder {
  private var builderResult:CustomOptionFooResponse

  required override init () {
     builderResult = CustomOptionFooResponse()
     super.init()
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> CustomOptionFooResponseBuilder {
    builderResult = CustomOptionFooResponse()
    return self
  }
  override func clone() -> CustomOptionFooResponseBuilder {
    return CustomOptionFooResponse.builderWithPrototype(builderResult)
  }
  override func build() -> CustomOptionFooResponse {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> CustomOptionFooResponse {
    var returnMe:CustomOptionFooResponse = builderResult
    return returnMe
  }
  func mergeFrom(other:CustomOptionFooResponse) -> CustomOptionFooResponseBuilder {
    if (other == CustomOptionFooResponse()) {
     return self
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->CustomOptionFooResponseBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> CustomOptionFooResponseBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class CustomOptionFooClientMessage : GeneratedMessage {
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> CustomOptionFooClientMessage {
    return CustomOptionFooClientMessage.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> CustomOptionFooClientMessage {
    return CustomOptionFooClientMessage.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> CustomOptionFooClientMessage {
    return CustomOptionFooClientMessage.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->CustomOptionFooClientMessage {
    return CustomOptionFooClientMessage.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> CustomOptionFooClientMessage {
    return CustomOptionFooClientMessage.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> CustomOptionFooClientMessage {
    return CustomOptionFooClientMessage.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> CustomOptionFooClientMessageBuilder {
    return CustomOptionFooClientMessageBuilder()
  }
  class func builderWithPrototype(prototype:CustomOptionFooClientMessage) -> CustomOptionFooClientMessageBuilder {
    return CustomOptionFooClientMessage.builder().mergeFrom(prototype)
  }
  func builder() -> CustomOptionFooClientMessageBuilder {
    return CustomOptionFooClientMessage.builder()
  }
  func toBuilder() -> CustomOptionFooClientMessageBuilder {
    return CustomOptionFooClientMessage.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "CustomOptionFooClientMessage"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return CustomOptionFooClientMessage.self
  }


  //Meta information declaration end

}

final class CustomOptionFooClientMessageBuilder : GeneratedMessageBuilder {
  private var builderResult:CustomOptionFooClientMessage

  required override init () {
     builderResult = CustomOptionFooClientMessage()
     super.init()
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> CustomOptionFooClientMessageBuilder {
    builderResult = CustomOptionFooClientMessage()
    return self
  }
  override func clone() -> CustomOptionFooClientMessageBuilder {
    return CustomOptionFooClientMessage.builderWithPrototype(builderResult)
  }
  override func build() -> CustomOptionFooClientMessage {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> CustomOptionFooClientMessage {
    var returnMe:CustomOptionFooClientMessage = builderResult
    return returnMe
  }
  func mergeFrom(other:CustomOptionFooClientMessage) -> CustomOptionFooClientMessageBuilder {
    if (other == CustomOptionFooClientMessage()) {
     return self
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->CustomOptionFooClientMessageBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> CustomOptionFooClientMessageBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class CustomOptionFooServerMessage : GeneratedMessage {
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> CustomOptionFooServerMessage {
    return CustomOptionFooServerMessage.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> CustomOptionFooServerMessage {
    return CustomOptionFooServerMessage.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> CustomOptionFooServerMessage {
    return CustomOptionFooServerMessage.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->CustomOptionFooServerMessage {
    return CustomOptionFooServerMessage.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> CustomOptionFooServerMessage {
    return CustomOptionFooServerMessage.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> CustomOptionFooServerMessage {
    return CustomOptionFooServerMessage.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> CustomOptionFooServerMessageBuilder {
    return CustomOptionFooServerMessageBuilder()
  }
  class func builderWithPrototype(prototype:CustomOptionFooServerMessage) -> CustomOptionFooServerMessageBuilder {
    return CustomOptionFooServerMessage.builder().mergeFrom(prototype)
  }
  func builder() -> CustomOptionFooServerMessageBuilder {
    return CustomOptionFooServerMessage.builder()
  }
  func toBuilder() -> CustomOptionFooServerMessageBuilder {
    return CustomOptionFooServerMessage.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "CustomOptionFooServerMessage"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return CustomOptionFooServerMessage.self
  }


  //Meta information declaration end

}

final class CustomOptionFooServerMessageBuilder : GeneratedMessageBuilder {
  private var builderResult:CustomOptionFooServerMessage

  required override init () {
     builderResult = CustomOptionFooServerMessage()
     super.init()
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> CustomOptionFooServerMessageBuilder {
    builderResult = CustomOptionFooServerMessage()
    return self
  }
  override func clone() -> CustomOptionFooServerMessageBuilder {
    return CustomOptionFooServerMessage.builderWithPrototype(builderResult)
  }
  override func build() -> CustomOptionFooServerMessage {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> CustomOptionFooServerMessage {
    var returnMe:CustomOptionFooServerMessage = builderResult
    return returnMe
  }
  func mergeFrom(other:CustomOptionFooServerMessage) -> CustomOptionFooServerMessageBuilder {
    if (other == CustomOptionFooServerMessage()) {
     return self
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->CustomOptionFooServerMessageBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> CustomOptionFooServerMessageBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class DummyMessageContainingEnum : GeneratedMessage {


    //Enum type declaration start 

    enum TestEnumType:Int32 {
      case TestOptionEnumType1 = 22
      case TestOptionEnumType2 = -23

      static func IsValidValue(value:TestEnumType) ->Bool {
        switch value {
          case .TestOptionEnumType1, .TestOptionEnumType2:
            return true;
          default:
            return false;
        }
      }
    }



    //Enum type declaration end 

  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> DummyMessageContainingEnum {
    return DummyMessageContainingEnum.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> DummyMessageContainingEnum {
    return DummyMessageContainingEnum.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> DummyMessageContainingEnum {
    return DummyMessageContainingEnum.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->DummyMessageContainingEnum {
    return DummyMessageContainingEnum.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> DummyMessageContainingEnum {
    return DummyMessageContainingEnum.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> DummyMessageContainingEnum {
    return DummyMessageContainingEnum.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> DummyMessageContainingEnumBuilder {
    return DummyMessageContainingEnumBuilder()
  }
  class func builderWithPrototype(prototype:DummyMessageContainingEnum) -> DummyMessageContainingEnumBuilder {
    return DummyMessageContainingEnum.builder().mergeFrom(prototype)
  }
  func builder() -> DummyMessageContainingEnumBuilder {
    return DummyMessageContainingEnum.builder()
  }
  func toBuilder() -> DummyMessageContainingEnumBuilder {
    return DummyMessageContainingEnum.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "DummyMessageContainingEnum"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return DummyMessageContainingEnum.self
  }


  //Meta information declaration end

}

final class DummyMessageContainingEnumBuilder : GeneratedMessageBuilder {
  private var builderResult:DummyMessageContainingEnum

  required override init () {
     builderResult = DummyMessageContainingEnum()
     super.init()
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> DummyMessageContainingEnumBuilder {
    builderResult = DummyMessageContainingEnum()
    return self
  }
  override func clone() -> DummyMessageContainingEnumBuilder {
    return DummyMessageContainingEnum.builderWithPrototype(builderResult)
  }
  override func build() -> DummyMessageContainingEnum {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> DummyMessageContainingEnum {
    var returnMe:DummyMessageContainingEnum = builderResult
    return returnMe
  }
  func mergeFrom(other:DummyMessageContainingEnum) -> DummyMessageContainingEnumBuilder {
    if (other == DummyMessageContainingEnum()) {
     return self
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->DummyMessageContainingEnumBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> DummyMessageContainingEnumBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class DummyMessageInvalidAsOptionType : GeneratedMessage {
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> DummyMessageInvalidAsOptionType {
    return DummyMessageInvalidAsOptionType.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> DummyMessageInvalidAsOptionType {
    return DummyMessageInvalidAsOptionType.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> DummyMessageInvalidAsOptionType {
    return DummyMessageInvalidAsOptionType.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->DummyMessageInvalidAsOptionType {
    return DummyMessageInvalidAsOptionType.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> DummyMessageInvalidAsOptionType {
    return DummyMessageInvalidAsOptionType.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> DummyMessageInvalidAsOptionType {
    return DummyMessageInvalidAsOptionType.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> DummyMessageInvalidAsOptionTypeBuilder {
    return DummyMessageInvalidAsOptionTypeBuilder()
  }
  class func builderWithPrototype(prototype:DummyMessageInvalidAsOptionType) -> DummyMessageInvalidAsOptionTypeBuilder {
    return DummyMessageInvalidAsOptionType.builder().mergeFrom(prototype)
  }
  func builder() -> DummyMessageInvalidAsOptionTypeBuilder {
    return DummyMessageInvalidAsOptionType.builder()
  }
  func toBuilder() -> DummyMessageInvalidAsOptionTypeBuilder {
    return DummyMessageInvalidAsOptionType.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "DummyMessageInvalidAsOptionType"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return DummyMessageInvalidAsOptionType.self
  }


  //Meta information declaration end

}

final class DummyMessageInvalidAsOptionTypeBuilder : GeneratedMessageBuilder {
  private var builderResult:DummyMessageInvalidAsOptionType

  required override init () {
     builderResult = DummyMessageInvalidAsOptionType()
     super.init()
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> DummyMessageInvalidAsOptionTypeBuilder {
    builderResult = DummyMessageInvalidAsOptionType()
    return self
  }
  override func clone() -> DummyMessageInvalidAsOptionTypeBuilder {
    return DummyMessageInvalidAsOptionType.builderWithPrototype(builderResult)
  }
  override func build() -> DummyMessageInvalidAsOptionType {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> DummyMessageInvalidAsOptionType {
    var returnMe:DummyMessageInvalidAsOptionType = builderResult
    return returnMe
  }
  func mergeFrom(other:DummyMessageInvalidAsOptionType) -> DummyMessageInvalidAsOptionTypeBuilder {
    if (other == DummyMessageInvalidAsOptionType()) {
     return self
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->DummyMessageInvalidAsOptionTypeBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> DummyMessageInvalidAsOptionTypeBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class CustomOptionMinIntegerValues : GeneratedMessage {
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> CustomOptionMinIntegerValues {
    return CustomOptionMinIntegerValues.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> CustomOptionMinIntegerValues {
    return CustomOptionMinIntegerValues.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> CustomOptionMinIntegerValues {
    return CustomOptionMinIntegerValues.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->CustomOptionMinIntegerValues {
    return CustomOptionMinIntegerValues.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> CustomOptionMinIntegerValues {
    return CustomOptionMinIntegerValues.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> CustomOptionMinIntegerValues {
    return CustomOptionMinIntegerValues.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> CustomOptionMinIntegerValuesBuilder {
    return CustomOptionMinIntegerValuesBuilder()
  }
  class func builderWithPrototype(prototype:CustomOptionMinIntegerValues) -> CustomOptionMinIntegerValuesBuilder {
    return CustomOptionMinIntegerValues.builder().mergeFrom(prototype)
  }
  func builder() -> CustomOptionMinIntegerValuesBuilder {
    return CustomOptionMinIntegerValues.builder()
  }
  func toBuilder() -> CustomOptionMinIntegerValuesBuilder {
    return CustomOptionMinIntegerValues.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "CustomOptionMinIntegerValues"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return CustomOptionMinIntegerValues.self
  }


  //Meta information declaration end

}

final class CustomOptionMinIntegerValuesBuilder : GeneratedMessageBuilder {
  private var builderResult:CustomOptionMinIntegerValues

  required override init () {
     builderResult = CustomOptionMinIntegerValues()
     super.init()
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> CustomOptionMinIntegerValuesBuilder {
    builderResult = CustomOptionMinIntegerValues()
    return self
  }
  override func clone() -> CustomOptionMinIntegerValuesBuilder {
    return CustomOptionMinIntegerValues.builderWithPrototype(builderResult)
  }
  override func build() -> CustomOptionMinIntegerValues {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> CustomOptionMinIntegerValues {
    var returnMe:CustomOptionMinIntegerValues = builderResult
    return returnMe
  }
  func mergeFrom(other:CustomOptionMinIntegerValues) -> CustomOptionMinIntegerValuesBuilder {
    if (other == CustomOptionMinIntegerValues()) {
     return self
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->CustomOptionMinIntegerValuesBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> CustomOptionMinIntegerValuesBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class CustomOptionMaxIntegerValues : GeneratedMessage {
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> CustomOptionMaxIntegerValues {
    return CustomOptionMaxIntegerValues.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> CustomOptionMaxIntegerValues {
    return CustomOptionMaxIntegerValues.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> CustomOptionMaxIntegerValues {
    return CustomOptionMaxIntegerValues.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->CustomOptionMaxIntegerValues {
    return CustomOptionMaxIntegerValues.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> CustomOptionMaxIntegerValues {
    return CustomOptionMaxIntegerValues.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> CustomOptionMaxIntegerValues {
    return CustomOptionMaxIntegerValues.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> CustomOptionMaxIntegerValuesBuilder {
    return CustomOptionMaxIntegerValuesBuilder()
  }
  class func builderWithPrototype(prototype:CustomOptionMaxIntegerValues) -> CustomOptionMaxIntegerValuesBuilder {
    return CustomOptionMaxIntegerValues.builder().mergeFrom(prototype)
  }
  func builder() -> CustomOptionMaxIntegerValuesBuilder {
    return CustomOptionMaxIntegerValues.builder()
  }
  func toBuilder() -> CustomOptionMaxIntegerValuesBuilder {
    return CustomOptionMaxIntegerValues.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "CustomOptionMaxIntegerValues"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return CustomOptionMaxIntegerValues.self
  }


  //Meta information declaration end

}

final class CustomOptionMaxIntegerValuesBuilder : GeneratedMessageBuilder {
  private var builderResult:CustomOptionMaxIntegerValues

  required override init () {
     builderResult = CustomOptionMaxIntegerValues()
     super.init()
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> CustomOptionMaxIntegerValuesBuilder {
    builderResult = CustomOptionMaxIntegerValues()
    return self
  }
  override func clone() -> CustomOptionMaxIntegerValuesBuilder {
    return CustomOptionMaxIntegerValues.builderWithPrototype(builderResult)
  }
  override func build() -> CustomOptionMaxIntegerValues {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> CustomOptionMaxIntegerValues {
    var returnMe:CustomOptionMaxIntegerValues = builderResult
    return returnMe
  }
  func mergeFrom(other:CustomOptionMaxIntegerValues) -> CustomOptionMaxIntegerValuesBuilder {
    if (other == CustomOptionMaxIntegerValues()) {
     return self
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->CustomOptionMaxIntegerValuesBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> CustomOptionMaxIntegerValuesBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class CustomOptionOtherValues : GeneratedMessage {
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> CustomOptionOtherValues {
    return CustomOptionOtherValues.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> CustomOptionOtherValues {
    return CustomOptionOtherValues.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> CustomOptionOtherValues {
    return CustomOptionOtherValues.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->CustomOptionOtherValues {
    return CustomOptionOtherValues.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> CustomOptionOtherValues {
    return CustomOptionOtherValues.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> CustomOptionOtherValues {
    return CustomOptionOtherValues.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> CustomOptionOtherValuesBuilder {
    return CustomOptionOtherValuesBuilder()
  }
  class func builderWithPrototype(prototype:CustomOptionOtherValues) -> CustomOptionOtherValuesBuilder {
    return CustomOptionOtherValues.builder().mergeFrom(prototype)
  }
  func builder() -> CustomOptionOtherValuesBuilder {
    return CustomOptionOtherValues.builder()
  }
  func toBuilder() -> CustomOptionOtherValuesBuilder {
    return CustomOptionOtherValues.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "CustomOptionOtherValues"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return CustomOptionOtherValues.self
  }


  //Meta information declaration end

}

final class CustomOptionOtherValuesBuilder : GeneratedMessageBuilder {
  private var builderResult:CustomOptionOtherValues

  required override init () {
     builderResult = CustomOptionOtherValues()
     super.init()
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> CustomOptionOtherValuesBuilder {
    builderResult = CustomOptionOtherValues()
    return self
  }
  override func clone() -> CustomOptionOtherValuesBuilder {
    return CustomOptionOtherValues.builderWithPrototype(builderResult)
  }
  override func build() -> CustomOptionOtherValues {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> CustomOptionOtherValues {
    var returnMe:CustomOptionOtherValues = builderResult
    return returnMe
  }
  func mergeFrom(other:CustomOptionOtherValues) -> CustomOptionOtherValuesBuilder {
    if (other == CustomOptionOtherValues()) {
     return self
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->CustomOptionOtherValuesBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> CustomOptionOtherValuesBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class SettingRealsFromPositiveInts : GeneratedMessage {
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> SettingRealsFromPositiveInts {
    return SettingRealsFromPositiveInts.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> SettingRealsFromPositiveInts {
    return SettingRealsFromPositiveInts.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> SettingRealsFromPositiveInts {
    return SettingRealsFromPositiveInts.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->SettingRealsFromPositiveInts {
    return SettingRealsFromPositiveInts.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> SettingRealsFromPositiveInts {
    return SettingRealsFromPositiveInts.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> SettingRealsFromPositiveInts {
    return SettingRealsFromPositiveInts.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> SettingRealsFromPositiveIntsBuilder {
    return SettingRealsFromPositiveIntsBuilder()
  }
  class func builderWithPrototype(prototype:SettingRealsFromPositiveInts) -> SettingRealsFromPositiveIntsBuilder {
    return SettingRealsFromPositiveInts.builder().mergeFrom(prototype)
  }
  func builder() -> SettingRealsFromPositiveIntsBuilder {
    return SettingRealsFromPositiveInts.builder()
  }
  func toBuilder() -> SettingRealsFromPositiveIntsBuilder {
    return SettingRealsFromPositiveInts.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "SettingRealsFromPositiveInts"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return SettingRealsFromPositiveInts.self
  }


  //Meta information declaration end

}

final class SettingRealsFromPositiveIntsBuilder : GeneratedMessageBuilder {
  private var builderResult:SettingRealsFromPositiveInts

  required override init () {
     builderResult = SettingRealsFromPositiveInts()
     super.init()
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> SettingRealsFromPositiveIntsBuilder {
    builderResult = SettingRealsFromPositiveInts()
    return self
  }
  override func clone() -> SettingRealsFromPositiveIntsBuilder {
    return SettingRealsFromPositiveInts.builderWithPrototype(builderResult)
  }
  override func build() -> SettingRealsFromPositiveInts {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> SettingRealsFromPositiveInts {
    var returnMe:SettingRealsFromPositiveInts = builderResult
    return returnMe
  }
  func mergeFrom(other:SettingRealsFromPositiveInts) -> SettingRealsFromPositiveIntsBuilder {
    if (other == SettingRealsFromPositiveInts()) {
     return self
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->SettingRealsFromPositiveIntsBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> SettingRealsFromPositiveIntsBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class SettingRealsFromNegativeInts : GeneratedMessage {
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> SettingRealsFromNegativeInts {
    return SettingRealsFromNegativeInts.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> SettingRealsFromNegativeInts {
    return SettingRealsFromNegativeInts.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> SettingRealsFromNegativeInts {
    return SettingRealsFromNegativeInts.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->SettingRealsFromNegativeInts {
    return SettingRealsFromNegativeInts.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> SettingRealsFromNegativeInts {
    return SettingRealsFromNegativeInts.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> SettingRealsFromNegativeInts {
    return SettingRealsFromNegativeInts.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> SettingRealsFromNegativeIntsBuilder {
    return SettingRealsFromNegativeIntsBuilder()
  }
  class func builderWithPrototype(prototype:SettingRealsFromNegativeInts) -> SettingRealsFromNegativeIntsBuilder {
    return SettingRealsFromNegativeInts.builder().mergeFrom(prototype)
  }
  func builder() -> SettingRealsFromNegativeIntsBuilder {
    return SettingRealsFromNegativeInts.builder()
  }
  func toBuilder() -> SettingRealsFromNegativeIntsBuilder {
    return SettingRealsFromNegativeInts.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "SettingRealsFromNegativeInts"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return SettingRealsFromNegativeInts.self
  }


  //Meta information declaration end

}

final class SettingRealsFromNegativeIntsBuilder : GeneratedMessageBuilder {
  private var builderResult:SettingRealsFromNegativeInts

  required override init () {
     builderResult = SettingRealsFromNegativeInts()
     super.init()
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> SettingRealsFromNegativeIntsBuilder {
    builderResult = SettingRealsFromNegativeInts()
    return self
  }
  override func clone() -> SettingRealsFromNegativeIntsBuilder {
    return SettingRealsFromNegativeInts.builderWithPrototype(builderResult)
  }
  override func build() -> SettingRealsFromNegativeInts {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> SettingRealsFromNegativeInts {
    var returnMe:SettingRealsFromNegativeInts = builderResult
    return returnMe
  }
  func mergeFrom(other:SettingRealsFromNegativeInts) -> SettingRealsFromNegativeIntsBuilder {
    if (other == SettingRealsFromNegativeInts()) {
     return self
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->SettingRealsFromNegativeIntsBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> SettingRealsFromNegativeIntsBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class ComplexOptionType1 : ExtendableMessage {
  private(set) var hasFoo:Bool = false
  private(set) var foo:Int32 = Int32(0)

  private(set) var hasFoo2:Bool = false
  private(set) var foo2:Int32 = Int32(0)

  private(set) var hasFoo3:Bool = false
  private(set) var foo3:Int32 = Int32(0)

  private(set) var foo4:Array<Int32> = Array<Int32>()
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
    if !extensionsAreInitialized() {
     return false
    }
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasFoo {
      output.writeInt32(1, value:foo)
    }
    if hasFoo2 {
      output.writeInt32(2, value:foo2)
    }
    if hasFoo3 {
      output.writeInt32(3, value:foo3)
    }
    if !foo4.isEmpty {
      for value in foo4 {
        output.writeInt32(4, value:value)
      }
    }
    writeExtensionsToCodedOutputStream(output, startInclusive:Int32(100), endExclusive:Int32(536870912))
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasFoo {
      size += WireFormat.computeInt32Size(1, value:foo)
    }
    if hasFoo2 {
      size += WireFormat.computeInt32Size(2, value:foo2)
    }
    if hasFoo3 {
      size += WireFormat.computeInt32Size(3, value:foo3)
    }
    var dataSizeFoo4:Int32 = 0
    for element in foo4 {
        dataSizeFoo4 += WireFormat.computeInt32SizeNoTag(element)
    }
    size += dataSizeFoo4
    size += 1 * Int32(foo4.count)
    size += extensionsSerializedSize()
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> ComplexOptionType1 {
    return ComplexOptionType1.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ComplexOptionType1 {
    return ComplexOptionType1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> ComplexOptionType1 {
    return ComplexOptionType1.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ComplexOptionType1 {
    return ComplexOptionType1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> ComplexOptionType1 {
    return ComplexOptionType1.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ComplexOptionType1 {
    return ComplexOptionType1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> ComplexOptionType1Builder {
    return ComplexOptionType1Builder()
  }
  class func builderWithPrototype(prototype:ComplexOptionType1) -> ComplexOptionType1Builder {
    return ComplexOptionType1.builder().mergeFrom(prototype)
  }
  func builder() -> ComplexOptionType1Builder {
    return ComplexOptionType1.builder()
  }
  func toBuilder() -> ComplexOptionType1Builder {
    return ComplexOptionType1.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if hasFoo {
      output += "\(indent) foo: \(foo) \n"
    }
    if hasFoo2 {
      output += "\(indent) foo2: \(foo2) \n"
    }
    if hasFoo3 {
      output += "\(indent) foo3: \(foo3) \n"
    }
    var foo4ElementIndex:Int = 0
    for element in foo4  {
        output += "\(indent) foo4[\(foo4ElementIndex)]: \(element)\n"
        foo4ElementIndex++
    }
    writeExtensionDescription(&output, startInclusive:Int32(100), endExclusive:Int32(536870912), indent:indent)
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasFoo {
             hashCode = (hashCode &* 31) &+ foo.hashValue
          }
          if hasFoo2 {
             hashCode = (hashCode &* 31) &+ foo2.hashValue
          }
          if hasFoo3 {
             hashCode = (hashCode &* 31) &+ foo3.hashValue
          }
          for element in foo4 {
              hashCode = (hashCode &* 31) &+ element.hashValue
          }
          hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(100), endExclusive:Int32(536870912)))
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "ComplexOptionType1"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return ComplexOptionType1.self
  }


  //Meta information declaration end

}

final class ComplexOptionType1Builder : ExtendableMessageBuilder {
  private var builderResult:ComplexOptionType1

  required override init () {
     builderResult = ComplexOptionType1()
     super.init()
  }
  var hasFoo:Bool {
       get {
            return builderResult.hasFoo
       }
  }
  var foo:Int32 {
       get {
            return builderResult.foo
       }
       set (value) {
           builderResult.hasFoo = true
           builderResult.foo = value
       }
  }
  func clearFoo() -> ComplexOptionType1Builder{
       builderResult.hasFoo = false
       builderResult.foo = Int32(0)
       return self
  }
  var hasFoo2:Bool {
       get {
            return builderResult.hasFoo2
       }
  }
  var foo2:Int32 {
       get {
            return builderResult.foo2
       }
       set (value) {
           builderResult.hasFoo2 = true
           builderResult.foo2 = value
       }
  }
  func clearFoo2() -> ComplexOptionType1Builder{
       builderResult.hasFoo2 = false
       builderResult.foo2 = Int32(0)
       return self
  }
  var hasFoo3:Bool {
       get {
            return builderResult.hasFoo3
       }
  }
  var foo3:Int32 {
       get {
            return builderResult.foo3
       }
       set (value) {
           builderResult.hasFoo3 = true
           builderResult.foo3 = value
       }
  }
  func clearFoo3() -> ComplexOptionType1Builder{
       builderResult.hasFoo3 = false
       builderResult.foo3 = Int32(0)
       return self
  }
  var foo4:Array<Int32> {
       get {
           return builderResult.foo4
       }
       set (array) {
           builderResult.foo4 = array
       }
  }
  func clearFoo4() -> ComplexOptionType1Builder {
     builderResult.foo4.removeAll(keepCapacity: false)
     return self
  }
  override var internalGetResult:ExtendableMessage {
       get {
           return builderResult
       }
  }
  override func clear() -> ComplexOptionType1Builder {
    builderResult = ComplexOptionType1()
    return self
  }
  override func clone() -> ComplexOptionType1Builder {
    return ComplexOptionType1.builderWithPrototype(builderResult)
  }
  override func build() -> ComplexOptionType1 {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> ComplexOptionType1 {
    var returnMe:ComplexOptionType1 = builderResult
    return returnMe
  }
  func mergeFrom(other:ComplexOptionType1) -> ComplexOptionType1Builder {
    if (other == ComplexOptionType1()) {
     return self
    }
    if other.hasFoo {
         foo = other.foo
    }
    if other.hasFoo2 {
         foo2 = other.foo2
    }
    if other.hasFoo3 {
         foo3 = other.foo3
    }
    if !other.foo4.isEmpty {
        builderResult.foo4 += other.foo4
    }
    mergeExtensionFields(other)
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->ComplexOptionType1Builder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ComplexOptionType1Builder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 8 :
        foo = input.readInt32()

      case 16 :
        foo2 = input.readInt32()

      case 24 :
        foo3 = input.readInt32()

      case 32 :
        foo4 += [input.readInt32()]

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class ComplexOptionType2 : ExtendableMessage {


  //Nested type declaration start

    final public class ComplexOptionType4 : GeneratedMessage {
      private(set) var hasWaldo:Bool = false
      private(set) var waldo:Int32 = Int32(0)

      class func complexOpt4() -> ConcreateExtensionField {
           return ComplexOptionType2ComplexOptionType4complexOpt4
      }
      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        if hasWaldo {
          output.writeInt32(1, value:waldo)
        }
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        if hasWaldo {
          size += WireFormat.computeInt32Size(1, value:waldo)
        }
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      class func parseFromData(data:[Byte]) -> ComplexOptionType2.ComplexOptionType4 {
        return ComplexOptionType2.ComplexOptionType4.builder().mergeFromData(data).build()
      }
      class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ComplexOptionType2.ComplexOptionType4 {
        return ComplexOptionType2.ComplexOptionType4.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      class func parseFromInputStream(input:NSInputStream) -> ComplexOptionType2.ComplexOptionType4 {
        return ComplexOptionType2.ComplexOptionType4.builder().mergeFromInputStream(input).build()
      }
      class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ComplexOptionType2.ComplexOptionType4 {
        return ComplexOptionType2.ComplexOptionType4.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      class func parseFromCodedInputStream(input:CodedInputStream) -> ComplexOptionType2.ComplexOptionType4 {
        return ComplexOptionType2.ComplexOptionType4.builder().mergeFromCodedInputStream(input).build()
      }
      class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ComplexOptionType2.ComplexOptionType4 {
        return ComplexOptionType2.ComplexOptionType4.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      class func builder() -> ComplexOptionType2.ComplexOptionType4Builder {
        return ComplexOptionType2.ComplexOptionType4Builder()
      }
      class func builderWithPrototype(prototype:ComplexOptionType2.ComplexOptionType4) -> ComplexOptionType2.ComplexOptionType4Builder {
        return ComplexOptionType2.ComplexOptionType4.builder().mergeFrom(prototype)
      }
      func builder() -> ComplexOptionType2.ComplexOptionType4Builder {
        return ComplexOptionType2.ComplexOptionType4.builder()
      }
      func toBuilder() -> ComplexOptionType2.ComplexOptionType4Builder {
        return ComplexOptionType2.ComplexOptionType4.builderWithPrototype(self)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        if hasWaldo {
          output += "\(indent) waldo: \(waldo) \n"
        }
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              if hasWaldo {
                 hashCode = (hashCode &* 31) &+ waldo.hashValue
              }
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "ComplexOptionType2.ComplexOptionType4"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return ComplexOptionType2.ComplexOptionType4.self
      }


      //Meta information declaration end

    }

    final class ComplexOptionType4Builder : GeneratedMessageBuilder {
      private var builderResult:ComplexOptionType2.ComplexOptionType4

      required override init () {
         builderResult = ComplexOptionType2.ComplexOptionType4()
         super.init()
      }
      var hasWaldo:Bool {
           get {
                return builderResult.hasWaldo
           }
      }
      var waldo:Int32 {
           get {
                return builderResult.waldo
           }
           set (value) {
               builderResult.hasWaldo = true
               builderResult.waldo = value
           }
      }
      func clearWaldo() -> ComplexOptionType2.ComplexOptionType4Builder{
           builderResult.hasWaldo = false
           builderResult.waldo = Int32(0)
           return self
      }
      override var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override func clear() -> ComplexOptionType2.ComplexOptionType4Builder {
        builderResult = ComplexOptionType2.ComplexOptionType4()
        return self
      }
      override func clone() -> ComplexOptionType2.ComplexOptionType4Builder {
        return ComplexOptionType2.ComplexOptionType4.builderWithPrototype(builderResult)
      }
      override func build() -> ComplexOptionType2.ComplexOptionType4 {
           checkInitialized()
           return buildPartial()
      }
      func buildPartial() -> ComplexOptionType2.ComplexOptionType4 {
        var returnMe:ComplexOptionType2.ComplexOptionType4 = builderResult
        return returnMe
      }
      func mergeFrom(other:ComplexOptionType2.ComplexOptionType4) -> ComplexOptionType2.ComplexOptionType4Builder {
        if (other == ComplexOptionType2.ComplexOptionType4()) {
         return self
        }
        if other.hasWaldo {
             waldo = other.waldo
        }
        mergeUnknownFields(other.unknownFields)
        return self
      }
      override func mergeFromCodedInputStream(input:CodedInputStream) ->ComplexOptionType2.ComplexOptionType4Builder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ComplexOptionType2.ComplexOptionType4Builder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          case 8 :
            waldo = input.readInt32()

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end

  private(set) var hasBar:Bool = false
  private(set) var bar:ComplexOptionType1 = ComplexOptionType1()
  private(set) var hasBaz:Bool = false
  private(set) var baz:Int32 = Int32(0)

  private(set) var hasFred:Bool = false
  private(set) var fred:ComplexOptionType2.ComplexOptionType4 = ComplexOptionType2.ComplexOptionType4()
  private(set) var barney:Array<ComplexOptionType2.ComplexOptionType4>  = Array<ComplexOptionType2.ComplexOptionType4>()
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
    if hasBar {
     if !bar.isInitialized() {
       return false
     }
    }
    if !extensionsAreInitialized() {
     return false
    }
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasBar {
      output.writeMessage(1, value:bar)
    }
    if hasBaz {
      output.writeInt32(2, value:baz)
    }
    if hasFred {
      output.writeMessage(3, value:fred)
    }
    for element in barney {
        output.writeMessage(4, value:element)
    }
    writeExtensionsToCodedOutputStream(output, startInclusive:Int32(100), endExclusive:Int32(536870912))
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasBar {
      size += WireFormat.computeMessageSize(1, value:bar)
    }
    if hasBaz {
      size += WireFormat.computeInt32Size(2, value:baz)
    }
    if hasFred {
      size += WireFormat.computeMessageSize(3, value:fred)
    }
    for element in barney {
        size += WireFormat.computeMessageSize(4, value:element)
    }
    size += extensionsSerializedSize()
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> ComplexOptionType2 {
    return ComplexOptionType2.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ComplexOptionType2 {
    return ComplexOptionType2.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> ComplexOptionType2 {
    return ComplexOptionType2.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ComplexOptionType2 {
    return ComplexOptionType2.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> ComplexOptionType2 {
    return ComplexOptionType2.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ComplexOptionType2 {
    return ComplexOptionType2.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> ComplexOptionType2Builder {
    return ComplexOptionType2Builder()
  }
  class func builderWithPrototype(prototype:ComplexOptionType2) -> ComplexOptionType2Builder {
    return ComplexOptionType2.builder().mergeFrom(prototype)
  }
  func builder() -> ComplexOptionType2Builder {
    return ComplexOptionType2.builder()
  }
  func toBuilder() -> ComplexOptionType2Builder {
    return ComplexOptionType2.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if hasBar {
      output += "\(indent) bar {\n"
      bar.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    if hasBaz {
      output += "\(indent) baz: \(baz) \n"
    }
    if hasFred {
      output += "\(indent) fred {\n"
      fred.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    var barneyElementIndex:Int = 0
    for element in barney {
        output += "\(indent) barney[\(barneyElementIndex)] {\n"
        element.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent)}\n"
        barneyElementIndex++
    }
    writeExtensionDescription(&output, startInclusive:Int32(100), endExclusive:Int32(536870912), indent:indent)
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasBar {
            hashCode = (hashCode &* 31) &+ bar.hashValue
          }
          if hasBaz {
             hashCode = (hashCode &* 31) &+ baz.hashValue
          }
          if hasFred {
            hashCode = (hashCode &* 31) &+ fred.hashValue
          }
          for element in barney {
              hashCode = (hashCode &* 31) &+ element.hashValue
          }
          hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(100), endExclusive:Int32(536870912)))
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "ComplexOptionType2"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return ComplexOptionType2.self
  }


  //Meta information declaration end

}

final class ComplexOptionType2Builder : ExtendableMessageBuilder {
  private var builderResult:ComplexOptionType2

  required override init () {
     builderResult = ComplexOptionType2()
     super.init()
  }
  var hasBar:Bool {
       get {
           return builderResult.hasBar
       }
  }
  var bar:ComplexOptionType1 {
       get {
           return builderResult.bar
       }
       set (value) {
           builderResult.hasBar = true
           builderResult.bar = value
       }
  }
  func setBarBuilder(builderForValue:ComplexOptionType1Builder) -> ComplexOptionType2Builder {
    bar = builderForValue.build()
    return self
  }
  func mergeBar(value:ComplexOptionType1) -> ComplexOptionType2Builder {
    if (builderResult.hasBar && builderResult.bar != ComplexOptionType1()) {
      builderResult.bar = ComplexOptionType1.builderWithPrototype(builderResult.bar).mergeFrom(value).buildPartial()
    } else {
      builderResult.bar = value
    }
    builderResult.hasBar = true
    return self
  }
  func clearBar() -> ComplexOptionType2Builder {
    builderResult.hasBar = false
    builderResult.bar = ComplexOptionType1()
    return self
  }
  var hasBaz:Bool {
       get {
            return builderResult.hasBaz
       }
  }
  var baz:Int32 {
       get {
            return builderResult.baz
       }
       set (value) {
           builderResult.hasBaz = true
           builderResult.baz = value
       }
  }
  func clearBaz() -> ComplexOptionType2Builder{
       builderResult.hasBaz = false
       builderResult.baz = Int32(0)
       return self
  }
  var hasFred:Bool {
       get {
           return builderResult.hasFred
       }
  }
  var fred:ComplexOptionType2.ComplexOptionType4 {
       get {
           return builderResult.fred
       }
       set (value) {
           builderResult.hasFred = true
           builderResult.fred = value
       }
  }
  func setFredBuilder(builderForValue:ComplexOptionType2.ComplexOptionType4Builder) -> ComplexOptionType2Builder {
    fred = builderForValue.build()
    return self
  }
  func mergeFred(value:ComplexOptionType2.ComplexOptionType4) -> ComplexOptionType2Builder {
    if (builderResult.hasFred && builderResult.fred != ComplexOptionType2.ComplexOptionType4()) {
      builderResult.fred = ComplexOptionType2.ComplexOptionType4.builderWithPrototype(builderResult.fred).mergeFrom(value).buildPartial()
    } else {
      builderResult.fred = value
    }
    builderResult.hasFred = true
    return self
  }
  func clearFred() -> ComplexOptionType2Builder {
    builderResult.hasFred = false
    builderResult.fred = ComplexOptionType2.ComplexOptionType4()
    return self
  }
  var barney:Array<ComplexOptionType2.ComplexOptionType4> {
       get {
           return builderResult.barney
       }
       set (value) {
           builderResult.barney = value
       }
  }
  func clearBarney() -> ComplexOptionType2Builder {
    builderResult.barney.removeAll(keepCapacity: false)
    return self
  }
  override var internalGetResult:ExtendableMessage {
       get {
           return builderResult
       }
  }
  override func clear() -> ComplexOptionType2Builder {
    builderResult = ComplexOptionType2()
    return self
  }
  override func clone() -> ComplexOptionType2Builder {
    return ComplexOptionType2.builderWithPrototype(builderResult)
  }
  override func build() -> ComplexOptionType2 {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> ComplexOptionType2 {
    var returnMe:ComplexOptionType2 = builderResult
    return returnMe
  }
  func mergeFrom(other:ComplexOptionType2) -> ComplexOptionType2Builder {
    if (other == ComplexOptionType2()) {
     return self
    }
    if (other.hasBar) {
        mergeBar(other.bar)
    }
    if other.hasBaz {
         baz = other.baz
    }
    if (other.hasFred) {
        mergeFred(other.fred)
    }
    if !other.barney.isEmpty  {
       builderResult.barney += other.barney
    }
    mergeExtensionFields(other)
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->ComplexOptionType2Builder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ComplexOptionType2Builder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 10 :
        var subBuilder:ComplexOptionType1Builder = ComplexOptionType1.builder()
        if hasBar {
          subBuilder.mergeFrom(bar)
        }
        input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
        bar = subBuilder.buildPartial()

      case 16 :
        baz = input.readInt32()

      case 26 :
        var subBuilder:ComplexOptionType2.ComplexOptionType4Builder = ComplexOptionType2.ComplexOptionType4.builder()
        if hasFred {
          subBuilder.mergeFrom(fred)
        }
        input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
        fred = subBuilder.buildPartial()

      case 34 :
        var subBuilder = ComplexOptionType2.ComplexOptionType4.builder()
        input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
        barney += [subBuilder.buildPartial()]

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class ComplexOptionType3 : GeneratedMessage {


  //Nested type declaration start

    final public class ComplexOptionType5 : GeneratedMessage {
      private(set) var hasPlugh:Bool = false
      private(set) var plugh:Int32 = Int32(0)

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        if hasPlugh {
          output.writeInt32(3, value:plugh)
        }
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        if hasPlugh {
          size += WireFormat.computeInt32Size(3, value:plugh)
        }
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      class func parseFromData(data:[Byte]) -> ComplexOptionType3.ComplexOptionType5 {
        return ComplexOptionType3.ComplexOptionType5.builder().mergeFromData(data).build()
      }
      class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ComplexOptionType3.ComplexOptionType5 {
        return ComplexOptionType3.ComplexOptionType5.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      class func parseFromInputStream(input:NSInputStream) -> ComplexOptionType3.ComplexOptionType5 {
        return ComplexOptionType3.ComplexOptionType5.builder().mergeFromInputStream(input).build()
      }
      class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ComplexOptionType3.ComplexOptionType5 {
        return ComplexOptionType3.ComplexOptionType5.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      class func parseFromCodedInputStream(input:CodedInputStream) -> ComplexOptionType3.ComplexOptionType5 {
        return ComplexOptionType3.ComplexOptionType5.builder().mergeFromCodedInputStream(input).build()
      }
      class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ComplexOptionType3.ComplexOptionType5 {
        return ComplexOptionType3.ComplexOptionType5.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      class func builder() -> ComplexOptionType3.ComplexOptionType5Builder {
        return ComplexOptionType3.ComplexOptionType5Builder()
      }
      class func builderWithPrototype(prototype:ComplexOptionType3.ComplexOptionType5) -> ComplexOptionType3.ComplexOptionType5Builder {
        return ComplexOptionType3.ComplexOptionType5.builder().mergeFrom(prototype)
      }
      func builder() -> ComplexOptionType3.ComplexOptionType5Builder {
        return ComplexOptionType3.ComplexOptionType5.builder()
      }
      func toBuilder() -> ComplexOptionType3.ComplexOptionType5Builder {
        return ComplexOptionType3.ComplexOptionType5.builderWithPrototype(self)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        if hasPlugh {
          output += "\(indent) plugh: \(plugh) \n"
        }
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              if hasPlugh {
                 hashCode = (hashCode &* 31) &+ plugh.hashValue
              }
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "ComplexOptionType3.ComplexOptionType5"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return ComplexOptionType3.ComplexOptionType5.self
      }


      //Meta information declaration end

    }

    final class ComplexOptionType5Builder : GeneratedMessageBuilder {
      private var builderResult:ComplexOptionType3.ComplexOptionType5

      required override init () {
         builderResult = ComplexOptionType3.ComplexOptionType5()
         super.init()
      }
      var hasPlugh:Bool {
           get {
                return builderResult.hasPlugh
           }
      }
      var plugh:Int32 {
           get {
                return builderResult.plugh
           }
           set (value) {
               builderResult.hasPlugh = true
               builderResult.plugh = value
           }
      }
      func clearPlugh() -> ComplexOptionType3.ComplexOptionType5Builder{
           builderResult.hasPlugh = false
           builderResult.plugh = Int32(0)
           return self
      }
      override var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override func clear() -> ComplexOptionType3.ComplexOptionType5Builder {
        builderResult = ComplexOptionType3.ComplexOptionType5()
        return self
      }
      override func clone() -> ComplexOptionType3.ComplexOptionType5Builder {
        return ComplexOptionType3.ComplexOptionType5.builderWithPrototype(builderResult)
      }
      override func build() -> ComplexOptionType3.ComplexOptionType5 {
           checkInitialized()
           return buildPartial()
      }
      func buildPartial() -> ComplexOptionType3.ComplexOptionType5 {
        var returnMe:ComplexOptionType3.ComplexOptionType5 = builderResult
        return returnMe
      }
      func mergeFrom(other:ComplexOptionType3.ComplexOptionType5) -> ComplexOptionType3.ComplexOptionType5Builder {
        if (other == ComplexOptionType3.ComplexOptionType5()) {
         return self
        }
        if other.hasPlugh {
             plugh = other.plugh
        }
        mergeUnknownFields(other.unknownFields)
        return self
      }
      override func mergeFromCodedInputStream(input:CodedInputStream) ->ComplexOptionType3.ComplexOptionType5Builder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ComplexOptionType3.ComplexOptionType5Builder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          case 24 :
            plugh = input.readInt32()

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end

  private(set) var hasQux:Bool = false
  private(set) var qux:Int32 = Int32(0)

  private(set) var hasComplexOptionType5:Bool = false
  private(set) var complexOptionType5:ComplexOptionType3.ComplexOptionType5 = ComplexOptionType3.ComplexOptionType5()
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasQux {
      output.writeInt32(1, value:qux)
    }
    if hasComplexOptionType5 {
      output.writeGroup(2, value:complexOptionType5)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasQux {
      size += WireFormat.computeInt32Size(1, value:qux)
    }
    if hasComplexOptionType5 {
      size += WireFormat.computeGroupSize(2, value:complexOptionType5)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> ComplexOptionType3 {
    return ComplexOptionType3.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ComplexOptionType3 {
    return ComplexOptionType3.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> ComplexOptionType3 {
    return ComplexOptionType3.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ComplexOptionType3 {
    return ComplexOptionType3.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> ComplexOptionType3 {
    return ComplexOptionType3.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ComplexOptionType3 {
    return ComplexOptionType3.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> ComplexOptionType3Builder {
    return ComplexOptionType3Builder()
  }
  class func builderWithPrototype(prototype:ComplexOptionType3) -> ComplexOptionType3Builder {
    return ComplexOptionType3.builder().mergeFrom(prototype)
  }
  func builder() -> ComplexOptionType3Builder {
    return ComplexOptionType3.builder()
  }
  func toBuilder() -> ComplexOptionType3Builder {
    return ComplexOptionType3.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if hasQux {
      output += "\(indent) qux: \(qux) \n"
    }
    if hasComplexOptionType5 {
      output += "\(indent) complexOptionType5 {\n"
      complexOptionType5.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasQux {
             hashCode = (hashCode &* 31) &+ qux.hashValue
          }
          if hasComplexOptionType5 {
            hashCode = (hashCode &* 31) &+ complexOptionType5.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "ComplexOptionType3"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return ComplexOptionType3.self
  }


  //Meta information declaration end

}

final class ComplexOptionType3Builder : GeneratedMessageBuilder {
  private var builderResult:ComplexOptionType3

  required override init () {
     builderResult = ComplexOptionType3()
     super.init()
  }
  var hasQux:Bool {
       get {
            return builderResult.hasQux
       }
  }
  var qux:Int32 {
       get {
            return builderResult.qux
       }
       set (value) {
           builderResult.hasQux = true
           builderResult.qux = value
       }
  }
  func clearQux() -> ComplexOptionType3Builder{
       builderResult.hasQux = false
       builderResult.qux = Int32(0)
       return self
  }
  var hasComplexOptionType5:Bool {
       get {
           return builderResult.hasComplexOptionType5
       }
  }
  var complexOptionType5:ComplexOptionType3.ComplexOptionType5 {
       get {
           return builderResult.complexOptionType5
       }
       set (value) {
           builderResult.hasComplexOptionType5 = true
           builderResult.complexOptionType5 = value
       }
  }
  func setComplexOptionType5Builder(builderForValue:ComplexOptionType3.ComplexOptionType5Builder) -> ComplexOptionType3Builder {
    complexOptionType5 = builderForValue.build()
    return self
  }
  func mergeComplexOptionType5(value:ComplexOptionType3.ComplexOptionType5) -> ComplexOptionType3Builder {
    if (builderResult.hasComplexOptionType5 && builderResult.complexOptionType5 != ComplexOptionType3.ComplexOptionType5()) {
      builderResult.complexOptionType5 = ComplexOptionType3.ComplexOptionType5.builderWithPrototype(builderResult.complexOptionType5).mergeFrom(value).buildPartial()
    } else {
      builderResult.complexOptionType5 = value
    }
    builderResult.hasComplexOptionType5 = true
    return self
  }
  func clearComplexOptionType5() -> ComplexOptionType3Builder {
    builderResult.hasComplexOptionType5 = false
    builderResult.complexOptionType5 = ComplexOptionType3.ComplexOptionType5()
    return self
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> ComplexOptionType3Builder {
    builderResult = ComplexOptionType3()
    return self
  }
  override func clone() -> ComplexOptionType3Builder {
    return ComplexOptionType3.builderWithPrototype(builderResult)
  }
  override func build() -> ComplexOptionType3 {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> ComplexOptionType3 {
    var returnMe:ComplexOptionType3 = builderResult
    return returnMe
  }
  func mergeFrom(other:ComplexOptionType3) -> ComplexOptionType3Builder {
    if (other == ComplexOptionType3()) {
     return self
    }
    if other.hasQux {
         qux = other.qux
    }
    if (other.hasComplexOptionType5) {
        mergeComplexOptionType5(other.complexOptionType5)
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->ComplexOptionType3Builder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ComplexOptionType3Builder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 8 :
        qux = input.readInt32()

      case 19 :
        var subBuilder:ComplexOptionType3.ComplexOptionType5Builder = ComplexOptionType3.ComplexOptionType5.builder()
        if hasComplexOptionType5 {
          subBuilder.mergeFrom(complexOptionType5)
        }
        input.readGroup(2, builder:subBuilder, extensionRegistry:extensionRegistry)
        complexOptionType5 = subBuilder.buildPartial()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class ComplexOpt6 : GeneratedMessage {
  private(set) var hasXyzzy:Bool = false
  private(set) var xyzzy:Int32 = Int32(0)

  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasXyzzy {
      output.writeInt32(7593951, value:xyzzy)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasXyzzy {
      size += WireFormat.computeInt32Size(7593951, value:xyzzy)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> ComplexOpt6 {
    return ComplexOpt6.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ComplexOpt6 {
    return ComplexOpt6.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> ComplexOpt6 {
    return ComplexOpt6.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ComplexOpt6 {
    return ComplexOpt6.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> ComplexOpt6 {
    return ComplexOpt6.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ComplexOpt6 {
    return ComplexOpt6.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> ComplexOpt6Builder {
    return ComplexOpt6Builder()
  }
  class func builderWithPrototype(prototype:ComplexOpt6) -> ComplexOpt6Builder {
    return ComplexOpt6.builder().mergeFrom(prototype)
  }
  func builder() -> ComplexOpt6Builder {
    return ComplexOpt6.builder()
  }
  func toBuilder() -> ComplexOpt6Builder {
    return ComplexOpt6.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if hasXyzzy {
      output += "\(indent) xyzzy: \(xyzzy) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasXyzzy {
             hashCode = (hashCode &* 31) &+ xyzzy.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "ComplexOpt6"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return ComplexOpt6.self
  }


  //Meta information declaration end

}

final class ComplexOpt6Builder : GeneratedMessageBuilder {
  private var builderResult:ComplexOpt6

  required override init () {
     builderResult = ComplexOpt6()
     super.init()
  }
  var hasXyzzy:Bool {
       get {
            return builderResult.hasXyzzy
       }
  }
  var xyzzy:Int32 {
       get {
            return builderResult.xyzzy
       }
       set (value) {
           builderResult.hasXyzzy = true
           builderResult.xyzzy = value
       }
  }
  func clearXyzzy() -> ComplexOpt6Builder{
       builderResult.hasXyzzy = false
       builderResult.xyzzy = Int32(0)
       return self
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> ComplexOpt6Builder {
    builderResult = ComplexOpt6()
    return self
  }
  override func clone() -> ComplexOpt6Builder {
    return ComplexOpt6.builderWithPrototype(builderResult)
  }
  override func build() -> ComplexOpt6 {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> ComplexOpt6 {
    var returnMe:ComplexOpt6 = builderResult
    return returnMe
  }
  func mergeFrom(other:ComplexOpt6) -> ComplexOpt6Builder {
    if (other == ComplexOpt6()) {
     return self
    }
    if other.hasXyzzy {
         xyzzy = other.xyzzy
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->ComplexOpt6Builder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ComplexOpt6Builder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 60751608 :
        xyzzy = input.readInt32()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class VariousComplexOptions : GeneratedMessage {
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> VariousComplexOptions {
    return VariousComplexOptions.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> VariousComplexOptions {
    return VariousComplexOptions.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> VariousComplexOptions {
    return VariousComplexOptions.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->VariousComplexOptions {
    return VariousComplexOptions.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> VariousComplexOptions {
    return VariousComplexOptions.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> VariousComplexOptions {
    return VariousComplexOptions.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> VariousComplexOptionsBuilder {
    return VariousComplexOptionsBuilder()
  }
  class func builderWithPrototype(prototype:VariousComplexOptions) -> VariousComplexOptionsBuilder {
    return VariousComplexOptions.builder().mergeFrom(prototype)
  }
  func builder() -> VariousComplexOptionsBuilder {
    return VariousComplexOptions.builder()
  }
  func toBuilder() -> VariousComplexOptionsBuilder {
    return VariousComplexOptions.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "VariousComplexOptions"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return VariousComplexOptions.self
  }


  //Meta information declaration end

}

final class VariousComplexOptionsBuilder : GeneratedMessageBuilder {
  private var builderResult:VariousComplexOptions

  required override init () {
     builderResult = VariousComplexOptions()
     super.init()
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> VariousComplexOptionsBuilder {
    builderResult = VariousComplexOptions()
    return self
  }
  override func clone() -> VariousComplexOptionsBuilder {
    return VariousComplexOptions.builderWithPrototype(builderResult)
  }
  override func build() -> VariousComplexOptions {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> VariousComplexOptions {
    var returnMe:VariousComplexOptions = builderResult
    return returnMe
  }
  func mergeFrom(other:VariousComplexOptions) -> VariousComplexOptionsBuilder {
    if (other == VariousComplexOptions()) {
     return self
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->VariousComplexOptionsBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> VariousComplexOptionsBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class AggregateMessageSet : ExtendableMessage {
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
    if !extensionsAreInitialized() {
     return false
    }
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    writeExtensionsToCodedOutputStream(output, startInclusive:Int32(4), endExclusive:Int32(2147483647))
    unknownFields.writeAsMessageSetTo(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    size += extensionsSerializedSize()
    size += unknownFields.serializedSizeAsMessageSet()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> AggregateMessageSet {
    return AggregateMessageSet.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> AggregateMessageSet {
    return AggregateMessageSet.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> AggregateMessageSet {
    return AggregateMessageSet.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->AggregateMessageSet {
    return AggregateMessageSet.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> AggregateMessageSet {
    return AggregateMessageSet.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AggregateMessageSet {
    return AggregateMessageSet.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> AggregateMessageSetBuilder {
    return AggregateMessageSetBuilder()
  }
  class func builderWithPrototype(prototype:AggregateMessageSet) -> AggregateMessageSetBuilder {
    return AggregateMessageSet.builder().mergeFrom(prototype)
  }
  func builder() -> AggregateMessageSetBuilder {
    return AggregateMessageSet.builder()
  }
  func toBuilder() -> AggregateMessageSetBuilder {
    return AggregateMessageSet.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    writeExtensionDescription(&output, startInclusive:Int32(4), endExclusive:Int32(2147483647), indent:indent)
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(4), endExclusive:Int32(2147483647)))
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "AggregateMessageSet"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return AggregateMessageSet.self
  }


  //Meta information declaration end

}

final class AggregateMessageSetBuilder : ExtendableMessageBuilder {
  private var builderResult:AggregateMessageSet

  required override init () {
     builderResult = AggregateMessageSet()
     super.init()
  }
  override var internalGetResult:ExtendableMessage {
       get {
           return builderResult
       }
  }
  override func clear() -> AggregateMessageSetBuilder {
    builderResult = AggregateMessageSet()
    return self
  }
  override func clone() -> AggregateMessageSetBuilder {
    return AggregateMessageSet.builderWithPrototype(builderResult)
  }
  override func build() -> AggregateMessageSet {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> AggregateMessageSet {
    var returnMe:AggregateMessageSet = builderResult
    return returnMe
  }
  func mergeFrom(other:AggregateMessageSet) -> AggregateMessageSetBuilder {
    if (other == AggregateMessageSet()) {
     return self
    }
    mergeExtensionFields(other)
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->AggregateMessageSetBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AggregateMessageSetBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class AggregateMessageSetElement : GeneratedMessage {
  private(set) var hasS:Bool = false
  private(set) var s:String = ""

  class func messageSetExtension() -> ConcreateExtensionField {
       return AggregateMessageSetElementmessageSetExtension
  }
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasS {
      output.writeString(1, value:s)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasS {
      size += WireFormat.computeStringSize(1, value:s)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> AggregateMessageSetElement {
    return AggregateMessageSetElement.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> AggregateMessageSetElement {
    return AggregateMessageSetElement.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> AggregateMessageSetElement {
    return AggregateMessageSetElement.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->AggregateMessageSetElement {
    return AggregateMessageSetElement.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> AggregateMessageSetElement {
    return AggregateMessageSetElement.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AggregateMessageSetElement {
    return AggregateMessageSetElement.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> AggregateMessageSetElementBuilder {
    return AggregateMessageSetElementBuilder()
  }
  class func builderWithPrototype(prototype:AggregateMessageSetElement) -> AggregateMessageSetElementBuilder {
    return AggregateMessageSetElement.builder().mergeFrom(prototype)
  }
  func builder() -> AggregateMessageSetElementBuilder {
    return AggregateMessageSetElement.builder()
  }
  func toBuilder() -> AggregateMessageSetElementBuilder {
    return AggregateMessageSetElement.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if hasS {
      output += "\(indent) s: \(s) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasS {
             hashCode = (hashCode &* 31) &+ s.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "AggregateMessageSetElement"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return AggregateMessageSetElement.self
  }


  //Meta information declaration end

}

final class AggregateMessageSetElementBuilder : GeneratedMessageBuilder {
  private var builderResult:AggregateMessageSetElement

  required override init () {
     builderResult = AggregateMessageSetElement()
     super.init()
  }
  var hasS:Bool {
       get {
            return builderResult.hasS
       }
  }
  var s:String {
       get {
            return builderResult.s
       }
       set (value) {
           builderResult.hasS = true
           builderResult.s = value
       }
  }
  func clearS() -> AggregateMessageSetElementBuilder{
       builderResult.hasS = false
       builderResult.s = ""
       return self
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> AggregateMessageSetElementBuilder {
    builderResult = AggregateMessageSetElement()
    return self
  }
  override func clone() -> AggregateMessageSetElementBuilder {
    return AggregateMessageSetElement.builderWithPrototype(builderResult)
  }
  override func build() -> AggregateMessageSetElement {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> AggregateMessageSetElement {
    var returnMe:AggregateMessageSetElement = builderResult
    return returnMe
  }
  func mergeFrom(other:AggregateMessageSetElement) -> AggregateMessageSetElementBuilder {
    if (other == AggregateMessageSetElement()) {
     return self
    }
    if other.hasS {
         s = other.s
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->AggregateMessageSetElementBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AggregateMessageSetElementBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 10 :
        s = input.readString()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class Aggregate : GeneratedMessage {
  private(set) var hasI:Bool = false
  private(set) var i:Int32 = Int32(0)

  private(set) var hasS:Bool = false
  private(set) var s:String = ""

  private(set) var hasSub:Bool = false
  private(set) var sub:Aggregate = Aggregate()
  private(set) var hasFile:Bool = false
  private(set) var file:PBFileOptions = PBFileOptions()
  private(set) var hasMset:Bool = false
  private(set) var mset:AggregateMessageSet = AggregateMessageSet()
  class func nested() -> ConcreateExtensionField {
       return Aggregatenested
  }
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
    if hasSub {
     if !sub.isInitialized() {
       return false
     }
    }
    if hasFile {
     if !file.isInitialized() {
       return false
     }
    }
    if hasMset {
     if !mset.isInitialized() {
       return false
     }
    }
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasI {
      output.writeInt32(1, value:i)
    }
    if hasS {
      output.writeString(2, value:s)
    }
    if hasSub {
      output.writeMessage(3, value:sub)
    }
    if hasFile {
      output.writeMessage(4, value:file)
    }
    if hasMset {
      output.writeMessage(5, value:mset)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasI {
      size += WireFormat.computeInt32Size(1, value:i)
    }
    if hasS {
      size += WireFormat.computeStringSize(2, value:s)
    }
    if hasSub {
      size += WireFormat.computeMessageSize(3, value:sub)
    }
    if hasFile {
      size += WireFormat.computeMessageSize(4, value:file)
    }
    if hasMset {
      size += WireFormat.computeMessageSize(5, value:mset)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> Aggregate {
    return Aggregate.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> Aggregate {
    return Aggregate.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> Aggregate {
    return Aggregate.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Aggregate {
    return Aggregate.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> Aggregate {
    return Aggregate.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Aggregate {
    return Aggregate.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> AggregateBuilder {
    return AggregateBuilder()
  }
  class func builderWithPrototype(prototype:Aggregate) -> AggregateBuilder {
    return Aggregate.builder().mergeFrom(prototype)
  }
  func builder() -> AggregateBuilder {
    return Aggregate.builder()
  }
  func toBuilder() -> AggregateBuilder {
    return Aggregate.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if hasI {
      output += "\(indent) i: \(i) \n"
    }
    if hasS {
      output += "\(indent) s: \(s) \n"
    }
    if hasSub {
      output += "\(indent) sub {\n"
      sub.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    if hasFile {
      output += "\(indent) file {\n"
      file.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    if hasMset {
      output += "\(indent) mset {\n"
      mset.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasI {
             hashCode = (hashCode &* 31) &+ i.hashValue
          }
          if hasS {
             hashCode = (hashCode &* 31) &+ s.hashValue
          }
          if hasSub {
            hashCode = (hashCode &* 31) &+ sub.hashValue
          }
          if hasFile {
            hashCode = (hashCode &* 31) &+ file.hashValue
          }
          if hasMset {
            hashCode = (hashCode &* 31) &+ mset.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "Aggregate"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return Aggregate.self
  }


  //Meta information declaration end

}

final class AggregateBuilder : GeneratedMessageBuilder {
  private var builderResult:Aggregate

  required override init () {
     builderResult = Aggregate()
     super.init()
  }
  var hasI:Bool {
       get {
            return builderResult.hasI
       }
  }
  var i:Int32 {
       get {
            return builderResult.i
       }
       set (value) {
           builderResult.hasI = true
           builderResult.i = value
       }
  }
  func clearI() -> AggregateBuilder{
       builderResult.hasI = false
       builderResult.i = Int32(0)
       return self
  }
  var hasS:Bool {
       get {
            return builderResult.hasS
       }
  }
  var s:String {
       get {
            return builderResult.s
       }
       set (value) {
           builderResult.hasS = true
           builderResult.s = value
       }
  }
  func clearS() -> AggregateBuilder{
       builderResult.hasS = false
       builderResult.s = ""
       return self
  }
  var hasSub:Bool {
       get {
           return builderResult.hasSub
       }
  }
  var sub:Aggregate {
       get {
           return builderResult.sub
       }
       set (value) {
           builderResult.hasSub = true
           builderResult.sub = value
       }
  }
  func setSubBuilder(builderForValue:AggregateBuilder) -> AggregateBuilder {
    sub = builderForValue.build()
    return self
  }
  func mergeSub(value:Aggregate) -> AggregateBuilder {
    if (builderResult.hasSub && builderResult.sub != Aggregate()) {
      builderResult.sub = Aggregate.builderWithPrototype(builderResult.sub).mergeFrom(value).buildPartial()
    } else {
      builderResult.sub = value
    }
    builderResult.hasSub = true
    return self
  }
  func clearSub() -> AggregateBuilder {
    builderResult.hasSub = false
    builderResult.sub = Aggregate()
    return self
  }
  var hasFile:Bool {
       get {
           return builderResult.hasFile
       }
  }
  var file:PBFileOptions {
       get {
           return builderResult.file
       }
       set (value) {
           builderResult.hasFile = true
           builderResult.file = value
       }
  }
  func setFileBuilder(builderForValue:PBFileOptionsBuilder) -> AggregateBuilder {
    file = builderForValue.build()
    return self
  }
  func mergeFile(value:PBFileOptions) -> AggregateBuilder {
    if (builderResult.hasFile && builderResult.file != PBFileOptions()) {
      builderResult.file = PBFileOptions.builderWithPrototype(builderResult.file).mergeFrom(value).buildPartial()
    } else {
      builderResult.file = value
    }
    builderResult.hasFile = true
    return self
  }
  func clearFile() -> AggregateBuilder {
    builderResult.hasFile = false
    builderResult.file = PBFileOptions()
    return self
  }
  var hasMset:Bool {
       get {
           return builderResult.hasMset
       }
  }
  var mset:AggregateMessageSet {
       get {
           return builderResult.mset
       }
       set (value) {
           builderResult.hasMset = true
           builderResult.mset = value
       }
  }
  func setMsetBuilder(builderForValue:AggregateMessageSetBuilder) -> AggregateBuilder {
    mset = builderForValue.build()
    return self
  }
  func mergeMset(value:AggregateMessageSet) -> AggregateBuilder {
    if (builderResult.hasMset && builderResult.mset != AggregateMessageSet()) {
      builderResult.mset = AggregateMessageSet.builderWithPrototype(builderResult.mset).mergeFrom(value).buildPartial()
    } else {
      builderResult.mset = value
    }
    builderResult.hasMset = true
    return self
  }
  func clearMset() -> AggregateBuilder {
    builderResult.hasMset = false
    builderResult.mset = AggregateMessageSet()
    return self
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> AggregateBuilder {
    builderResult = Aggregate()
    return self
  }
  override func clone() -> AggregateBuilder {
    return Aggregate.builderWithPrototype(builderResult)
  }
  override func build() -> Aggregate {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> Aggregate {
    var returnMe:Aggregate = builderResult
    return returnMe
  }
  func mergeFrom(other:Aggregate) -> AggregateBuilder {
    if (other == Aggregate()) {
     return self
    }
    if other.hasI {
         i = other.i
    }
    if other.hasS {
         s = other.s
    }
    if (other.hasSub) {
        mergeSub(other.sub)
    }
    if (other.hasFile) {
        mergeFile(other.file)
    }
    if (other.hasMset) {
        mergeMset(other.mset)
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->AggregateBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AggregateBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 8 :
        i = input.readInt32()

      case 18 :
        s = input.readString()

      case 26 :
        var subBuilder:AggregateBuilder = Aggregate.builder()
        if hasSub {
          subBuilder.mergeFrom(sub)
        }
        input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
        sub = subBuilder.buildPartial()

      case 34 :
        var subBuilder:PBFileOptionsBuilder = PBFileOptions.builder()
        if hasFile {
          subBuilder.mergeFrom(file)
        }
        input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
        file = subBuilder.buildPartial()

      case 42 :
        var subBuilder:AggregateMessageSetBuilder = AggregateMessageSet.builder()
        if hasMset {
          subBuilder.mergeFrom(mset)
        }
        input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
        mset = subBuilder.buildPartial()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class AggregateMessage : GeneratedMessage {
  private(set) var hasFieldname:Bool = false
  private(set) var fieldname:Int32 = Int32(0)

  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasFieldname {
      output.writeInt32(1, value:fieldname)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasFieldname {
      size += WireFormat.computeInt32Size(1, value:fieldname)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> AggregateMessage {
    return AggregateMessage.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> AggregateMessage {
    return AggregateMessage.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> AggregateMessage {
    return AggregateMessage.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->AggregateMessage {
    return AggregateMessage.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> AggregateMessage {
    return AggregateMessage.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AggregateMessage {
    return AggregateMessage.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> AggregateMessageBuilder {
    return AggregateMessageBuilder()
  }
  class func builderWithPrototype(prototype:AggregateMessage) -> AggregateMessageBuilder {
    return AggregateMessage.builder().mergeFrom(prototype)
  }
  func builder() -> AggregateMessageBuilder {
    return AggregateMessage.builder()
  }
  func toBuilder() -> AggregateMessageBuilder {
    return AggregateMessage.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    if hasFieldname {
      output += "\(indent) fieldname: \(fieldname) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasFieldname {
             hashCode = (hashCode &* 31) &+ fieldname.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "AggregateMessage"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return AggregateMessage.self
  }


  //Meta information declaration end

}

final class AggregateMessageBuilder : GeneratedMessageBuilder {
  private var builderResult:AggregateMessage

  required override init () {
     builderResult = AggregateMessage()
     super.init()
  }
  var hasFieldname:Bool {
       get {
            return builderResult.hasFieldname
       }
  }
  var fieldname:Int32 {
       get {
            return builderResult.fieldname
       }
       set (value) {
           builderResult.hasFieldname = true
           builderResult.fieldname = value
       }
  }
  func clearFieldname() -> AggregateMessageBuilder{
       builderResult.hasFieldname = false
       builderResult.fieldname = Int32(0)
       return self
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> AggregateMessageBuilder {
    builderResult = AggregateMessage()
    return self
  }
  override func clone() -> AggregateMessageBuilder {
    return AggregateMessage.builderWithPrototype(builderResult)
  }
  override func build() -> AggregateMessage {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> AggregateMessage {
    var returnMe:AggregateMessage = builderResult
    return returnMe
  }
  func mergeFrom(other:AggregateMessage) -> AggregateMessageBuilder {
    if (other == AggregateMessage()) {
     return self
    }
    if other.hasFieldname {
         fieldname = other.fieldname
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->AggregateMessageBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> AggregateMessageBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 8 :
        fieldname = input.readInt32()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final public class NestedOptionType : GeneratedMessage {


  //Nested type declaration start

    final public class NestedMessage : GeneratedMessage {
      private(set) var hasNestedField:Bool = false
      private(set) var nestedField:Int32 = Int32(0)

      required public init() {
           super.init()
      }
      override public func isInitialized() -> Bool {
       return true
      }
      override public func writeToCodedOutputStream(output:CodedOutputStream) {
        if hasNestedField {
          output.writeInt32(1, value:nestedField)
        }
        unknownFields.writeToCodedOutputStream(output)
      }
      override public func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        if hasNestedField {
          size += WireFormat.computeInt32Size(1, value:nestedField)
        }
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      class func parseFromData(data:[Byte]) -> NestedOptionType.NestedMessage {
        return NestedOptionType.NestedMessage.builder().mergeFromData(data).build()
      }
      class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> NestedOptionType.NestedMessage {
        return NestedOptionType.NestedMessage.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      class func parseFromInputStream(input:NSInputStream) -> NestedOptionType.NestedMessage {
        return NestedOptionType.NestedMessage.builder().mergeFromInputStream(input).build()
      }
      class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->NestedOptionType.NestedMessage {
        return NestedOptionType.NestedMessage.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      class func parseFromCodedInputStream(input:CodedInputStream) -> NestedOptionType.NestedMessage {
        return NestedOptionType.NestedMessage.builder().mergeFromCodedInputStream(input).build()
      }
      class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> NestedOptionType.NestedMessage {
        return NestedOptionType.NestedMessage.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      class func builder() -> NestedOptionType.NestedMessageBuilder {
        return NestedOptionType.NestedMessageBuilder()
      }
      class func builderWithPrototype(prototype:NestedOptionType.NestedMessage) -> NestedOptionType.NestedMessageBuilder {
        return NestedOptionType.NestedMessage.builder().mergeFrom(prototype)
      }
      func builder() -> NestedOptionType.NestedMessageBuilder {
        return NestedOptionType.NestedMessage.builder()
      }
      func toBuilder() -> NestedOptionType.NestedMessageBuilder {
        return NestedOptionType.NestedMessage.builderWithPrototype(self)
      }
      override public func writeDescriptionTo(inout output:String, indent:String) {
        if hasNestedField {
          output += "\(indent) nestedField: \(nestedField) \n"
        }
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override public var hashValue:Int {
          get {
              var hashCode:Int = 7
              if hasNestedField {
                 hashCode = (hashCode &* 31) &+ nestedField.hashValue
              }
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override public class func className() -> String {
          return "NestedOptionType.NestedMessage"
      }
      override public func classMetaType() -> GeneratedMessage.Type {
          return NestedOptionType.NestedMessage.self
      }


      //Meta information declaration end

    }

    final class NestedMessageBuilder : GeneratedMessageBuilder {
      private var builderResult:NestedOptionType.NestedMessage

      required override init () {
         builderResult = NestedOptionType.NestedMessage()
         super.init()
      }
      var hasNestedField:Bool {
           get {
                return builderResult.hasNestedField
           }
      }
      var nestedField:Int32 {
           get {
                return builderResult.nestedField
           }
           set (value) {
               builderResult.hasNestedField = true
               builderResult.nestedField = value
           }
      }
      func clearNestedField() -> NestedOptionType.NestedMessageBuilder{
           builderResult.hasNestedField = false
           builderResult.nestedField = Int32(0)
           return self
      }
      override var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override func clear() -> NestedOptionType.NestedMessageBuilder {
        builderResult = NestedOptionType.NestedMessage()
        return self
      }
      override func clone() -> NestedOptionType.NestedMessageBuilder {
        return NestedOptionType.NestedMessage.builderWithPrototype(builderResult)
      }
      override func build() -> NestedOptionType.NestedMessage {
           checkInitialized()
           return buildPartial()
      }
      func buildPartial() -> NestedOptionType.NestedMessage {
        var returnMe:NestedOptionType.NestedMessage = builderResult
        return returnMe
      }
      func mergeFrom(other:NestedOptionType.NestedMessage) -> NestedOptionType.NestedMessageBuilder {
        if (other == NestedOptionType.NestedMessage()) {
         return self
        }
        if other.hasNestedField {
             nestedField = other.nestedField
        }
        mergeUnknownFields(other.unknownFields)
        return self
      }
      override func mergeFromCodedInputStream(input:CodedInputStream) ->NestedOptionType.NestedMessageBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> NestedOptionType.NestedMessageBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          case 8 :
            nestedField = input.readInt32()

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end



    //Enum type declaration start 

    enum NestedEnum:Int32 {
      case NestedEnumValue = 1

      static func IsValidValue(value:NestedEnum) ->Bool {
        switch value {
          case .NestedEnumValue:
            return true;
          default:
            return false;
        }
      }
    }



    //Enum type declaration end 

  class func nestedExtension() -> ConcreateExtensionField {
       return NestedOptionTypenestedExtension
  }
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) {
    unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> NestedOptionType {
    return NestedOptionType.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> NestedOptionType {
    return NestedOptionType.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> NestedOptionType {
    return NestedOptionType.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->NestedOptionType {
    return NestedOptionType.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> NestedOptionType {
    return NestedOptionType.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> NestedOptionType {
    return NestedOptionType.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> NestedOptionTypeBuilder {
    return NestedOptionTypeBuilder()
  }
  class func builderWithPrototype(prototype:NestedOptionType) -> NestedOptionTypeBuilder {
    return NestedOptionType.builder().mergeFrom(prototype)
  }
  func builder() -> NestedOptionTypeBuilder {
    return NestedOptionType.builder()
  }
  func toBuilder() -> NestedOptionTypeBuilder {
    return NestedOptionType.builderWithPrototype(self)
  }
  override public func writeDescriptionTo(inout output:String, indent:String) {
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "NestedOptionType"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return NestedOptionType.self
  }


  //Meta information declaration end

}

final class NestedOptionTypeBuilder : GeneratedMessageBuilder {
  private var builderResult:NestedOptionType

  required override init () {
     builderResult = NestedOptionType()
     super.init()
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> NestedOptionTypeBuilder {
    builderResult = NestedOptionType()
    return self
  }
  override func clone() -> NestedOptionTypeBuilder {
    return NestedOptionType.builderWithPrototype(builderResult)
  }
  override func build() -> NestedOptionType {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> NestedOptionType {
    var returnMe:NestedOptionType = builderResult
    return returnMe
  }
  func mergeFrom(other:NestedOptionType) -> NestedOptionTypeBuilder {
    if (other == NestedOptionType()) {
     return self
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->NestedOptionTypeBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> NestedOptionTypeBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

//Class extensions: NSData


extension TestMessageWithCustomOptions {
    class func parseFromNSData(data:NSData) -> TestMessageWithCustomOptions {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return TestMessageWithCustomOptions.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> TestMessageWithCustomOptions {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return TestMessageWithCustomOptions.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension CustomOptionFooRequest {
    class func parseFromNSData(data:NSData) -> CustomOptionFooRequest {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return CustomOptionFooRequest.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> CustomOptionFooRequest {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return CustomOptionFooRequest.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension CustomOptionFooResponse {
    class func parseFromNSData(data:NSData) -> CustomOptionFooResponse {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return CustomOptionFooResponse.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> CustomOptionFooResponse {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return CustomOptionFooResponse.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension CustomOptionFooClientMessage {
    class func parseFromNSData(data:NSData) -> CustomOptionFooClientMessage {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return CustomOptionFooClientMessage.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> CustomOptionFooClientMessage {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return CustomOptionFooClientMessage.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension CustomOptionFooServerMessage {
    class func parseFromNSData(data:NSData) -> CustomOptionFooServerMessage {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return CustomOptionFooServerMessage.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> CustomOptionFooServerMessage {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return CustomOptionFooServerMessage.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension DummyMessageContainingEnum {
    class func parseFromNSData(data:NSData) -> DummyMessageContainingEnum {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return DummyMessageContainingEnum.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> DummyMessageContainingEnum {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return DummyMessageContainingEnum.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension DummyMessageInvalidAsOptionType {
    class func parseFromNSData(data:NSData) -> DummyMessageInvalidAsOptionType {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return DummyMessageInvalidAsOptionType.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> DummyMessageInvalidAsOptionType {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return DummyMessageInvalidAsOptionType.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension CustomOptionMinIntegerValues {
    class func parseFromNSData(data:NSData) -> CustomOptionMinIntegerValues {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return CustomOptionMinIntegerValues.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> CustomOptionMinIntegerValues {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return CustomOptionMinIntegerValues.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension CustomOptionMaxIntegerValues {
    class func parseFromNSData(data:NSData) -> CustomOptionMaxIntegerValues {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return CustomOptionMaxIntegerValues.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> CustomOptionMaxIntegerValues {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return CustomOptionMaxIntegerValues.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension CustomOptionOtherValues {
    class func parseFromNSData(data:NSData) -> CustomOptionOtherValues {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return CustomOptionOtherValues.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> CustomOptionOtherValues {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return CustomOptionOtherValues.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension SettingRealsFromPositiveInts {
    class func parseFromNSData(data:NSData) -> SettingRealsFromPositiveInts {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return SettingRealsFromPositiveInts.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> SettingRealsFromPositiveInts {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return SettingRealsFromPositiveInts.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension SettingRealsFromNegativeInts {
    class func parseFromNSData(data:NSData) -> SettingRealsFromNegativeInts {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return SettingRealsFromNegativeInts.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> SettingRealsFromNegativeInts {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return SettingRealsFromNegativeInts.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension ComplexOptionType1 {
    class func parseFromNSData(data:NSData) -> ComplexOptionType1 {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ComplexOptionType1.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ComplexOptionType1 {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ComplexOptionType1.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension ComplexOptionType2.ComplexOptionType4 {
    class func parseFromNSData(data:NSData) -> ComplexOptionType2.ComplexOptionType4 {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ComplexOptionType2.ComplexOptionType4.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ComplexOptionType2.ComplexOptionType4 {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ComplexOptionType2.ComplexOptionType4.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension ComplexOptionType2 {
    class func parseFromNSData(data:NSData) -> ComplexOptionType2 {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ComplexOptionType2.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ComplexOptionType2 {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ComplexOptionType2.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension ComplexOptionType3.ComplexOptionType5 {
    class func parseFromNSData(data:NSData) -> ComplexOptionType3.ComplexOptionType5 {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ComplexOptionType3.ComplexOptionType5.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ComplexOptionType3.ComplexOptionType5 {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ComplexOptionType3.ComplexOptionType5.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension ComplexOptionType3 {
    class func parseFromNSData(data:NSData) -> ComplexOptionType3 {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ComplexOptionType3.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ComplexOptionType3 {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ComplexOptionType3.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension ComplexOpt6 {
    class func parseFromNSData(data:NSData) -> ComplexOpt6 {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ComplexOpt6.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ComplexOpt6 {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ComplexOpt6.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension VariousComplexOptions {
    class func parseFromNSData(data:NSData) -> VariousComplexOptions {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return VariousComplexOptions.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> VariousComplexOptions {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return VariousComplexOptions.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension AggregateMessageSet {
    class func parseFromNSData(data:NSData) -> AggregateMessageSet {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return AggregateMessageSet.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> AggregateMessageSet {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return AggregateMessageSet.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension AggregateMessageSetElement {
    class func parseFromNSData(data:NSData) -> AggregateMessageSetElement {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return AggregateMessageSetElement.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> AggregateMessageSetElement {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return AggregateMessageSetElement.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension Aggregate {
    class func parseFromNSData(data:NSData) -> Aggregate {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return Aggregate.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> Aggregate {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return Aggregate.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension AggregateMessage {
    class func parseFromNSData(data:NSData) -> AggregateMessage {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return AggregateMessage.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> AggregateMessage {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return AggregateMessage.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension NestedOptionType.NestedMessage {
    class func parseFromNSData(data:NSData) -> NestedOptionType.NestedMessage {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return NestedOptionType.NestedMessage.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> NestedOptionType.NestedMessage {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return NestedOptionType.NestedMessage.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension NestedOptionType {
    class func parseFromNSData(data:NSData) -> NestedOptionType {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return NestedOptionType.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> NestedOptionType {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return NestedOptionType.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}

// @@protoc_insertion_point(global_scope)
