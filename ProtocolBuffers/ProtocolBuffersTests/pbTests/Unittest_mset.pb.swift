// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
import ProtocolBuffers

internal var TestMessageSetExtension1messageSetExtension:ConcreateExtensionField {
   get {
       return UnittestMsetRoot.sharedInstance.TestMessageSetExtension1messageSetExtensionStatic
   }
}
internal var TestMessageSetExtension2messageSetExtension:ConcreateExtensionField {
   get {
       return UnittestMsetRoot.sharedInstance.TestMessageSetExtension2messageSetExtensionStatic
   }
}
internal struct UnittestMsetRoot {
  internal static var sharedInstance : UnittestMsetRoot {
   struct Static {
       static let instance : UnittestMsetRoot = UnittestMsetRoot()
   }
   return Static.instance
  }
  var TestMessageSetExtension1messageSetExtensionStatic:ConcreateExtensionField
  var TestMessageSetExtension2messageSetExtensionStatic:ConcreateExtensionField
  var extensionRegistry:ExtensionRegistry

  init() {
    TestMessageSetExtension1messageSetExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:TestMessageSet.self, fieldNumber: 1545008, defaultValue:TestMessageSetExtension1(), messageOrGroupClass:TestMessageSetExtension1.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:true)
    TestMessageSetExtension2messageSetExtensionStatic = ConcreateExtensionField(type:ExtensionType.ExtensionTypeMessage, extendedClass:TestMessageSet.self, fieldNumber: 1547769, defaultValue:TestMessageSetExtension2(), messageOrGroupClass:TestMessageSetExtension2.self, isRepeated:false, isPacked:false, isMessageSetWireFormat:true)
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(extensionRegistry)
  }
  internal func registerAllExtensions(registry:ExtensionRegistry) {
    registry.addExtension(TestMessageSetExtension1messageSetExtensionStatic)
    registry.addExtension(TestMessageSetExtension2messageSetExtensionStatic)
  }
}

internal func == (lhs: TestMessageSet, rhs: TestMessageSet) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && lhs.isEqualExtensionsInOther(rhs, startInclusive:Int32(4), endExclusive:Int32(2147483647))
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: TestMessageSetContainer, rhs: TestMessageSetContainer) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasMessageSet == rhs.hasMessageSet) && (!lhs.hasMessageSet || lhs.messageSet == rhs.messageSet)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: TestMessageSetExtension1, rhs: TestMessageSetExtension1) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasI == rhs.hasI) && (!lhs.hasI || lhs.i == rhs.i)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: TestMessageSetExtension2, rhs: TestMessageSetExtension2) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasStr == rhs.hasStr) && (!lhs.hasStr || lhs.str == rhs.str)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: RawMessageSet.Item, rhs: RawMessageSet.Item) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasTypeId == rhs.hasTypeId) && (!lhs.hasTypeId || lhs.typeId == rhs.typeId)
  fieldCheck = fieldCheck && (lhs.hasMessage == rhs.hasMessage) && (!lhs.hasMessage || lhs.message == rhs.message)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: RawMessageSet, rhs: RawMessageSet) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.item == rhs.item)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

final internal class TestMessageSet : ExtendableMessage {
  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !extensionsAreInitialized() {
     return false
    }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) {
    writeExtensionsToCodedOutputStream(output, startInclusive:Int32(4), endExclusive:Int32(2147483647))
    unknownFields.writeAsMessageSetTo(output)
  }
  override internal func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    size += extensionsSerializedSize()
    size += unknownFields.serializedSizeAsMessageSet()
    memoizedSerializedSize = size
    return size
  }
  internal class func parseFromData(data:[Byte]) -> TestMessageSet {
    return TestMessageSet.builder().mergeFromData(data).build()
  }
  internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestMessageSet {
    return TestMessageSet.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) -> TestMessageSet {
    return TestMessageSet.builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestMessageSet {
    return TestMessageSet.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) -> TestMessageSet {
    return TestMessageSet.builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestMessageSet {
    return TestMessageSet.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func builder() -> TestMessageSetBuilder {
    return TestMessageSet.classBuilder() as TestMessageSetBuilder
  }
  internal func builder() -> TestMessageSetBuilder {
    return classBuilder() as TestMessageSetBuilder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return TestMessageSetBuilder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return TestMessageSet.builder()
  }
  internal func toBuilder() -> TestMessageSetBuilder {
    return TestMessageSet.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:TestMessageSet) -> TestMessageSetBuilder {
    return TestMessageSet.builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) {
    writeExtensionDescription(&output, startInclusive:Int32(4), endExclusive:Int32(2147483647), indent:indent)
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          hashCode = (hashCode &* 31) &+ Int(hashExtensionsFrom(Int32(4), endExclusive:Int32(2147483647)))
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "TestMessageSet"
  }
  override internal func className() -> String {
      return "TestMessageSet"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return TestMessageSet.self
  }


  //Meta information declaration end

}

final internal class TestMessageSetBuilder : ExtendableMessageBuilder {
  private var builderResult:TestMessageSet

  required override internal init () {
     builderResult = TestMessageSet()
     super.init()
  }
  override internal var internalGetResult:ExtendableMessage {
       get {
           return builderResult
       }
  }
  internal override func clear() -> TestMessageSetBuilder {
    builderResult = TestMessageSet()
    return self
  }
  internal override func clone() -> TestMessageSetBuilder {
    return TestMessageSet.builderWithPrototype(builderResult)
  }
  internal override func build() -> TestMessageSet {
       checkInitialized()
       return buildPartial()
  }
  internal func buildPartial() -> TestMessageSet {
    var returnMe:TestMessageSet = builderResult
    return returnMe
  }
  internal func mergeFrom(other:TestMessageSet) -> TestMessageSetBuilder {
    if (other == TestMessageSet()) {
     return self
    }
    mergeExtensionFields(other)
    mergeUnknownFields(other.unknownFields)
    return self
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream) ->TestMessageSetBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestMessageSetBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final internal class TestMessageSetContainer : GeneratedMessage {
  private(set) var hasMessageSet:Bool = false
  private(set) var messageSet:TestMessageSet = TestMessageSet()
  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if hasMessageSet {
     if !messageSet.isInitialized() {
       return false
     }
    }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasMessageSet {
      output.writeMessage(1, value:messageSet)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasMessageSet {
      size += WireFormat.computeMessageSize(1, value:messageSet)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  internal class func parseFromData(data:[Byte]) -> TestMessageSetContainer {
    return TestMessageSetContainer.builder().mergeFromData(data).build()
  }
  internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestMessageSetContainer {
    return TestMessageSetContainer.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) -> TestMessageSetContainer {
    return TestMessageSetContainer.builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestMessageSetContainer {
    return TestMessageSetContainer.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) -> TestMessageSetContainer {
    return TestMessageSetContainer.builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestMessageSetContainer {
    return TestMessageSetContainer.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func builder() -> TestMessageSetContainerBuilder {
    return TestMessageSetContainer.classBuilder() as TestMessageSetContainerBuilder
  }
  internal func builder() -> TestMessageSetContainerBuilder {
    return classBuilder() as TestMessageSetContainerBuilder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return TestMessageSetContainerBuilder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return TestMessageSetContainer.builder()
  }
  internal func toBuilder() -> TestMessageSetContainerBuilder {
    return TestMessageSetContainer.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:TestMessageSetContainer) -> TestMessageSetContainerBuilder {
    return TestMessageSetContainer.builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) {
    if hasMessageSet {
      output += "\(indent) messageSet {\n"
      messageSet.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasMessageSet {
            hashCode = (hashCode &* 31) &+ messageSet.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "TestMessageSetContainer"
  }
  override internal func className() -> String {
      return "TestMessageSetContainer"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return TestMessageSetContainer.self
  }


  //Meta information declaration end

}

final internal class TestMessageSetContainerBuilder : GeneratedMessageBuilder {
  private var builderResult:TestMessageSetContainer

  required override internal init () {
     builderResult = TestMessageSetContainer()
     super.init()
  }
  var hasMessageSet:Bool {
       get {
           return builderResult.hasMessageSet
       }
  }
  var messageSet:TestMessageSet {
       get {
           return builderResult.messageSet
       }
       set (value) {
           builderResult.hasMessageSet = true
           builderResult.messageSet = value
       }
  }
  internal func setMessageSetBuilder(builderForValue:TestMessageSetBuilder) -> TestMessageSetContainerBuilder {
    messageSet = builderForValue.build()
    return self
  }
  internal func mergeMessageSet(value:TestMessageSet) -> TestMessageSetContainerBuilder {
    if (builderResult.hasMessageSet) {
      builderResult.messageSet = TestMessageSet.builderWithPrototype(builderResult.messageSet).mergeFrom(value).buildPartial()
    } else {
      builderResult.messageSet = value
    }
    builderResult.hasMessageSet = true
    return self
  }
  internal func clearMessageSet() -> TestMessageSetContainerBuilder {
    builderResult.hasMessageSet = false
    builderResult.messageSet = TestMessageSet()
    return self
  }
  override internal var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  internal override func clear() -> TestMessageSetContainerBuilder {
    builderResult = TestMessageSetContainer()
    return self
  }
  internal override func clone() -> TestMessageSetContainerBuilder {
    return TestMessageSetContainer.builderWithPrototype(builderResult)
  }
  internal override func build() -> TestMessageSetContainer {
       checkInitialized()
       return buildPartial()
  }
  internal func buildPartial() -> TestMessageSetContainer {
    var returnMe:TestMessageSetContainer = builderResult
    return returnMe
  }
  internal func mergeFrom(other:TestMessageSetContainer) -> TestMessageSetContainerBuilder {
    if (other == TestMessageSetContainer()) {
     return self
    }
    if (other.hasMessageSet) {
        mergeMessageSet(other.messageSet)
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream) ->TestMessageSetContainerBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestMessageSetContainerBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 10 :
        var subBuilder:TestMessageSetBuilder = TestMessageSet.builder()
        if hasMessageSet {
          subBuilder.mergeFrom(messageSet)
        }
        input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
        messageSet = subBuilder.buildPartial()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final internal class TestMessageSetExtension1 : GeneratedMessage {
  private(set) var hasI:Bool = false
  private(set) var i:Int32 = Int32(0)

  internal class func messageSetExtension() -> ConcreateExtensionField {
       return TestMessageSetExtension1messageSetExtension
  }
  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasI {
      output.writeInt32(15, value:i)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasI {
      size += WireFormat.computeInt32Size(15, value:i)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  internal class func parseFromData(data:[Byte]) -> TestMessageSetExtension1 {
    return TestMessageSetExtension1.builder().mergeFromData(data).build()
  }
  internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestMessageSetExtension1 {
    return TestMessageSetExtension1.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) -> TestMessageSetExtension1 {
    return TestMessageSetExtension1.builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestMessageSetExtension1 {
    return TestMessageSetExtension1.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) -> TestMessageSetExtension1 {
    return TestMessageSetExtension1.builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestMessageSetExtension1 {
    return TestMessageSetExtension1.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func builder() -> TestMessageSetExtension1Builder {
    return TestMessageSetExtension1.classBuilder() as TestMessageSetExtension1Builder
  }
  internal func builder() -> TestMessageSetExtension1Builder {
    return classBuilder() as TestMessageSetExtension1Builder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return TestMessageSetExtension1Builder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return TestMessageSetExtension1.builder()
  }
  internal func toBuilder() -> TestMessageSetExtension1Builder {
    return TestMessageSetExtension1.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:TestMessageSetExtension1) -> TestMessageSetExtension1Builder {
    return TestMessageSetExtension1.builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) {
    if hasI {
      output += "\(indent) i: \(i) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasI {
             hashCode = (hashCode &* 31) &+ i.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "TestMessageSetExtension1"
  }
  override internal func className() -> String {
      return "TestMessageSetExtension1"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return TestMessageSetExtension1.self
  }


  //Meta information declaration end

}

final internal class TestMessageSetExtension1Builder : GeneratedMessageBuilder {
  private var builderResult:TestMessageSetExtension1

  required override internal init () {
     builderResult = TestMessageSetExtension1()
     super.init()
  }
  var hasI:Bool {
       get {
            return builderResult.hasI
       }
  }
  var i:Int32 {
       get {
            return builderResult.i
       }
       set (value) {
           builderResult.hasI = true
           builderResult.i = value
       }
  }
  internal func clearI() -> TestMessageSetExtension1Builder{
       builderResult.hasI = false
       builderResult.i = Int32(0)
       return self
  }
  override internal var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  internal override func clear() -> TestMessageSetExtension1Builder {
    builderResult = TestMessageSetExtension1()
    return self
  }
  internal override func clone() -> TestMessageSetExtension1Builder {
    return TestMessageSetExtension1.builderWithPrototype(builderResult)
  }
  internal override func build() -> TestMessageSetExtension1 {
       checkInitialized()
       return buildPartial()
  }
  internal func buildPartial() -> TestMessageSetExtension1 {
    var returnMe:TestMessageSetExtension1 = builderResult
    return returnMe
  }
  internal func mergeFrom(other:TestMessageSetExtension1) -> TestMessageSetExtension1Builder {
    if (other == TestMessageSetExtension1()) {
     return self
    }
    if other.hasI {
         i = other.i
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream) ->TestMessageSetExtension1Builder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestMessageSetExtension1Builder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 120 :
        i = input.readInt32()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final internal class TestMessageSetExtension2 : GeneratedMessage {
  private(set) var hasStr:Bool = false
  private(set) var str:String = ""

  internal class func messageSetExtension() -> ConcreateExtensionField {
       return TestMessageSetExtension2messageSetExtension
  }
  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasStr {
      output.writeString(25, value:str)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasStr {
      size += WireFormat.computeStringSize(25, value:str)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  internal class func parseFromData(data:[Byte]) -> TestMessageSetExtension2 {
    return TestMessageSetExtension2.builder().mergeFromData(data).build()
  }
  internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestMessageSetExtension2 {
    return TestMessageSetExtension2.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) -> TestMessageSetExtension2 {
    return TestMessageSetExtension2.builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestMessageSetExtension2 {
    return TestMessageSetExtension2.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) -> TestMessageSetExtension2 {
    return TestMessageSetExtension2.builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestMessageSetExtension2 {
    return TestMessageSetExtension2.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func builder() -> TestMessageSetExtension2Builder {
    return TestMessageSetExtension2.classBuilder() as TestMessageSetExtension2Builder
  }
  internal func builder() -> TestMessageSetExtension2Builder {
    return classBuilder() as TestMessageSetExtension2Builder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return TestMessageSetExtension2Builder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return TestMessageSetExtension2.builder()
  }
  internal func toBuilder() -> TestMessageSetExtension2Builder {
    return TestMessageSetExtension2.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:TestMessageSetExtension2) -> TestMessageSetExtension2Builder {
    return TestMessageSetExtension2.builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) {
    if hasStr {
      output += "\(indent) str: \(str) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasStr {
             hashCode = (hashCode &* 31) &+ str.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "TestMessageSetExtension2"
  }
  override internal func className() -> String {
      return "TestMessageSetExtension2"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return TestMessageSetExtension2.self
  }


  //Meta information declaration end

}

final internal class TestMessageSetExtension2Builder : GeneratedMessageBuilder {
  private var builderResult:TestMessageSetExtension2

  required override internal init () {
     builderResult = TestMessageSetExtension2()
     super.init()
  }
  var hasStr:Bool {
       get {
            return builderResult.hasStr
       }
  }
  var str:String {
       get {
            return builderResult.str
       }
       set (value) {
           builderResult.hasStr = true
           builderResult.str = value
       }
  }
  internal func clearStr() -> TestMessageSetExtension2Builder{
       builderResult.hasStr = false
       builderResult.str = ""
       return self
  }
  override internal var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  internal override func clear() -> TestMessageSetExtension2Builder {
    builderResult = TestMessageSetExtension2()
    return self
  }
  internal override func clone() -> TestMessageSetExtension2Builder {
    return TestMessageSetExtension2.builderWithPrototype(builderResult)
  }
  internal override func build() -> TestMessageSetExtension2 {
       checkInitialized()
       return buildPartial()
  }
  internal func buildPartial() -> TestMessageSetExtension2 {
    var returnMe:TestMessageSetExtension2 = builderResult
    return returnMe
  }
  internal func mergeFrom(other:TestMessageSetExtension2) -> TestMessageSetExtension2Builder {
    if (other == TestMessageSetExtension2()) {
     return self
    }
    if other.hasStr {
         str = other.str
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream) ->TestMessageSetExtension2Builder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestMessageSetExtension2Builder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 202 :
        str = input.readString()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final internal class RawMessageSet : GeneratedMessage {


  //Nested type declaration start

    final internal class Item : GeneratedMessage {
      private(set) var hasTypeId:Bool = false
      private(set) var typeId:Int32 = Int32(0)

      private(set) var hasMessage:Bool = false
      private(set) var message:Array<Byte> = [Byte]()

      required internal init() {
           super.init()
      }
      override internal func isInitialized() -> Bool {
        if !hasTypeId {
          return false
        }
        if !hasMessage {
          return false
        }
       return true
      }
      override internal func writeToCodedOutputStream(output:CodedOutputStream) {
        if hasTypeId {
          output.writeInt32(2, value:typeId)
        }
        if hasMessage {
          output.writeData(3, value:message)
        }
        unknownFields.writeToCodedOutputStream(output)
      }
      override internal func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        if hasTypeId {
          size += WireFormat.computeInt32Size(2, value:typeId)
        }
        if hasMessage {
          size += WireFormat.computeDataSize(3, value:message)
        }
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      internal class func parseFromData(data:[Byte]) -> RawMessageSet.Item {
        return RawMessageSet.Item.builder().mergeFromData(data).build()
      }
      internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> RawMessageSet.Item {
        return RawMessageSet.Item.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      internal class func parseFromInputStream(input:NSInputStream) -> RawMessageSet.Item {
        return RawMessageSet.Item.builder().mergeFromInputStream(input).build()
      }
      internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->RawMessageSet.Item {
        return RawMessageSet.Item.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      internal class func parseFromCodedInputStream(input:CodedInputStream) -> RawMessageSet.Item {
        return RawMessageSet.Item.builder().mergeFromCodedInputStream(input).build()
      }
      internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> RawMessageSet.Item {
        return RawMessageSet.Item.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      internal class func builder() -> RawMessageSet.ItemBuilder {
        return RawMessageSet.Item.classBuilder() as RawMessageSet.ItemBuilder
      }
      internal func builder() -> RawMessageSet.ItemBuilder {
        return classBuilder() as RawMessageSet.ItemBuilder
      }
      internal override class func classBuilder() -> MessageBuilder {
        return RawMessageSet.ItemBuilder()
      }
      internal override func classBuilder() -> MessageBuilder {
        return RawMessageSet.Item.builder()
      }
      internal func toBuilder() -> RawMessageSet.ItemBuilder {
        return RawMessageSet.Item.builderWithPrototype(self)
      }
      internal class func builderWithPrototype(prototype:RawMessageSet.Item) -> RawMessageSet.ItemBuilder {
        return RawMessageSet.Item.builder().mergeFrom(prototype)
      }
      override internal func writeDescriptionTo(inout output:String, indent:String) {
        if hasTypeId {
          output += "\(indent) typeId: \(typeId) \n"
        }
        if hasMessage {
          output += "\(indent) message: \(message) \n"
        }
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override internal var hashValue:Int {
          get {
              var hashCode:Int = 7
              if hasTypeId {
                 hashCode = (hashCode &* 31) &+ typeId.hashValue
              }
              if hasMessage {
                 for oneValuemessage in message {
                     hashCode = (hashCode &* 31) &+ oneValuemessage.hashValue
                 }
              }
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override internal class func className() -> String {
          return "RawMessageSet.Item"
      }
      override internal func className() -> String {
          return "RawMessageSet.Item"
      }
      override internal func classMetaType() -> GeneratedMessage.Type {
          return RawMessageSet.Item.self
      }


      //Meta information declaration end

    }

    final internal class ItemBuilder : GeneratedMessageBuilder {
      private var builderResult:RawMessageSet.Item

      required override internal init () {
         builderResult = RawMessageSet.Item()
         super.init()
      }
      var hasTypeId:Bool {
           get {
                return builderResult.hasTypeId
           }
      }
      var typeId:Int32 {
           get {
                return builderResult.typeId
           }
           set (value) {
               builderResult.hasTypeId = true
               builderResult.typeId = value
           }
      }
      internal func clearTypeId() -> RawMessageSet.ItemBuilder{
           builderResult.hasTypeId = false
           builderResult.typeId = Int32(0)
           return self
      }
      var hasMessage:Bool {
           get {
                return builderResult.hasMessage
           }
      }
      var message:Array<Byte> {
           get {
                return builderResult.message
           }
           set (value) {
               builderResult.hasMessage = true
               builderResult.message = value
           }
      }
      internal func clearMessage() -> RawMessageSet.ItemBuilder{
           builderResult.hasMessage = false
           builderResult.message = [Byte]()
           return self
      }
      override internal var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      internal override func clear() -> RawMessageSet.ItemBuilder {
        builderResult = RawMessageSet.Item()
        return self
      }
      internal override func clone() -> RawMessageSet.ItemBuilder {
        return RawMessageSet.Item.builderWithPrototype(builderResult)
      }
      internal override func build() -> RawMessageSet.Item {
           checkInitialized()
           return buildPartial()
      }
      internal func buildPartial() -> RawMessageSet.Item {
        var returnMe:RawMessageSet.Item = builderResult
        return returnMe
      }
      internal func mergeFrom(other:RawMessageSet.Item) -> RawMessageSet.ItemBuilder {
        if (other == RawMessageSet.Item()) {
         return self
        }
        if other.hasTypeId {
             typeId = other.typeId
        }
        if other.hasMessage {
             message = other.message
        }
        mergeUnknownFields(other.unknownFields)
        return self
      }
      internal override func mergeFromCodedInputStream(input:CodedInputStream) ->RawMessageSet.ItemBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> RawMessageSet.ItemBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          case 16 :
            typeId = input.readInt32()

          case 26 :
            message = input.readData()

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end

  private(set) var item:Array<RawMessageSet.Item>  = Array<RawMessageSet.Item>()
  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    var isInititem:Bool = true
    for oneElementitem in item {
        if (!oneElementitem.isInitialized()) {
            isInititem = false
            break 
        }
    }
    if !isInititem {
     return isInititem
     }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) {
    for oneElementitem in item {
        output.writeGroup(1, value:oneElementitem)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    for oneElementitem in item {
        size += WireFormat.computeGroupSize(1, value:oneElementitem)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  internal class func parseFromData(data:[Byte]) -> RawMessageSet {
    return RawMessageSet.builder().mergeFromData(data).build()
  }
  internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> RawMessageSet {
    return RawMessageSet.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) -> RawMessageSet {
    return RawMessageSet.builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->RawMessageSet {
    return RawMessageSet.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) -> RawMessageSet {
    return RawMessageSet.builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> RawMessageSet {
    return RawMessageSet.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func builder() -> RawMessageSetBuilder {
    return RawMessageSet.classBuilder() as RawMessageSetBuilder
  }
  internal func builder() -> RawMessageSetBuilder {
    return classBuilder() as RawMessageSetBuilder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return RawMessageSetBuilder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return RawMessageSet.builder()
  }
  internal func toBuilder() -> RawMessageSetBuilder {
    return RawMessageSet.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:RawMessageSet) -> RawMessageSetBuilder {
    return RawMessageSet.builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) {
    var itemElementIndex:Int = 0
    for oneElementitem in item {
        output += "\(indent) item[\(itemElementIndex)] {\n"
        oneElementitem.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent)}\n"
        itemElementIndex++
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          for oneElementitem in item {
              hashCode = (hashCode &* 31) &+ oneElementitem.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "RawMessageSet"
  }
  override internal func className() -> String {
      return "RawMessageSet"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return RawMessageSet.self
  }


  //Meta information declaration end

}

final internal class RawMessageSetBuilder : GeneratedMessageBuilder {
  private var builderResult:RawMessageSet

  required override internal init () {
     builderResult = RawMessageSet()
     super.init()
  }
  var item:Array<RawMessageSet.Item> {
       get {
           return builderResult.item
       }
       set (value) {
           builderResult.item = value
       }
  }
  internal func clearItem() -> RawMessageSetBuilder {
    builderResult.item.removeAll(keepCapacity: false)
    return self
  }
  override internal var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  internal override func clear() -> RawMessageSetBuilder {
    builderResult = RawMessageSet()
    return self
  }
  internal override func clone() -> RawMessageSetBuilder {
    return RawMessageSet.builderWithPrototype(builderResult)
  }
  internal override func build() -> RawMessageSet {
       checkInitialized()
       return buildPartial()
  }
  internal func buildPartial() -> RawMessageSet {
    var returnMe:RawMessageSet = builderResult
    return returnMe
  }
  internal func mergeFrom(other:RawMessageSet) -> RawMessageSetBuilder {
    if (other == RawMessageSet()) {
     return self
    }
    if !other.item.isEmpty  {
       builderResult.item += other.item
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream) ->RawMessageSetBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> RawMessageSetBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 11 :
        var subBuilder = RawMessageSet.Item.builder()
        input.readGroup(1,builder:subBuilder,extensionRegistry:extensionRegistry)
        item += [subBuilder.buildPartial()]

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

//Class extensions: NSData


internal extension TestMessageSet {
    class func parseFromNSData(data:NSData) -> TestMessageSet {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return TestMessageSet.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> TestMessageSet {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return TestMessageSet.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
internal extension TestMessageSetContainer {
    class func parseFromNSData(data:NSData) -> TestMessageSetContainer {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return TestMessageSetContainer.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> TestMessageSetContainer {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return TestMessageSetContainer.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
internal extension TestMessageSetExtension1 {
    class func parseFromNSData(data:NSData) -> TestMessageSetExtension1 {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return TestMessageSetExtension1.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> TestMessageSetExtension1 {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return TestMessageSetExtension1.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
internal extension TestMessageSetExtension2 {
    class func parseFromNSData(data:NSData) -> TestMessageSetExtension2 {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return TestMessageSetExtension2.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> TestMessageSetExtension2 {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return TestMessageSetExtension2.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
internal extension RawMessageSet.Item {
    class func parseFromNSData(data:NSData) -> RawMessageSet.Item {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return RawMessageSet.Item.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> RawMessageSet.Item {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return RawMessageSet.Item.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
internal extension RawMessageSet {
    class func parseFromNSData(data:NSData) -> RawMessageSet {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return RawMessageSet.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> RawMessageSet {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return RawMessageSet.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}

// @@protoc_insertion_point(global_scope)
