// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
import ProtocolBuffers

internal struct UnittestEmbedOptimizeForRoot {
  internal static var sharedInstance : UnittestEmbedOptimizeForRoot {
   struct Static {
       static let instance : UnittestEmbedOptimizeForRoot = UnittestEmbedOptimizeForRoot()
   }
   return Static.instance
  }
  var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(extensionRegistry)
    UnittestOptimizeForRoot.sharedInstance.registerAllExtensions(extensionRegistry)
  }
  internal func registerAllExtensions(registry:ExtensionRegistry) {
  }
}

internal func == (lhs: TestEmbedOptimizedForSize, rhs: TestEmbedOptimizedForSize) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasOptionalMessage == rhs.hasOptionalMessage) && (!lhs.hasOptionalMessage || lhs.optionalMessage == rhs.optionalMessage)
  fieldCheck = fieldCheck && (lhs.repeatedMessage == rhs.repeatedMessage)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

final internal class TestEmbedOptimizedForSize : GeneratedMessage {
  private(set) var hasOptionalMessage:Bool = false
  private(set) var optionalMessage:TestOptimizedForSize = TestOptimizedForSize()
  private(set) var repeatedMessage:Array<TestOptimizedForSize>  = Array<TestOptimizedForSize>()
  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if hasOptionalMessage {
     if !optionalMessage.isInitialized() {
       return false
     }
    }
    var isInitrepeatedMessage:Bool = true
    for oneElementrepeatedMessage in repeatedMessage {
        if (!oneElementrepeatedMessage.isInitialized()) {
            isInitrepeatedMessage = false
            break 
        }
    }
    if !isInitrepeatedMessage {
     return isInitrepeatedMessage
     }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasOptionalMessage {
      output.writeMessage(1, value:optionalMessage)
    }
    for oneElementrepeatedMessage in repeatedMessage {
        output.writeMessage(2, value:oneElementrepeatedMessage)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasOptionalMessage {
      size += WireFormat.computeMessageSize(1, value:optionalMessage)
    }
    for oneElementrepeatedMessage in repeatedMessage {
        size += WireFormat.computeMessageSize(2, value:oneElementrepeatedMessage)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  internal class func parseFromData(data:[Byte]) -> TestEmbedOptimizedForSize {
    return TestEmbedOptimizedForSize.builder().mergeFromData(data).build()
  }
  internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TestEmbedOptimizedForSize {
    return TestEmbedOptimizedForSize.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) -> TestEmbedOptimizedForSize {
    return TestEmbedOptimizedForSize.builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TestEmbedOptimizedForSize {
    return TestEmbedOptimizedForSize.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) -> TestEmbedOptimizedForSize {
    return TestEmbedOptimizedForSize.builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestEmbedOptimizedForSize {
    return TestEmbedOptimizedForSize.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func builder() -> TestEmbedOptimizedForSizeBuilder {
    return TestEmbedOptimizedForSize.classBuilder() as TestEmbedOptimizedForSizeBuilder
  }
  internal func builder() -> TestEmbedOptimizedForSizeBuilder {
    return classBuilder() as TestEmbedOptimizedForSizeBuilder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return TestEmbedOptimizedForSizeBuilder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return TestEmbedOptimizedForSize.builder()
  }
  internal func toBuilder() -> TestEmbedOptimizedForSizeBuilder {
    return TestEmbedOptimizedForSize.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:TestEmbedOptimizedForSize) -> TestEmbedOptimizedForSizeBuilder {
    return TestEmbedOptimizedForSize.builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) {
    if hasOptionalMessage {
      output += "\(indent) optionalMessage {\n"
      optionalMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    var repeatedMessageElementIndex:Int = 0
    for oneElementrepeatedMessage in repeatedMessage {
        output += "\(indent) repeatedMessage[\(repeatedMessageElementIndex)] {\n"
        oneElementrepeatedMessage.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent)}\n"
        repeatedMessageElementIndex++
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasOptionalMessage {
            hashCode = (hashCode &* 31) &+ optionalMessage.hashValue
          }
          for oneElementrepeatedMessage in repeatedMessage {
              hashCode = (hashCode &* 31) &+ oneElementrepeatedMessage.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "TestEmbedOptimizedForSize"
  }
  override internal func className() -> String {
      return "TestEmbedOptimizedForSize"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return TestEmbedOptimizedForSize.self
  }


  //Meta information declaration end

}

final internal class TestEmbedOptimizedForSizeBuilder : GeneratedMessageBuilder {
  private var builderResult:TestEmbedOptimizedForSize

  required override internal init () {
     builderResult = TestEmbedOptimizedForSize()
     super.init()
  }
  var hasOptionalMessage:Bool {
       get {
           return builderResult.hasOptionalMessage
       }
  }
  var optionalMessage:TestOptimizedForSize {
       get {
           return builderResult.optionalMessage
       }
       set (value) {
           builderResult.hasOptionalMessage = true
           builderResult.optionalMessage = value
       }
  }
  internal func setOptionalMessageBuilder(builderForValue:TestOptimizedForSizeBuilder) -> TestEmbedOptimizedForSizeBuilder {
    optionalMessage = builderForValue.build()
    return self
  }
  internal func mergeOptionalMessage(value:TestOptimizedForSize) -> TestEmbedOptimizedForSizeBuilder {
    if (builderResult.hasOptionalMessage) {
      builderResult.optionalMessage = TestOptimizedForSize.builderWithPrototype(builderResult.optionalMessage).mergeFrom(value).buildPartial()
    } else {
      builderResult.optionalMessage = value
    }
    builderResult.hasOptionalMessage = true
    return self
  }
  internal func clearOptionalMessage() -> TestEmbedOptimizedForSizeBuilder {
    builderResult.hasOptionalMessage = false
    builderResult.optionalMessage = TestOptimizedForSize()
    return self
  }
  var repeatedMessage:Array<TestOptimizedForSize> {
       get {
           return builderResult.repeatedMessage
       }
       set (value) {
           builderResult.repeatedMessage = value
       }
  }
  internal func clearRepeatedMessage() -> TestEmbedOptimizedForSizeBuilder {
    builderResult.repeatedMessage.removeAll(keepCapacity: false)
    return self
  }
  override internal var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  internal override func clear() -> TestEmbedOptimizedForSizeBuilder {
    builderResult = TestEmbedOptimizedForSize()
    return self
  }
  internal override func clone() -> TestEmbedOptimizedForSizeBuilder {
    return TestEmbedOptimizedForSize.builderWithPrototype(builderResult)
  }
  internal override func build() -> TestEmbedOptimizedForSize {
       checkInitialized()
       return buildPartial()
  }
  internal func buildPartial() -> TestEmbedOptimizedForSize {
    var returnMe:TestEmbedOptimizedForSize = builderResult
    return returnMe
  }
  internal func mergeFrom(other:TestEmbedOptimizedForSize) -> TestEmbedOptimizedForSizeBuilder {
    if (other == TestEmbedOptimizedForSize()) {
     return self
    }
    if (other.hasOptionalMessage) {
        mergeOptionalMessage(other.optionalMessage)
    }
    if !other.repeatedMessage.isEmpty  {
       builderResult.repeatedMessage += other.repeatedMessage
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream) ->TestEmbedOptimizedForSizeBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TestEmbedOptimizedForSizeBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 10 :
        var subBuilder:TestOptimizedForSizeBuilder = TestOptimizedForSize.builder()
        if hasOptionalMessage {
          subBuilder.mergeFrom(optionalMessage)
        }
        input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
        optionalMessage = subBuilder.buildPartial()

      case 18 :
        var subBuilder = TestOptimizedForSize.builder()
        input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
        repeatedMessage += [subBuilder.buildPartial()]

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

//Class extensions: NSData


internal extension TestEmbedOptimizedForSize {
    class func parseFromNSData(data:NSData) -> TestEmbedOptimizedForSize {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return TestEmbedOptimizedForSize.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> TestEmbedOptimizedForSize {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return TestEmbedOptimizedForSize.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}

// @@protoc_insertion_point(global_scope)
