// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
import ProtocolBuffers

internal struct TrucksRoot {
  internal static var sharedInstance : TrucksRoot {
   struct Static {
       static let instance : TrucksRoot = TrucksRoot()
   }
   return Static.instance
  }
  var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(extensionRegistry)
  }
  internal func registerAllExtensions(registry:ExtensionRegistry) {
  }
}

internal func == (lhs: ActiveTrucksRequest, rhs: ActiveTrucksRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasLatitude == rhs.hasLatitude) && (!lhs.hasLatitude || lhs.latitude == rhs.latitude)
  fieldCheck = fieldCheck && (lhs.hasLongitude == rhs.hasLongitude) && (!lhs.hasLongitude || lhs.longitude == rhs.longitude)
  fieldCheck = fieldCheck && (lhs.hasSearchQuery == rhs.hasSearchQuery) && (!lhs.hasSearchQuery || lhs.searchQuery == rhs.searchQuery)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ActiveTrucksResponse.Truck, rhs: ActiveTrucksResponse.Truck) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasLatitude == rhs.hasLatitude) && (!lhs.hasLatitude || lhs.latitude == rhs.latitude)
  fieldCheck = fieldCheck && (lhs.hasLongitude == rhs.hasLongitude) && (!lhs.hasLongitude || lhs.longitude == rhs.longitude)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ActiveTrucksResponse, rhs: ActiveTrucksResponse) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.trucks == rhs.trucks)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: TrucksForVendorRequest, rhs: TrucksForVendorRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: TrucksForVendorResponse, rhs: TrucksForVendorResponse) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.trucks == rhs.trucks)
  fieldCheck = fieldCheck && (lhs.hasIsNew == rhs.hasIsNew) && (!lhs.hasIsNew || lhs.isNew == rhs.isNew)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: TruckProfilesRequest, rhs: TruckProfilesRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasLatitude == rhs.hasLatitude) && (!lhs.hasLatitude || lhs.latitude == rhs.latitude)
  fieldCheck = fieldCheck && (lhs.hasLongitude == rhs.hasLongitude) && (!lhs.hasLongitude || lhs.longitude == rhs.longitude)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: TruckProfilesResponse, rhs: TruckProfilesResponse) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.trucks == rhs.trucks)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ModifyTruckRequest, rhs: ModifyTruckRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.keywords == rhs.keywords)
  fieldCheck = fieldCheck && (lhs.hasPrimaryColor == rhs.hasPrimaryColor) && (!lhs.hasPrimaryColor || lhs.primaryColor == rhs.primaryColor)
  fieldCheck = fieldCheck && (lhs.hasSecondaryColor == rhs.hasSecondaryColor) && (!lhs.hasSecondaryColor || lhs.secondaryColor == rhs.secondaryColor)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: Truck, rhs: Truck) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasImageUrl == rhs.hasImageUrl) && (!lhs.hasImageUrl || lhs.imageUrl == rhs.imageUrl)
  fieldCheck = fieldCheck && (lhs.keywords == rhs.keywords)
  fieldCheck = fieldCheck && (lhs.hasPrimaryColor == rhs.hasPrimaryColor) && (!lhs.hasPrimaryColor || lhs.primaryColor == rhs.primaryColor)
  fieldCheck = fieldCheck && (lhs.hasSecondaryColor == rhs.hasSecondaryColor) && (!lhs.hasSecondaryColor || lhs.secondaryColor == rhs.secondaryColor)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ServingModeRequest, rhs: ServingModeRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasTruckId == rhs.hasTruckId) && (!lhs.hasTruckId || lhs.truckId == rhs.truckId)
  fieldCheck = fieldCheck && (lhs.hasIsInServingMode == rhs.hasIsInServingMode) && (!lhs.hasIsInServingMode || lhs.isInServingMode == rhs.isInServingMode)
  fieldCheck = fieldCheck && (lhs.hasTruckLatitude == rhs.hasTruckLatitude) && (!lhs.hasTruckLatitude || lhs.truckLatitude == rhs.truckLatitude)
  fieldCheck = fieldCheck && (lhs.hasTruckLongitude == rhs.hasTruckLongitude) && (!lhs.hasTruckLongitude || lhs.truckLongitude == rhs.truckLongitude)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ServingModeResponse, rhs: ServingModeResponse) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

final internal class ActiveTrucksRequest : GeneratedMessage {
  private(set) var hasLatitude:Bool = false
  private(set) var latitude:Double = Double(0)

  private(set) var hasLongitude:Bool = false
  private(set) var longitude:Double = Double(0)

  private(set) var hasSearchQuery:Bool = false
  private(set) var searchQuery:String = ""

  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !hasLatitude {
      return false
    }
    if !hasLongitude {
      return false
    }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasLatitude {
      output.writeDouble(1, value:latitude)
    }
    if hasLongitude {
      output.writeDouble(2, value:longitude)
    }
    if hasSearchQuery {
      output.writeString(3, value:searchQuery)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasLatitude {
      size += WireFormat.computeDoubleSize(1, value:latitude)
    }
    if hasLongitude {
      size += WireFormat.computeDoubleSize(2, value:longitude)
    }
    if hasSearchQuery {
      size += WireFormat.computeStringSize(3, value:searchQuery)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  internal class func parseFromData(data:[Byte]) -> ActiveTrucksRequest {
    return ActiveTrucksRequest.builder().mergeFromData(data).build()
  }
  internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ActiveTrucksRequest {
    return ActiveTrucksRequest.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) -> ActiveTrucksRequest {
    return ActiveTrucksRequest.builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ActiveTrucksRequest {
    return ActiveTrucksRequest.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) -> ActiveTrucksRequest {
    return ActiveTrucksRequest.builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ActiveTrucksRequest {
    return ActiveTrucksRequest.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func builder() -> ActiveTrucksRequestBuilder {
    return ActiveTrucksRequest.classBuilder() as ActiveTrucksRequestBuilder
  }
  internal func builder() -> ActiveTrucksRequestBuilder {
    return classBuilder() as ActiveTrucksRequestBuilder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return ActiveTrucksRequestBuilder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return ActiveTrucksRequest.builder()
  }
  internal func toBuilder() -> ActiveTrucksRequestBuilder {
    return ActiveTrucksRequest.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:ActiveTrucksRequest) -> ActiveTrucksRequestBuilder {
    return ActiveTrucksRequest.builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) {
    if hasLatitude {
      output += "\(indent) latitude: \(latitude) \n"
    }
    if hasLongitude {
      output += "\(indent) longitude: \(longitude) \n"
    }
    if hasSearchQuery {
      output += "\(indent) searchQuery: \(searchQuery) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasLatitude {
             hashCode = (hashCode &* 31) &+ latitude.hashValue
          }
          if hasLongitude {
             hashCode = (hashCode &* 31) &+ longitude.hashValue
          }
          if hasSearchQuery {
             hashCode = (hashCode &* 31) &+ searchQuery.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "ActiveTrucksRequest"
  }
  override internal func className() -> String {
      return "ActiveTrucksRequest"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return ActiveTrucksRequest.self
  }


  //Meta information declaration end

}

final internal class ActiveTrucksRequestBuilder : GeneratedMessageBuilder {
  private var builderResult:ActiveTrucksRequest

  required override internal init () {
     builderResult = ActiveTrucksRequest()
     super.init()
  }
  var hasLatitude:Bool {
       get {
            return builderResult.hasLatitude
       }
  }
  var latitude:Double {
       get {
            return builderResult.latitude
       }
       set (value) {
           builderResult.hasLatitude = true
           builderResult.latitude = value
       }
  }
  internal func clearLatitude() -> ActiveTrucksRequestBuilder{
       builderResult.hasLatitude = false
       builderResult.latitude = Double(0)
       return self
  }
  var hasLongitude:Bool {
       get {
            return builderResult.hasLongitude
       }
  }
  var longitude:Double {
       get {
            return builderResult.longitude
       }
       set (value) {
           builderResult.hasLongitude = true
           builderResult.longitude = value
       }
  }
  internal func clearLongitude() -> ActiveTrucksRequestBuilder{
       builderResult.hasLongitude = false
       builderResult.longitude = Double(0)
       return self
  }
  var hasSearchQuery:Bool {
       get {
            return builderResult.hasSearchQuery
       }
  }
  var searchQuery:String {
       get {
            return builderResult.searchQuery
       }
       set (value) {
           builderResult.hasSearchQuery = true
           builderResult.searchQuery = value
       }
  }
  internal func clearSearchQuery() -> ActiveTrucksRequestBuilder{
       builderResult.hasSearchQuery = false
       builderResult.searchQuery = ""
       return self
  }
  override internal var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  internal override func clear() -> ActiveTrucksRequestBuilder {
    builderResult = ActiveTrucksRequest()
    return self
  }
  internal override func clone() -> ActiveTrucksRequestBuilder {
    return ActiveTrucksRequest.builderWithPrototype(builderResult)
  }
  internal override func build() -> ActiveTrucksRequest {
       checkInitialized()
       return buildPartial()
  }
  internal func buildPartial() -> ActiveTrucksRequest {
    var returnMe:ActiveTrucksRequest = builderResult
    return returnMe
  }
  internal func mergeFrom(other:ActiveTrucksRequest) -> ActiveTrucksRequestBuilder {
    if (other == ActiveTrucksRequest()) {
     return self
    }
    if other.hasLatitude {
         latitude = other.latitude
    }
    if other.hasLongitude {
         longitude = other.longitude
    }
    if other.hasSearchQuery {
         searchQuery = other.searchQuery
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ActiveTrucksRequestBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ActiveTrucksRequestBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 9 :
        latitude = input.readDouble()

      case 17 :
        longitude = input.readDouble()

      case 26 :
        searchQuery = input.readString()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final internal class ActiveTrucksResponse : GeneratedMessage {


  //Nested type declaration start

    final internal class Truck : GeneratedMessage {
      private(set) var hasId:Bool = false
      private(set) var id:String = ""

      private(set) var hasLatitude:Bool = false
      private(set) var latitude:Double = Double(0)

      private(set) var hasLongitude:Bool = false
      private(set) var longitude:Double = Double(0)

      required internal init() {
           super.init()
      }
      override internal func isInitialized() -> Bool {
        if !hasId {
          return false
        }
        if !hasLatitude {
          return false
        }
        if !hasLongitude {
          return false
        }
       return true
      }
      override internal func writeToCodedOutputStream(output:CodedOutputStream) {
        if hasId {
          output.writeString(1, value:id)
        }
        if hasLatitude {
          output.writeDouble(2, value:latitude)
        }
        if hasLongitude {
          output.writeDouble(3, value:longitude)
        }
        unknownFields.writeToCodedOutputStream(output)
      }
      override internal func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        if hasId {
          size += WireFormat.computeStringSize(1, value:id)
        }
        if hasLatitude {
          size += WireFormat.computeDoubleSize(2, value:latitude)
        }
        if hasLongitude {
          size += WireFormat.computeDoubleSize(3, value:longitude)
        }
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      internal class func parseFromData(data:[Byte]) -> ActiveTrucksResponse.Truck {
        return ActiveTrucksResponse.Truck.builder().mergeFromData(data).build()
      }
      internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ActiveTrucksResponse.Truck {
        return ActiveTrucksResponse.Truck.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      internal class func parseFromInputStream(input:NSInputStream) -> ActiveTrucksResponse.Truck {
        return ActiveTrucksResponse.Truck.builder().mergeFromInputStream(input).build()
      }
      internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ActiveTrucksResponse.Truck {
        return ActiveTrucksResponse.Truck.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      internal class func parseFromCodedInputStream(input:CodedInputStream) -> ActiveTrucksResponse.Truck {
        return ActiveTrucksResponse.Truck.builder().mergeFromCodedInputStream(input).build()
      }
      internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ActiveTrucksResponse.Truck {
        return ActiveTrucksResponse.Truck.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      internal class func builder() -> ActiveTrucksResponse.TruckBuilder {
        return ActiveTrucksResponse.Truck.classBuilder() as ActiveTrucksResponse.TruckBuilder
      }
      internal func builder() -> ActiveTrucksResponse.TruckBuilder {
        return classBuilder() as ActiveTrucksResponse.TruckBuilder
      }
      internal override class func classBuilder() -> MessageBuilder {
        return ActiveTrucksResponse.TruckBuilder()
      }
      internal override func classBuilder() -> MessageBuilder {
        return ActiveTrucksResponse.Truck.builder()
      }
      internal func toBuilder() -> ActiveTrucksResponse.TruckBuilder {
        return ActiveTrucksResponse.Truck.builderWithPrototype(self)
      }
      internal class func builderWithPrototype(prototype:ActiveTrucksResponse.Truck) -> ActiveTrucksResponse.TruckBuilder {
        return ActiveTrucksResponse.Truck.builder().mergeFrom(prototype)
      }
      override internal func writeDescriptionTo(inout output:String, indent:String) {
        if hasId {
          output += "\(indent) id: \(id) \n"
        }
        if hasLatitude {
          output += "\(indent) latitude: \(latitude) \n"
        }
        if hasLongitude {
          output += "\(indent) longitude: \(longitude) \n"
        }
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override internal var hashValue:Int {
          get {
              var hashCode:Int = 7
              if hasId {
                 hashCode = (hashCode &* 31) &+ id.hashValue
              }
              if hasLatitude {
                 hashCode = (hashCode &* 31) &+ latitude.hashValue
              }
              if hasLongitude {
                 hashCode = (hashCode &* 31) &+ longitude.hashValue
              }
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override internal class func className() -> String {
          return "ActiveTrucksResponse.Truck"
      }
      override internal func className() -> String {
          return "ActiveTrucksResponse.Truck"
      }
      override internal func classMetaType() -> GeneratedMessage.Type {
          return ActiveTrucksResponse.Truck.self
      }


      //Meta information declaration end

    }

    final internal class TruckBuilder : GeneratedMessageBuilder {
      private var builderResult:ActiveTrucksResponse.Truck

      required override internal init () {
         builderResult = ActiveTrucksResponse.Truck()
         super.init()
      }
      var hasId:Bool {
           get {
                return builderResult.hasId
           }
      }
      var id:String {
           get {
                return builderResult.id
           }
           set (value) {
               builderResult.hasId = true
               builderResult.id = value
           }
      }
      internal func clearId() -> ActiveTrucksResponse.TruckBuilder{
           builderResult.hasId = false
           builderResult.id = ""
           return self
      }
      var hasLatitude:Bool {
           get {
                return builderResult.hasLatitude
           }
      }
      var latitude:Double {
           get {
                return builderResult.latitude
           }
           set (value) {
               builderResult.hasLatitude = true
               builderResult.latitude = value
           }
      }
      internal func clearLatitude() -> ActiveTrucksResponse.TruckBuilder{
           builderResult.hasLatitude = false
           builderResult.latitude = Double(0)
           return self
      }
      var hasLongitude:Bool {
           get {
                return builderResult.hasLongitude
           }
      }
      var longitude:Double {
           get {
                return builderResult.longitude
           }
           set (value) {
               builderResult.hasLongitude = true
               builderResult.longitude = value
           }
      }
      internal func clearLongitude() -> ActiveTrucksResponse.TruckBuilder{
           builderResult.hasLongitude = false
           builderResult.longitude = Double(0)
           return self
      }
      override internal var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      internal override func clear() -> ActiveTrucksResponse.TruckBuilder {
        builderResult = ActiveTrucksResponse.Truck()
        return self
      }
      internal override func clone() -> ActiveTrucksResponse.TruckBuilder {
        return ActiveTrucksResponse.Truck.builderWithPrototype(builderResult)
      }
      internal override func build() -> ActiveTrucksResponse.Truck {
           checkInitialized()
           return buildPartial()
      }
      internal func buildPartial() -> ActiveTrucksResponse.Truck {
        var returnMe:ActiveTrucksResponse.Truck = builderResult
        return returnMe
      }
      internal func mergeFrom(other:ActiveTrucksResponse.Truck) -> ActiveTrucksResponse.TruckBuilder {
        if (other == ActiveTrucksResponse.Truck()) {
         return self
        }
        if other.hasId {
             id = other.id
        }
        if other.hasLatitude {
             latitude = other.latitude
        }
        if other.hasLongitude {
             longitude = other.longitude
        }
        mergeUnknownFields(other.unknownFields)
        return self
      }
      internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ActiveTrucksResponse.TruckBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ActiveTrucksResponse.TruckBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          case 10 :
            id = input.readString()

          case 17 :
            latitude = input.readDouble()

          case 25 :
            longitude = input.readDouble()

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end

  private(set) var trucks:Array<ActiveTrucksResponse.Truck>  = Array<ActiveTrucksResponse.Truck>()
  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    var isInittrucks:Bool = true
    for oneElementtrucks in trucks {
        if (!oneElementtrucks.isInitialized()) {
            isInittrucks = false
            break 
        }
    }
    if !isInittrucks {
     return isInittrucks
     }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) {
    for oneElementtrucks in trucks {
        output.writeMessage(1, value:oneElementtrucks)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    for oneElementtrucks in trucks {
        size += WireFormat.computeMessageSize(1, value:oneElementtrucks)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  internal class func parseFromData(data:[Byte]) -> ActiveTrucksResponse {
    return ActiveTrucksResponse.builder().mergeFromData(data).build()
  }
  internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ActiveTrucksResponse {
    return ActiveTrucksResponse.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) -> ActiveTrucksResponse {
    return ActiveTrucksResponse.builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ActiveTrucksResponse {
    return ActiveTrucksResponse.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) -> ActiveTrucksResponse {
    return ActiveTrucksResponse.builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ActiveTrucksResponse {
    return ActiveTrucksResponse.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func builder() -> ActiveTrucksResponseBuilder {
    return ActiveTrucksResponse.classBuilder() as ActiveTrucksResponseBuilder
  }
  internal func builder() -> ActiveTrucksResponseBuilder {
    return classBuilder() as ActiveTrucksResponseBuilder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return ActiveTrucksResponseBuilder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return ActiveTrucksResponse.builder()
  }
  internal func toBuilder() -> ActiveTrucksResponseBuilder {
    return ActiveTrucksResponse.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:ActiveTrucksResponse) -> ActiveTrucksResponseBuilder {
    return ActiveTrucksResponse.builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) {
    var trucksElementIndex:Int = 0
    for oneElementtrucks in trucks {
        output += "\(indent) trucks[\(trucksElementIndex)] {\n"
        oneElementtrucks.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent)}\n"
        trucksElementIndex++
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          for oneElementtrucks in trucks {
              hashCode = (hashCode &* 31) &+ oneElementtrucks.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "ActiveTrucksResponse"
  }
  override internal func className() -> String {
      return "ActiveTrucksResponse"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return ActiveTrucksResponse.self
  }


  //Meta information declaration end

}

final internal class ActiveTrucksResponseBuilder : GeneratedMessageBuilder {
  private var builderResult:ActiveTrucksResponse

  required override internal init () {
     builderResult = ActiveTrucksResponse()
     super.init()
  }
  var trucks:Array<ActiveTrucksResponse.Truck> {
       get {
           return builderResult.trucks
       }
       set (value) {
           builderResult.trucks = value
       }
  }
  internal func clearTrucks() -> ActiveTrucksResponseBuilder {
    builderResult.trucks.removeAll(keepCapacity: false)
    return self
  }
  override internal var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  internal override func clear() -> ActiveTrucksResponseBuilder {
    builderResult = ActiveTrucksResponse()
    return self
  }
  internal override func clone() -> ActiveTrucksResponseBuilder {
    return ActiveTrucksResponse.builderWithPrototype(builderResult)
  }
  internal override func build() -> ActiveTrucksResponse {
       checkInitialized()
       return buildPartial()
  }
  internal func buildPartial() -> ActiveTrucksResponse {
    var returnMe:ActiveTrucksResponse = builderResult
    return returnMe
  }
  internal func mergeFrom(other:ActiveTrucksResponse) -> ActiveTrucksResponseBuilder {
    if (other == ActiveTrucksResponse()) {
     return self
    }
    if !other.trucks.isEmpty  {
       builderResult.trucks += other.trucks
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ActiveTrucksResponseBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ActiveTrucksResponseBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 10 :
        var subBuilder = ActiveTrucksResponse.Truck.builder()
        input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
        trucks += [subBuilder.buildPartial()]

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final internal class TrucksForVendorRequest : GeneratedMessage {
  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) {
    unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  internal class func parseFromData(data:[Byte]) -> TrucksForVendorRequest {
    return TrucksForVendorRequest.builder().mergeFromData(data).build()
  }
  internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TrucksForVendorRequest {
    return TrucksForVendorRequest.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) -> TrucksForVendorRequest {
    return TrucksForVendorRequest.builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TrucksForVendorRequest {
    return TrucksForVendorRequest.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) -> TrucksForVendorRequest {
    return TrucksForVendorRequest.builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TrucksForVendorRequest {
    return TrucksForVendorRequest.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func builder() -> TrucksForVendorRequestBuilder {
    return TrucksForVendorRequest.classBuilder() as TrucksForVendorRequestBuilder
  }
  internal func builder() -> TrucksForVendorRequestBuilder {
    return classBuilder() as TrucksForVendorRequestBuilder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return TrucksForVendorRequestBuilder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return TrucksForVendorRequest.builder()
  }
  internal func toBuilder() -> TrucksForVendorRequestBuilder {
    return TrucksForVendorRequest.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:TrucksForVendorRequest) -> TrucksForVendorRequestBuilder {
    return TrucksForVendorRequest.builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) {
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "TrucksForVendorRequest"
  }
  override internal func className() -> String {
      return "TrucksForVendorRequest"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return TrucksForVendorRequest.self
  }


  //Meta information declaration end

}

final internal class TrucksForVendorRequestBuilder : GeneratedMessageBuilder {
  private var builderResult:TrucksForVendorRequest

  required override internal init () {
     builderResult = TrucksForVendorRequest()
     super.init()
  }
  override internal var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  internal override func clear() -> TrucksForVendorRequestBuilder {
    builderResult = TrucksForVendorRequest()
    return self
  }
  internal override func clone() -> TrucksForVendorRequestBuilder {
    return TrucksForVendorRequest.builderWithPrototype(builderResult)
  }
  internal override func build() -> TrucksForVendorRequest {
       checkInitialized()
       return buildPartial()
  }
  internal func buildPartial() -> TrucksForVendorRequest {
    var returnMe:TrucksForVendorRequest = builderResult
    return returnMe
  }
  internal func mergeFrom(other:TrucksForVendorRequest) -> TrucksForVendorRequestBuilder {
    if (other == TrucksForVendorRequest()) {
     return self
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream) ->TrucksForVendorRequestBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TrucksForVendorRequestBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final internal class TrucksForVendorResponse : GeneratedMessage {
  private(set) var hasIsNew:Bool = false
  private(set) var isNew:Bool = true

  private(set) var trucks:Array<Truck>  = Array<Truck>()
  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !hasIsNew {
      return false
    }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) {
    for oneElementtrucks in trucks {
        output.writeMessage(1, value:oneElementtrucks)
    }
    if hasIsNew {
      output.writeBool(2, value:isNew)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    for oneElementtrucks in trucks {
        size += WireFormat.computeMessageSize(1, value:oneElementtrucks)
    }
    if hasIsNew {
      size += WireFormat.computeBoolSize(2, value:isNew)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  internal class func parseFromData(data:[Byte]) -> TrucksForVendorResponse {
    return TrucksForVendorResponse.builder().mergeFromData(data).build()
  }
  internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TrucksForVendorResponse {
    return TrucksForVendorResponse.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) -> TrucksForVendorResponse {
    return TrucksForVendorResponse.builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TrucksForVendorResponse {
    return TrucksForVendorResponse.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) -> TrucksForVendorResponse {
    return TrucksForVendorResponse.builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TrucksForVendorResponse {
    return TrucksForVendorResponse.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func builder() -> TrucksForVendorResponseBuilder {
    return TrucksForVendorResponse.classBuilder() as TrucksForVendorResponseBuilder
  }
  internal func builder() -> TrucksForVendorResponseBuilder {
    return classBuilder() as TrucksForVendorResponseBuilder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return TrucksForVendorResponseBuilder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return TrucksForVendorResponse.builder()
  }
  internal func toBuilder() -> TrucksForVendorResponseBuilder {
    return TrucksForVendorResponse.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:TrucksForVendorResponse) -> TrucksForVendorResponseBuilder {
    return TrucksForVendorResponse.builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) {
    var trucksElementIndex:Int = 0
    for oneElementtrucks in trucks {
        output += "\(indent) trucks[\(trucksElementIndex)] {\n"
        oneElementtrucks.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent)}\n"
        trucksElementIndex++
    }
    if hasIsNew {
      output += "\(indent) isNew: \(isNew) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          for oneElementtrucks in trucks {
              hashCode = (hashCode &* 31) &+ oneElementtrucks.hashValue
          }
          if hasIsNew {
             hashCode = (hashCode &* 31) &+ isNew.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "TrucksForVendorResponse"
  }
  override internal func className() -> String {
      return "TrucksForVendorResponse"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return TrucksForVendorResponse.self
  }


  //Meta information declaration end

}

final internal class TrucksForVendorResponseBuilder : GeneratedMessageBuilder {
  private var builderResult:TrucksForVendorResponse

  required override internal init () {
     builderResult = TrucksForVendorResponse()
     super.init()
  }
  var trucks:Array<Truck> {
       get {
           return builderResult.trucks
       }
       set (value) {
           builderResult.trucks = value
       }
  }
  internal func clearTrucks() -> TrucksForVendorResponseBuilder {
    builderResult.trucks.removeAll(keepCapacity: false)
    return self
  }
  var hasIsNew:Bool {
       get {
            return builderResult.hasIsNew
       }
  }
  var isNew:Bool {
       get {
            return builderResult.isNew
       }
       set (value) {
           builderResult.hasIsNew = true
           builderResult.isNew = value
       }
  }
  internal func clearIsNew() -> TrucksForVendorResponseBuilder{
       builderResult.hasIsNew = false
       builderResult.isNew = true
       return self
  }
  override internal var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  internal override func clear() -> TrucksForVendorResponseBuilder {
    builderResult = TrucksForVendorResponse()
    return self
  }
  internal override func clone() -> TrucksForVendorResponseBuilder {
    return TrucksForVendorResponse.builderWithPrototype(builderResult)
  }
  internal override func build() -> TrucksForVendorResponse {
       checkInitialized()
       return buildPartial()
  }
  internal func buildPartial() -> TrucksForVendorResponse {
    var returnMe:TrucksForVendorResponse = builderResult
    return returnMe
  }
  internal func mergeFrom(other:TrucksForVendorResponse) -> TrucksForVendorResponseBuilder {
    if (other == TrucksForVendorResponse()) {
     return self
    }
    if !other.trucks.isEmpty  {
       builderResult.trucks += other.trucks
    }
    if other.hasIsNew {
         isNew = other.isNew
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream) ->TrucksForVendorResponseBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TrucksForVendorResponseBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 10 :
        var subBuilder = Truck.builder()
        input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
        trucks += [subBuilder.buildPartial()]

      case 16 :
        isNew = input.readBool()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final internal class TruckProfilesRequest : GeneratedMessage {
  private(set) var hasLatitude:Bool = false
  private(set) var latitude:Double = Double(0)

  private(set) var hasLongitude:Bool = false
  private(set) var longitude:Double = Double(0)

  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !hasLatitude {
      return false
    }
    if !hasLongitude {
      return false
    }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasLatitude {
      output.writeDouble(1, value:latitude)
    }
    if hasLongitude {
      output.writeDouble(2, value:longitude)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasLatitude {
      size += WireFormat.computeDoubleSize(1, value:latitude)
    }
    if hasLongitude {
      size += WireFormat.computeDoubleSize(2, value:longitude)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  internal class func parseFromData(data:[Byte]) -> TruckProfilesRequest {
    return TruckProfilesRequest.builder().mergeFromData(data).build()
  }
  internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TruckProfilesRequest {
    return TruckProfilesRequest.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) -> TruckProfilesRequest {
    return TruckProfilesRequest.builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TruckProfilesRequest {
    return TruckProfilesRequest.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) -> TruckProfilesRequest {
    return TruckProfilesRequest.builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TruckProfilesRequest {
    return TruckProfilesRequest.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func builder() -> TruckProfilesRequestBuilder {
    return TruckProfilesRequest.classBuilder() as TruckProfilesRequestBuilder
  }
  internal func builder() -> TruckProfilesRequestBuilder {
    return classBuilder() as TruckProfilesRequestBuilder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return TruckProfilesRequestBuilder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return TruckProfilesRequest.builder()
  }
  internal func toBuilder() -> TruckProfilesRequestBuilder {
    return TruckProfilesRequest.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:TruckProfilesRequest) -> TruckProfilesRequestBuilder {
    return TruckProfilesRequest.builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) {
    if hasLatitude {
      output += "\(indent) latitude: \(latitude) \n"
    }
    if hasLongitude {
      output += "\(indent) longitude: \(longitude) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasLatitude {
             hashCode = (hashCode &* 31) &+ latitude.hashValue
          }
          if hasLongitude {
             hashCode = (hashCode &* 31) &+ longitude.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "TruckProfilesRequest"
  }
  override internal func className() -> String {
      return "TruckProfilesRequest"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return TruckProfilesRequest.self
  }


  //Meta information declaration end

}

final internal class TruckProfilesRequestBuilder : GeneratedMessageBuilder {
  private var builderResult:TruckProfilesRequest

  required override internal init () {
     builderResult = TruckProfilesRequest()
     super.init()
  }
  var hasLatitude:Bool {
       get {
            return builderResult.hasLatitude
       }
  }
  var latitude:Double {
       get {
            return builderResult.latitude
       }
       set (value) {
           builderResult.hasLatitude = true
           builderResult.latitude = value
       }
  }
  internal func clearLatitude() -> TruckProfilesRequestBuilder{
       builderResult.hasLatitude = false
       builderResult.latitude = Double(0)
       return self
  }
  var hasLongitude:Bool {
       get {
            return builderResult.hasLongitude
       }
  }
  var longitude:Double {
       get {
            return builderResult.longitude
       }
       set (value) {
           builderResult.hasLongitude = true
           builderResult.longitude = value
       }
  }
  internal func clearLongitude() -> TruckProfilesRequestBuilder{
       builderResult.hasLongitude = false
       builderResult.longitude = Double(0)
       return self
  }
  override internal var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  internal override func clear() -> TruckProfilesRequestBuilder {
    builderResult = TruckProfilesRequest()
    return self
  }
  internal override func clone() -> TruckProfilesRequestBuilder {
    return TruckProfilesRequest.builderWithPrototype(builderResult)
  }
  internal override func build() -> TruckProfilesRequest {
       checkInitialized()
       return buildPartial()
  }
  internal func buildPartial() -> TruckProfilesRequest {
    var returnMe:TruckProfilesRequest = builderResult
    return returnMe
  }
  internal func mergeFrom(other:TruckProfilesRequest) -> TruckProfilesRequestBuilder {
    if (other == TruckProfilesRequest()) {
     return self
    }
    if other.hasLatitude {
         latitude = other.latitude
    }
    if other.hasLongitude {
         longitude = other.longitude
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream) ->TruckProfilesRequestBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TruckProfilesRequestBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 9 :
        latitude = input.readDouble()

      case 17 :
        longitude = input.readDouble()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final internal class TruckProfilesResponse : GeneratedMessage {
  private(set) var trucks:Array<Truck>  = Array<Truck>()
  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) {
    for oneElementtrucks in trucks {
        output.writeMessage(1, value:oneElementtrucks)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    for oneElementtrucks in trucks {
        size += WireFormat.computeMessageSize(1, value:oneElementtrucks)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  internal class func parseFromData(data:[Byte]) -> TruckProfilesResponse {
    return TruckProfilesResponse.builder().mergeFromData(data).build()
  }
  internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TruckProfilesResponse {
    return TruckProfilesResponse.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) -> TruckProfilesResponse {
    return TruckProfilesResponse.builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TruckProfilesResponse {
    return TruckProfilesResponse.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) -> TruckProfilesResponse {
    return TruckProfilesResponse.builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TruckProfilesResponse {
    return TruckProfilesResponse.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func builder() -> TruckProfilesResponseBuilder {
    return TruckProfilesResponse.classBuilder() as TruckProfilesResponseBuilder
  }
  internal func builder() -> TruckProfilesResponseBuilder {
    return classBuilder() as TruckProfilesResponseBuilder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return TruckProfilesResponseBuilder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return TruckProfilesResponse.builder()
  }
  internal func toBuilder() -> TruckProfilesResponseBuilder {
    return TruckProfilesResponse.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:TruckProfilesResponse) -> TruckProfilesResponseBuilder {
    return TruckProfilesResponse.builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) {
    var trucksElementIndex:Int = 0
    for oneElementtrucks in trucks {
        output += "\(indent) trucks[\(trucksElementIndex)] {\n"
        oneElementtrucks.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent)}\n"
        trucksElementIndex++
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          for oneElementtrucks in trucks {
              hashCode = (hashCode &* 31) &+ oneElementtrucks.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "TruckProfilesResponse"
  }
  override internal func className() -> String {
      return "TruckProfilesResponse"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return TruckProfilesResponse.self
  }


  //Meta information declaration end

}

final internal class TruckProfilesResponseBuilder : GeneratedMessageBuilder {
  private var builderResult:TruckProfilesResponse

  required override internal init () {
     builderResult = TruckProfilesResponse()
     super.init()
  }
  var trucks:Array<Truck> {
       get {
           return builderResult.trucks
       }
       set (value) {
           builderResult.trucks = value
       }
  }
  internal func clearTrucks() -> TruckProfilesResponseBuilder {
    builderResult.trucks.removeAll(keepCapacity: false)
    return self
  }
  override internal var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  internal override func clear() -> TruckProfilesResponseBuilder {
    builderResult = TruckProfilesResponse()
    return self
  }
  internal override func clone() -> TruckProfilesResponseBuilder {
    return TruckProfilesResponse.builderWithPrototype(builderResult)
  }
  internal override func build() -> TruckProfilesResponse {
       checkInitialized()
       return buildPartial()
  }
  internal func buildPartial() -> TruckProfilesResponse {
    var returnMe:TruckProfilesResponse = builderResult
    return returnMe
  }
  internal func mergeFrom(other:TruckProfilesResponse) -> TruckProfilesResponseBuilder {
    if (other == TruckProfilesResponse()) {
     return self
    }
    if !other.trucks.isEmpty  {
       builderResult.trucks += other.trucks
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream) ->TruckProfilesResponseBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TruckProfilesResponseBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 10 :
        var subBuilder = Truck.builder()
        input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
        trucks += [subBuilder.buildPartial()]

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final internal class ModifyTruckRequest : GeneratedMessage {
  private(set) var hasId:Bool = false
  private(set) var id:String = ""

  private(set) var hasName:Bool = false
  private(set) var name:String = ""

  private(set) var hasPrimaryColor:Bool = false
  private(set) var primaryColor:String = ""

  private(set) var hasSecondaryColor:Bool = false
  private(set) var secondaryColor:String = ""

  private(set) var keywords:Array<String> = Array<String>()
  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasId {
      output.writeString(1, value:id)
    }
    if hasName {
      output.writeString(2, value:name)
    }
    if !keywords.isEmpty {
      for oneValuekeywords in keywords {
        output.writeString(3, value:oneValuekeywords)
      }
    }
    if hasPrimaryColor {
      output.writeString(4, value:primaryColor)
    }
    if hasSecondaryColor {
      output.writeString(5, value:secondaryColor)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasId {
      size += WireFormat.computeStringSize(1, value:id)
    }
    if hasName {
      size += WireFormat.computeStringSize(2, value:name)
    }
    var dataSizeKeywords:Int32 = 0
    for oneValuekeywords in keywords {
        dataSizeKeywords += WireFormat.computeStringSizeNoTag(oneValuekeywords)
    }
    size += dataSizeKeywords
    size += 1 * Int32(keywords.count)
    if hasPrimaryColor {
      size += WireFormat.computeStringSize(4, value:primaryColor)
    }
    if hasSecondaryColor {
      size += WireFormat.computeStringSize(5, value:secondaryColor)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  internal class func parseFromData(data:[Byte]) -> ModifyTruckRequest {
    return ModifyTruckRequest.builder().mergeFromData(data).build()
  }
  internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ModifyTruckRequest {
    return ModifyTruckRequest.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) -> ModifyTruckRequest {
    return ModifyTruckRequest.builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ModifyTruckRequest {
    return ModifyTruckRequest.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) -> ModifyTruckRequest {
    return ModifyTruckRequest.builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ModifyTruckRequest {
    return ModifyTruckRequest.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func builder() -> ModifyTruckRequestBuilder {
    return ModifyTruckRequest.classBuilder() as ModifyTruckRequestBuilder
  }
  internal func builder() -> ModifyTruckRequestBuilder {
    return classBuilder() as ModifyTruckRequestBuilder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return ModifyTruckRequestBuilder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return ModifyTruckRequest.builder()
  }
  internal func toBuilder() -> ModifyTruckRequestBuilder {
    return ModifyTruckRequest.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:ModifyTruckRequest) -> ModifyTruckRequestBuilder {
    return ModifyTruckRequest.builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) {
    if hasId {
      output += "\(indent) id: \(id) \n"
    }
    if hasName {
      output += "\(indent) name: \(name) \n"
    }
    var keywordsElementIndex:Int = 0
    for oneValuekeywords in keywords  {
        output += "\(indent) keywords[\(keywordsElementIndex)]: \(oneValuekeywords)\n"
        keywordsElementIndex++
    }
    if hasPrimaryColor {
      output += "\(indent) primaryColor: \(primaryColor) \n"
    }
    if hasSecondaryColor {
      output += "\(indent) secondaryColor: \(secondaryColor) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasId {
             hashCode = (hashCode &* 31) &+ id.hashValue
          }
          if hasName {
             hashCode = (hashCode &* 31) &+ name.hashValue
          }
          for oneValuekeywords in keywords {
              hashCode = (hashCode &* 31) &+ oneValuekeywords.hashValue
          }
          if hasPrimaryColor {
             hashCode = (hashCode &* 31) &+ primaryColor.hashValue
          }
          if hasSecondaryColor {
             hashCode = (hashCode &* 31) &+ secondaryColor.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "ModifyTruckRequest"
  }
  override internal func className() -> String {
      return "ModifyTruckRequest"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return ModifyTruckRequest.self
  }


  //Meta information declaration end

}

final internal class ModifyTruckRequestBuilder : GeneratedMessageBuilder {
  private var builderResult:ModifyTruckRequest

  required override internal init () {
     builderResult = ModifyTruckRequest()
     super.init()
  }
  var hasId:Bool {
       get {
            return builderResult.hasId
       }
  }
  var id:String {
       get {
            return builderResult.id
       }
       set (value) {
           builderResult.hasId = true
           builderResult.id = value
       }
  }
  internal func clearId() -> ModifyTruckRequestBuilder{
       builderResult.hasId = false
       builderResult.id = ""
       return self
  }
  var hasName:Bool {
       get {
            return builderResult.hasName
       }
  }
  var name:String {
       get {
            return builderResult.name
       }
       set (value) {
           builderResult.hasName = true
           builderResult.name = value
       }
  }
  internal func clearName() -> ModifyTruckRequestBuilder{
       builderResult.hasName = false
       builderResult.name = ""
       return self
  }
  var keywords:Array<String> {
       get {
           return builderResult.keywords
       }
       set (array) {
           builderResult.keywords = array
       }
  }
  internal func clearKeywords() -> ModifyTruckRequestBuilder {
     builderResult.keywords.removeAll(keepCapacity: false)
     return self
  }
  var hasPrimaryColor:Bool {
       get {
            return builderResult.hasPrimaryColor
       }
  }
  var primaryColor:String {
       get {
            return builderResult.primaryColor
       }
       set (value) {
           builderResult.hasPrimaryColor = true
           builderResult.primaryColor = value
       }
  }
  internal func clearPrimaryColor() -> ModifyTruckRequestBuilder{
       builderResult.hasPrimaryColor = false
       builderResult.primaryColor = ""
       return self
  }
  var hasSecondaryColor:Bool {
       get {
            return builderResult.hasSecondaryColor
       }
  }
  var secondaryColor:String {
       get {
            return builderResult.secondaryColor
       }
       set (value) {
           builderResult.hasSecondaryColor = true
           builderResult.secondaryColor = value
       }
  }
  internal func clearSecondaryColor() -> ModifyTruckRequestBuilder{
       builderResult.hasSecondaryColor = false
       builderResult.secondaryColor = ""
       return self
  }
  override internal var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  internal override func clear() -> ModifyTruckRequestBuilder {
    builderResult = ModifyTruckRequest()
    return self
  }
  internal override func clone() -> ModifyTruckRequestBuilder {
    return ModifyTruckRequest.builderWithPrototype(builderResult)
  }
  internal override func build() -> ModifyTruckRequest {
       checkInitialized()
       return buildPartial()
  }
  internal func buildPartial() -> ModifyTruckRequest {
    var returnMe:ModifyTruckRequest = builderResult
    return returnMe
  }
  internal func mergeFrom(other:ModifyTruckRequest) -> ModifyTruckRequestBuilder {
    if (other == ModifyTruckRequest()) {
     return self
    }
    if other.hasId {
         id = other.id
    }
    if other.hasName {
         name = other.name
    }
    if !other.keywords.isEmpty {
        builderResult.keywords += other.keywords
    }
    if other.hasPrimaryColor {
         primaryColor = other.primaryColor
    }
    if other.hasSecondaryColor {
         secondaryColor = other.secondaryColor
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ModifyTruckRequestBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ModifyTruckRequestBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 10 :
        id = input.readString()

      case 18 :
        name = input.readString()

      case 26 :
        keywords += [input.readString()]

      case 34 :
        primaryColor = input.readString()

      case 42 :
        secondaryColor = input.readString()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final internal class Truck : GeneratedMessage {
  private(set) var hasId:Bool = false
  private(set) var id:String = ""

  private(set) var hasName:Bool = false
  private(set) var name:String = ""

  private(set) var hasImageUrl:Bool = false
  private(set) var imageUrl:String = ""

  private(set) var hasPrimaryColor:Bool = false
  private(set) var primaryColor:String = ""

  private(set) var hasSecondaryColor:Bool = false
  private(set) var secondaryColor:String = ""

  private(set) var keywords:Array<String> = Array<String>()
  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasId {
      output.writeString(1, value:id)
    }
    if hasName {
      output.writeString(2, value:name)
    }
    if hasImageUrl {
      output.writeString(3, value:imageUrl)
    }
    if !keywords.isEmpty {
      for oneValuekeywords in keywords {
        output.writeString(4, value:oneValuekeywords)
      }
    }
    if hasPrimaryColor {
      output.writeString(5, value:primaryColor)
    }
    if hasSecondaryColor {
      output.writeString(6, value:secondaryColor)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasId {
      size += WireFormat.computeStringSize(1, value:id)
    }
    if hasName {
      size += WireFormat.computeStringSize(2, value:name)
    }
    if hasImageUrl {
      size += WireFormat.computeStringSize(3, value:imageUrl)
    }
    var dataSizeKeywords:Int32 = 0
    for oneValuekeywords in keywords {
        dataSizeKeywords += WireFormat.computeStringSizeNoTag(oneValuekeywords)
    }
    size += dataSizeKeywords
    size += 1 * Int32(keywords.count)
    if hasPrimaryColor {
      size += WireFormat.computeStringSize(5, value:primaryColor)
    }
    if hasSecondaryColor {
      size += WireFormat.computeStringSize(6, value:secondaryColor)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  internal class func parseFromData(data:[Byte]) -> Truck {
    return Truck.builder().mergeFromData(data).build()
  }
  internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> Truck {
    return Truck.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) -> Truck {
    return Truck.builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Truck {
    return Truck.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) -> Truck {
    return Truck.builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Truck {
    return Truck.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func builder() -> TruckBuilder {
    return Truck.classBuilder() as TruckBuilder
  }
  internal func builder() -> TruckBuilder {
    return classBuilder() as TruckBuilder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return TruckBuilder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return Truck.builder()
  }
  internal func toBuilder() -> TruckBuilder {
    return Truck.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:Truck) -> TruckBuilder {
    return Truck.builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) {
    if hasId {
      output += "\(indent) id: \(id) \n"
    }
    if hasName {
      output += "\(indent) name: \(name) \n"
    }
    if hasImageUrl {
      output += "\(indent) imageUrl: \(imageUrl) \n"
    }
    var keywordsElementIndex:Int = 0
    for oneValuekeywords in keywords  {
        output += "\(indent) keywords[\(keywordsElementIndex)]: \(oneValuekeywords)\n"
        keywordsElementIndex++
    }
    if hasPrimaryColor {
      output += "\(indent) primaryColor: \(primaryColor) \n"
    }
    if hasSecondaryColor {
      output += "\(indent) secondaryColor: \(secondaryColor) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasId {
             hashCode = (hashCode &* 31) &+ id.hashValue
          }
          if hasName {
             hashCode = (hashCode &* 31) &+ name.hashValue
          }
          if hasImageUrl {
             hashCode = (hashCode &* 31) &+ imageUrl.hashValue
          }
          for oneValuekeywords in keywords {
              hashCode = (hashCode &* 31) &+ oneValuekeywords.hashValue
          }
          if hasPrimaryColor {
             hashCode = (hashCode &* 31) &+ primaryColor.hashValue
          }
          if hasSecondaryColor {
             hashCode = (hashCode &* 31) &+ secondaryColor.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "Truck"
  }
  override internal func className() -> String {
      return "Truck"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return Truck.self
  }


  //Meta information declaration end

}

final internal class TruckBuilder : GeneratedMessageBuilder {
  private var builderResult:Truck

  required override internal init () {
     builderResult = Truck()
     super.init()
  }
  var hasId:Bool {
       get {
            return builderResult.hasId
       }
  }
  var id:String {
       get {
            return builderResult.id
       }
       set (value) {
           builderResult.hasId = true
           builderResult.id = value
       }
  }
  internal func clearId() -> TruckBuilder{
       builderResult.hasId = false
       builderResult.id = ""
       return self
  }
  var hasName:Bool {
       get {
            return builderResult.hasName
       }
  }
  var name:String {
       get {
            return builderResult.name
       }
       set (value) {
           builderResult.hasName = true
           builderResult.name = value
       }
  }
  internal func clearName() -> TruckBuilder{
       builderResult.hasName = false
       builderResult.name = ""
       return self
  }
  var hasImageUrl:Bool {
       get {
            return builderResult.hasImageUrl
       }
  }
  var imageUrl:String {
       get {
            return builderResult.imageUrl
       }
       set (value) {
           builderResult.hasImageUrl = true
           builderResult.imageUrl = value
       }
  }
  internal func clearImageUrl() -> TruckBuilder{
       builderResult.hasImageUrl = false
       builderResult.imageUrl = ""
       return self
  }
  var keywords:Array<String> {
       get {
           return builderResult.keywords
       }
       set (array) {
           builderResult.keywords = array
       }
  }
  internal func clearKeywords() -> TruckBuilder {
     builderResult.keywords.removeAll(keepCapacity: false)
     return self
  }
  var hasPrimaryColor:Bool {
       get {
            return builderResult.hasPrimaryColor
       }
  }
  var primaryColor:String {
       get {
            return builderResult.primaryColor
       }
       set (value) {
           builderResult.hasPrimaryColor = true
           builderResult.primaryColor = value
       }
  }
  internal func clearPrimaryColor() -> TruckBuilder{
       builderResult.hasPrimaryColor = false
       builderResult.primaryColor = ""
       return self
  }
  var hasSecondaryColor:Bool {
       get {
            return builderResult.hasSecondaryColor
       }
  }
  var secondaryColor:String {
       get {
            return builderResult.secondaryColor
       }
       set (value) {
           builderResult.hasSecondaryColor = true
           builderResult.secondaryColor = value
       }
  }
  internal func clearSecondaryColor() -> TruckBuilder{
       builderResult.hasSecondaryColor = false
       builderResult.secondaryColor = ""
       return self
  }
  override internal var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  internal override func clear() -> TruckBuilder {
    builderResult = Truck()
    return self
  }
  internal override func clone() -> TruckBuilder {
    return Truck.builderWithPrototype(builderResult)
  }
  internal override func build() -> Truck {
       checkInitialized()
       return buildPartial()
  }
  internal func buildPartial() -> Truck {
    var returnMe:Truck = builderResult
    return returnMe
  }
  internal func mergeFrom(other:Truck) -> TruckBuilder {
    if (other == Truck()) {
     return self
    }
    if other.hasId {
         id = other.id
    }
    if other.hasName {
         name = other.name
    }
    if other.hasImageUrl {
         imageUrl = other.imageUrl
    }
    if !other.keywords.isEmpty {
        builderResult.keywords += other.keywords
    }
    if other.hasPrimaryColor {
         primaryColor = other.primaryColor
    }
    if other.hasSecondaryColor {
         secondaryColor = other.secondaryColor
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream) ->TruckBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TruckBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 10 :
        id = input.readString()

      case 18 :
        name = input.readString()

      case 26 :
        imageUrl = input.readString()

      case 34 :
        keywords += [input.readString()]

      case 42 :
        primaryColor = input.readString()

      case 50 :
        secondaryColor = input.readString()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final internal class ServingModeRequest : GeneratedMessage {
  private(set) var hasTruckId:Bool = false
  private(set) var truckId:String = ""

  private(set) var hasIsInServingMode:Bool = false
  private(set) var isInServingMode:Bool = false

  private(set) var hasTruckLatitude:Bool = false
  private(set) var truckLatitude:Double = Double(0)

  private(set) var hasTruckLongitude:Bool = false
  private(set) var truckLongitude:Double = Double(0)

  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !hasTruckId {
      return false
    }
    if !hasIsInServingMode {
      return false
    }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasTruckId {
      output.writeString(1, value:truckId)
    }
    if hasIsInServingMode {
      output.writeBool(2, value:isInServingMode)
    }
    if hasTruckLatitude {
      output.writeDouble(3, value:truckLatitude)
    }
    if hasTruckLongitude {
      output.writeDouble(4, value:truckLongitude)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasTruckId {
      size += WireFormat.computeStringSize(1, value:truckId)
    }
    if hasIsInServingMode {
      size += WireFormat.computeBoolSize(2, value:isInServingMode)
    }
    if hasTruckLatitude {
      size += WireFormat.computeDoubleSize(3, value:truckLatitude)
    }
    if hasTruckLongitude {
      size += WireFormat.computeDoubleSize(4, value:truckLongitude)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  internal class func parseFromData(data:[Byte]) -> ServingModeRequest {
    return ServingModeRequest.builder().mergeFromData(data).build()
  }
  internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ServingModeRequest {
    return ServingModeRequest.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) -> ServingModeRequest {
    return ServingModeRequest.builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ServingModeRequest {
    return ServingModeRequest.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) -> ServingModeRequest {
    return ServingModeRequest.builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ServingModeRequest {
    return ServingModeRequest.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func builder() -> ServingModeRequestBuilder {
    return ServingModeRequest.classBuilder() as ServingModeRequestBuilder
  }
  internal func builder() -> ServingModeRequestBuilder {
    return classBuilder() as ServingModeRequestBuilder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return ServingModeRequestBuilder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return ServingModeRequest.builder()
  }
  internal func toBuilder() -> ServingModeRequestBuilder {
    return ServingModeRequest.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:ServingModeRequest) -> ServingModeRequestBuilder {
    return ServingModeRequest.builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) {
    if hasTruckId {
      output += "\(indent) truckId: \(truckId) \n"
    }
    if hasIsInServingMode {
      output += "\(indent) isInServingMode: \(isInServingMode) \n"
    }
    if hasTruckLatitude {
      output += "\(indent) truckLatitude: \(truckLatitude) \n"
    }
    if hasTruckLongitude {
      output += "\(indent) truckLongitude: \(truckLongitude) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasTruckId {
             hashCode = (hashCode &* 31) &+ truckId.hashValue
          }
          if hasIsInServingMode {
             hashCode = (hashCode &* 31) &+ isInServingMode.hashValue
          }
          if hasTruckLatitude {
             hashCode = (hashCode &* 31) &+ truckLatitude.hashValue
          }
          if hasTruckLongitude {
             hashCode = (hashCode &* 31) &+ truckLongitude.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "ServingModeRequest"
  }
  override internal func className() -> String {
      return "ServingModeRequest"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return ServingModeRequest.self
  }


  //Meta information declaration end

}

final internal class ServingModeRequestBuilder : GeneratedMessageBuilder {
  private var builderResult:ServingModeRequest

  required override internal init () {
     builderResult = ServingModeRequest()
     super.init()
  }
  var hasTruckId:Bool {
       get {
            return builderResult.hasTruckId
       }
  }
  var truckId:String {
       get {
            return builderResult.truckId
       }
       set (value) {
           builderResult.hasTruckId = true
           builderResult.truckId = value
       }
  }
  internal func clearTruckId() -> ServingModeRequestBuilder{
       builderResult.hasTruckId = false
       builderResult.truckId = ""
       return self
  }
  var hasIsInServingMode:Bool {
       get {
            return builderResult.hasIsInServingMode
       }
  }
  var isInServingMode:Bool {
       get {
            return builderResult.isInServingMode
       }
       set (value) {
           builderResult.hasIsInServingMode = true
           builderResult.isInServingMode = value
       }
  }
  internal func clearIsInServingMode() -> ServingModeRequestBuilder{
       builderResult.hasIsInServingMode = false
       builderResult.isInServingMode = false
       return self
  }
  var hasTruckLatitude:Bool {
       get {
            return builderResult.hasTruckLatitude
       }
  }
  var truckLatitude:Double {
       get {
            return builderResult.truckLatitude
       }
       set (value) {
           builderResult.hasTruckLatitude = true
           builderResult.truckLatitude = value
       }
  }
  internal func clearTruckLatitude() -> ServingModeRequestBuilder{
       builderResult.hasTruckLatitude = false
       builderResult.truckLatitude = Double(0)
       return self
  }
  var hasTruckLongitude:Bool {
       get {
            return builderResult.hasTruckLongitude
       }
  }
  var truckLongitude:Double {
       get {
            return builderResult.truckLongitude
       }
       set (value) {
           builderResult.hasTruckLongitude = true
           builderResult.truckLongitude = value
       }
  }
  internal func clearTruckLongitude() -> ServingModeRequestBuilder{
       builderResult.hasTruckLongitude = false
       builderResult.truckLongitude = Double(0)
       return self
  }
  override internal var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  internal override func clear() -> ServingModeRequestBuilder {
    builderResult = ServingModeRequest()
    return self
  }
  internal override func clone() -> ServingModeRequestBuilder {
    return ServingModeRequest.builderWithPrototype(builderResult)
  }
  internal override func build() -> ServingModeRequest {
       checkInitialized()
       return buildPartial()
  }
  internal func buildPartial() -> ServingModeRequest {
    var returnMe:ServingModeRequest = builderResult
    return returnMe
  }
  internal func mergeFrom(other:ServingModeRequest) -> ServingModeRequestBuilder {
    if (other == ServingModeRequest()) {
     return self
    }
    if other.hasTruckId {
         truckId = other.truckId
    }
    if other.hasIsInServingMode {
         isInServingMode = other.isInServingMode
    }
    if other.hasTruckLatitude {
         truckLatitude = other.truckLatitude
    }
    if other.hasTruckLongitude {
         truckLongitude = other.truckLongitude
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ServingModeRequestBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ServingModeRequestBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 10 :
        truckId = input.readString()

      case 16 :
        isInServingMode = input.readBool()

      case 25 :
        truckLatitude = input.readDouble()

      case 33 :
        truckLongitude = input.readDouble()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final internal class ServingModeResponse : GeneratedMessage {
  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) {
    unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  internal class func parseFromData(data:[Byte]) -> ServingModeResponse {
    return ServingModeResponse.builder().mergeFromData(data).build()
  }
  internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ServingModeResponse {
    return ServingModeResponse.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) -> ServingModeResponse {
    return ServingModeResponse.builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ServingModeResponse {
    return ServingModeResponse.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) -> ServingModeResponse {
    return ServingModeResponse.builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ServingModeResponse {
    return ServingModeResponse.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func builder() -> ServingModeResponseBuilder {
    return ServingModeResponse.classBuilder() as ServingModeResponseBuilder
  }
  internal func builder() -> ServingModeResponseBuilder {
    return classBuilder() as ServingModeResponseBuilder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return ServingModeResponseBuilder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return ServingModeResponse.builder()
  }
  internal func toBuilder() -> ServingModeResponseBuilder {
    return ServingModeResponse.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:ServingModeResponse) -> ServingModeResponseBuilder {
    return ServingModeResponse.builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) {
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "ServingModeResponse"
  }
  override internal func className() -> String {
      return "ServingModeResponse"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return ServingModeResponse.self
  }


  //Meta information declaration end

}

final internal class ServingModeResponseBuilder : GeneratedMessageBuilder {
  private var builderResult:ServingModeResponse

  required override internal init () {
     builderResult = ServingModeResponse()
     super.init()
  }
  override internal var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  internal override func clear() -> ServingModeResponseBuilder {
    builderResult = ServingModeResponse()
    return self
  }
  internal override func clone() -> ServingModeResponseBuilder {
    return ServingModeResponse.builderWithPrototype(builderResult)
  }
  internal override func build() -> ServingModeResponse {
       checkInitialized()
       return buildPartial()
  }
  internal func buildPartial() -> ServingModeResponse {
    var returnMe:ServingModeResponse = builderResult
    return returnMe
  }
  internal func mergeFrom(other:ServingModeResponse) -> ServingModeResponseBuilder {
    if (other == ServingModeResponse()) {
     return self
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ServingModeResponseBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ServingModeResponseBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

//Class extensions: NSData


internal extension ActiveTrucksRequest {
    class func parseFromNSData(data:NSData) -> ActiveTrucksRequest {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ActiveTrucksRequest.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ActiveTrucksRequest {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ActiveTrucksRequest.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
internal extension ActiveTrucksResponse.Truck {
    class func parseFromNSData(data:NSData) -> ActiveTrucksResponse.Truck {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ActiveTrucksResponse.Truck.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ActiveTrucksResponse.Truck {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ActiveTrucksResponse.Truck.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
internal extension ActiveTrucksResponse {
    class func parseFromNSData(data:NSData) -> ActiveTrucksResponse {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ActiveTrucksResponse.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ActiveTrucksResponse {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ActiveTrucksResponse.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
internal extension TrucksForVendorRequest {
    class func parseFromNSData(data:NSData) -> TrucksForVendorRequest {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return TrucksForVendorRequest.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> TrucksForVendorRequest {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return TrucksForVendorRequest.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
internal extension TrucksForVendorResponse {
    class func parseFromNSData(data:NSData) -> TrucksForVendorResponse {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return TrucksForVendorResponse.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> TrucksForVendorResponse {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return TrucksForVendorResponse.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
internal extension TruckProfilesRequest {
    class func parseFromNSData(data:NSData) -> TruckProfilesRequest {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return TruckProfilesRequest.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> TruckProfilesRequest {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return TruckProfilesRequest.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
internal extension TruckProfilesResponse {
    class func parseFromNSData(data:NSData) -> TruckProfilesResponse {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return TruckProfilesResponse.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> TruckProfilesResponse {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return TruckProfilesResponse.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
internal extension ModifyTruckRequest {
    class func parseFromNSData(data:NSData) -> ModifyTruckRequest {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ModifyTruckRequest.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ModifyTruckRequest {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ModifyTruckRequest.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
internal extension Truck {
    class func parseFromNSData(data:NSData) -> Truck {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return Truck.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> Truck {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return Truck.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
internal extension ServingModeRequest {
    class func parseFromNSData(data:NSData) -> ServingModeRequest {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ServingModeRequest.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ServingModeRequest {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ServingModeRequest.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
internal extension ServingModeResponse {
    class func parseFromNSData(data:NSData) -> ServingModeResponse {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ServingModeResponse.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ServingModeResponse {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ServingModeResponse.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}

// @@protoc_insertion_point(global_scope)
