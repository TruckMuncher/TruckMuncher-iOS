// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
import ProtocolBuffers

private class TrucksRoot {
var extensionRegistry:ExtensionRegistry

init() {
extensionRegistry = ExtensionRegistry()
registerAllExtensions(extensionRegistry)
}
func registerAllExtensions(registry:ExtensionRegistry) {
}
}

func == (lhs: ActiveTrucksRequest, rhs: ActiveTrucksRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasLatitude == rhs.hasLatitude) && (!lhs.hasLatitude || lhs.latitude == rhs.latitude)
  fieldCheck = fieldCheck && (lhs.hasLongitude == rhs.hasLongitude) && (!lhs.hasLongitude || lhs.longitude == rhs.longitude)
  fieldCheck = fieldCheck && (lhs.hasSearchQuery == rhs.hasSearchQuery) && (!lhs.hasSearchQuery || lhs.searchQuery == rhs.searchQuery)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: ActiveTrucksResponse.Truck, rhs: ActiveTrucksResponse.Truck) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasLatitude == rhs.hasLatitude) && (!lhs.hasLatitude || lhs.latitude == rhs.latitude)
  fieldCheck = fieldCheck && (lhs.hasLongitude == rhs.hasLongitude) && (!lhs.hasLongitude || lhs.longitude == rhs.longitude)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: ActiveTrucksResponse, rhs: ActiveTrucksResponse) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.trucks == rhs.trucks)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: TrucksForVendorRequest, rhs: TrucksForVendorRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: TrucksForVendorResponse, rhs: TrucksForVendorResponse) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.trucks == rhs.trucks)
  fieldCheck = fieldCheck && (lhs.hasIsNew == rhs.hasIsNew) && (!lhs.hasIsNew || lhs.isNew == rhs.isNew)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: TruckProfilesRequest, rhs: TruckProfilesRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasLatitude == rhs.hasLatitude) && (!lhs.hasLatitude || lhs.latitude == rhs.latitude)
  fieldCheck = fieldCheck && (lhs.hasLongitude == rhs.hasLongitude) && (!lhs.hasLongitude || lhs.longitude == rhs.longitude)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: TruckProfilesResponse, rhs: TruckProfilesResponse) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.trucks == rhs.trucks)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: Truck, rhs: Truck) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasImageUrl == rhs.hasImageUrl) && (!lhs.hasImageUrl || lhs.imageUrl == rhs.imageUrl)
  fieldCheck = fieldCheck && (lhs.keywords == rhs.keywords)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: ServingModeRequest, rhs: ServingModeRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasTruckId == rhs.hasTruckId) && (!lhs.hasTruckId || lhs.truckId == rhs.truckId)
  fieldCheck = fieldCheck && (lhs.hasIsInServingMode == rhs.hasIsInServingMode) && (!lhs.hasIsInServingMode || lhs.isInServingMode == rhs.isInServingMode)
  fieldCheck = fieldCheck && (lhs.hasTruckLatitude == rhs.hasTruckLatitude) && (!lhs.hasTruckLatitude || lhs.truckLatitude == rhs.truckLatitude)
  fieldCheck = fieldCheck && (lhs.hasTruckLongitude == rhs.hasTruckLongitude) && (!lhs.hasTruckLongitude || lhs.truckLongitude == rhs.truckLongitude)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

func == (lhs: ServingModeResponse, rhs: ServingModeResponse) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

final class ActiveTrucksRequest : GeneratedMessage {
  private(set) var hasLatitude:Bool = false
  private(set) var latitude:Double = 0

  private(set) var hasLongitude:Bool = false
  private(set) var longitude:Double = 0

  private(set) var hasSearchQuery:Bool = false
  private(set) var searchQuery:String = ""

  required init() {
       super.init()
  }
  override func isInitialized() -> Bool {
    if !hasLatitude {
      return false
    }
    if !hasLongitude {
      return false
    }
   return true
  }
  override func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasLatitude {
      output.writeDouble(1, value:latitude)
    }
    if hasLongitude {
      output.writeDouble(2, value:longitude)
    }
    if hasSearchQuery {
      output.writeString(3, value:searchQuery)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasLatitude {
      size += WireFormat.computeDoubleSize(1, value:latitude)
    }
    if hasLongitude {
      size += WireFormat.computeDoubleSize(2, value:longitude)
    }
    if hasSearchQuery {
      size += WireFormat.computeStringSize(3, value:searchQuery)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> ActiveTrucksRequest {
    return ActiveTrucksRequest.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ActiveTrucksRequest {
    return ActiveTrucksRequest.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> ActiveTrucksRequest {
    return ActiveTrucksRequest.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ActiveTrucksRequest {
    return ActiveTrucksRequest.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> ActiveTrucksRequest {
    return ActiveTrucksRequest.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ActiveTrucksRequest {
    return ActiveTrucksRequest.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> ActiveTrucksRequestBuilder {
    return ActiveTrucksRequestBuilder()
  }
  class func builderWithPrototype(prototype:ActiveTrucksRequest) -> ActiveTrucksRequestBuilder {
    return ActiveTrucksRequest.builder().mergeFrom(prototype)
  }
  func builder() -> ActiveTrucksRequestBuilder {
    return ActiveTrucksRequest.builder()
  }
  func toBuilder() -> ActiveTrucksRequestBuilder {
    return ActiveTrucksRequest.builderWithPrototype(self)
  }
  override func writeDescriptionTo(inout output:String, indent:String) {
    if hasLatitude {
      output += "\(indent) latitude: \(latitude) \n"
    }
    if hasLongitude {
      output += "\(indent) longitude: \(longitude) \n"
    }
    if hasSearchQuery {
      output += "\(indent) searchQuery: \(searchQuery) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasLatitude {
             hashCode = (hashCode &* 31) &+ latitude.hashValue
          }
          if hasLongitude {
             hashCode = (hashCode &* 31) &+ longitude.hashValue
          }
          if hasSearchQuery {
             hashCode = (hashCode &* 31) &+ searchQuery.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }
}

final class ActiveTrucksRequestBuilder : GeneratedMessageBuilder {
  private var builderResult:ActiveTrucksRequest

  required override init () {
     builderResult = ActiveTrucksRequest()
     super.init()
  }
  var hasLatitude:Bool {
       get {
            return builderResult.hasLatitude
       }
  }
  var latitude:Double {
       get {
            return builderResult.latitude
       }
       set (value) {
           builderResult.hasLatitude = true
           builderResult.latitude = value
       }
  }
  func clearLatitude() -> ActiveTrucksRequestBuilder{
       builderResult.hasLatitude = false
       builderResult.latitude = 0
       return self
  }
  var hasLongitude:Bool {
       get {
            return builderResult.hasLongitude
       }
  }
  var longitude:Double {
       get {
            return builderResult.longitude
       }
       set (value) {
           builderResult.hasLongitude = true
           builderResult.longitude = value
       }
  }
  func clearLongitude() -> ActiveTrucksRequestBuilder{
       builderResult.hasLongitude = false
       builderResult.longitude = 0
       return self
  }
  var hasSearchQuery:Bool {
       get {
            return builderResult.hasSearchQuery
       }
  }
  var searchQuery:String {
       get {
            return builderResult.searchQuery
       }
       set (value) {
           builderResult.hasSearchQuery = true
           builderResult.searchQuery = value
       }
  }
  func clearSearchQuery() -> ActiveTrucksRequestBuilder{
       builderResult.hasSearchQuery = false
       builderResult.searchQuery = ""
       return self
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> ActiveTrucksRequestBuilder {
    builderResult = ActiveTrucksRequest()
    return self
  }
  override func clone() -> ActiveTrucksRequestBuilder {
    return ActiveTrucksRequest.builderWithPrototype(builderResult)
  }
  func build() -> ActiveTrucksRequest {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> ActiveTrucksRequest {
    var returnMe:ActiveTrucksRequest = builderResult
    return returnMe
  }
  func mergeFrom(other:ActiveTrucksRequest) -> ActiveTrucksRequestBuilder {
    if (other == ActiveTrucksRequest()) {
      return self
    }
  if other.hasLatitude {
       latitude = other.latitude
  }
  if other.hasLongitude {
       longitude = other.longitude
  }
  if other.hasSearchQuery {
       searchQuery = other.searchQuery
  }
      mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->ActiveTrucksRequestBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ActiveTrucksRequestBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 9 :
        latitude = input.readDouble()

      case 17 :
        longitude = input.readDouble()

      case 26 :
        searchQuery = input.readString()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final class ActiveTrucksResponse : GeneratedMessage {


  //Nested type declaration start 

    final class Truck : GeneratedMessage {
      private(set) var hasId:Bool = false
      private(set) var id:String = ""

      private(set) var hasLatitude:Bool = false
      private(set) var latitude:Double = 0

      private(set) var hasLongitude:Bool = false
      private(set) var longitude:Double = 0

      required init() {
           super.init()
      }
      override func isInitialized() -> Bool {
        if !hasId {
          return false
        }
        if !hasLatitude {
          return false
        }
        if !hasLongitude {
          return false
        }
       return true
      }
      override func writeToCodedOutputStream(output:CodedOutputStream) {
        if hasId {
          output.writeString(1, value:id)
        }
        if hasLatitude {
          output.writeDouble(2, value:latitude)
        }
        if hasLongitude {
          output.writeDouble(3, value:longitude)
        }
        unknownFields.writeToCodedOutputStream(output)
      }
      override func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        if hasId {
          size += WireFormat.computeStringSize(1, value:id)
        }
        if hasLatitude {
          size += WireFormat.computeDoubleSize(2, value:latitude)
        }
        if hasLongitude {
          size += WireFormat.computeDoubleSize(3, value:longitude)
        }
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      class func parseFromData(data:[Byte]) -> ActiveTrucksResponse.Truck {
        return ActiveTrucksResponse.Truck.builder().mergeFromData(data).build()
      }
      class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ActiveTrucksResponse.Truck {
        return ActiveTrucksResponse.Truck.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      class func parseFromInputStream(input:NSInputStream) -> ActiveTrucksResponse.Truck {
        return ActiveTrucksResponse.Truck.builder().mergeFromInputStream(input).build()
      }
      class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ActiveTrucksResponse.Truck {
        return ActiveTrucksResponse.Truck.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      class func parseFromCodedInputStream(input:CodedInputStream) -> ActiveTrucksResponse.Truck {
        return ActiveTrucksResponse.Truck.builder().mergeFromCodedInputStream(input).build()
      }
      class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ActiveTrucksResponse.Truck {
        return ActiveTrucksResponse.Truck.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      class func builder() -> TruckBuilder {
        return TruckBuilder()
      }
      class func builderWithPrototype(prototype:Truck) -> TruckBuilder {
        return Truck.builder().mergeFrom(prototype)
      }
      func builder() -> TruckBuilder {
        return Truck.builder()
      }
      func toBuilder() -> TruckBuilder {
        return Truck.builderWithPrototype(self)
      }
      override func writeDescriptionTo(inout output:String, indent:String) {
        if hasId {
          output += "\(indent) id: \(id) \n"
        }
        if hasLatitude {
          output += "\(indent) latitude: \(latitude) \n"
        }
        if hasLongitude {
          output += "\(indent) longitude: \(longitude) \n"
        }
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override var hashValue:Int {
          get {
              var hashCode:Int = 7
              if hasId {
                 hashCode = (hashCode &* 31) &+ id.hashValue
              }
              if hasLatitude {
                 hashCode = (hashCode &* 31) &+ latitude.hashValue
              }
              if hasLongitude {
                 hashCode = (hashCode &* 31) &+ longitude.hashValue
              }
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }
    }

    final class TruckBuilder : GeneratedMessageBuilder {
      private var builderResult:ActiveTrucksResponse.Truck

      required override init () {
         builderResult = ActiveTrucksResponse.Truck()
         super.init()
      }
      var hasId:Bool {
           get {
                return builderResult.hasId
           }
      }
      var id:String {
           get {
                return builderResult.id
           }
           set (value) {
               builderResult.hasId = true
               builderResult.id = value
           }
      }
      func clearId() -> ActiveTrucksResponse.TruckBuilder{
           builderResult.hasId = false
           builderResult.id = ""
           return self
      }
      var hasLatitude:Bool {
           get {
                return builderResult.hasLatitude
           }
      }
      var latitude:Double {
           get {
                return builderResult.latitude
           }
           set (value) {
               builderResult.hasLatitude = true
               builderResult.latitude = value
           }
      }
      func clearLatitude() -> ActiveTrucksResponse.TruckBuilder{
           builderResult.hasLatitude = false
           builderResult.latitude = 0
           return self
      }
      var hasLongitude:Bool {
           get {
                return builderResult.hasLongitude
           }
      }
      var longitude:Double {
           get {
                return builderResult.longitude
           }
           set (value) {
               builderResult.hasLongitude = true
               builderResult.longitude = value
           }
      }
      func clearLongitude() -> ActiveTrucksResponse.TruckBuilder{
           builderResult.hasLongitude = false
           builderResult.longitude = 0
           return self
      }
      override var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      override func clear() -> ActiveTrucksResponse.TruckBuilder {
        builderResult = ActiveTrucksResponse.Truck()
        return self
      }
      override func clone() -> ActiveTrucksResponse.TruckBuilder {
        return ActiveTrucksResponse.Truck.builderWithPrototype(builderResult)
      }
      func build() -> ActiveTrucksResponse.Truck {
           checkInitialized()
           return buildPartial()
      }
      func buildPartial() -> ActiveTrucksResponse.Truck {
        var returnMe:ActiveTrucksResponse.Truck = builderResult
        return returnMe
      }
      func mergeFrom(other:ActiveTrucksResponse.Truck) -> ActiveTrucksResponse.TruckBuilder {
        if (other == ActiveTrucksResponse.Truck()) {
          return self
        }
      if other.hasId {
           id = other.id
      }
      if other.hasLatitude {
           latitude = other.latitude
      }
      if other.hasLongitude {
           longitude = other.longitude
      }
          mergeUnknownFields(other.unknownFields)
        return self
      }
      override func mergeFromCodedInputStream(input:CodedInputStream) ->ActiveTrucksResponse.TruckBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ActiveTrucksResponse.TruckBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          case 10 :
            id = input.readString()

          case 17 :
            latitude = input.readDouble()

          case 25 :
            longitude = input.readDouble()

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end 

  private(set) var trucks:Array<ActiveTrucksResponse.Truck>  = Array<ActiveTrucksResponse.Truck>()
  required init() {
       super.init()
  }
  override func isInitialized() -> Bool {
    var isInittrucks:Bool = true
    for element in trucks {
        if (!element.isInitialized()) {
            isInittrucks = false
            break 
        }
    }
    if !isInittrucks {
     return isInittrucks
     }
   return true
  }
  override func writeToCodedOutputStream(output:CodedOutputStream) {
    for element in trucks {
        output.writeMessage(1, value:element)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    for element in trucks {
        size += WireFormat.computeMessageSize(1, value:element)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> ActiveTrucksResponse {
    return ActiveTrucksResponse.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ActiveTrucksResponse {
    return ActiveTrucksResponse.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> ActiveTrucksResponse {
    return ActiveTrucksResponse.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ActiveTrucksResponse {
    return ActiveTrucksResponse.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> ActiveTrucksResponse {
    return ActiveTrucksResponse.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ActiveTrucksResponse {
    return ActiveTrucksResponse.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> ActiveTrucksResponseBuilder {
    return ActiveTrucksResponseBuilder()
  }
  class func builderWithPrototype(prototype:ActiveTrucksResponse) -> ActiveTrucksResponseBuilder {
    return ActiveTrucksResponse.builder().mergeFrom(prototype)
  }
  func builder() -> ActiveTrucksResponseBuilder {
    return ActiveTrucksResponse.builder()
  }
  func toBuilder() -> ActiveTrucksResponseBuilder {
    return ActiveTrucksResponse.builderWithPrototype(self)
  }
  override func writeDescriptionTo(inout output:String, indent:String) {
    var trucksElementIndex:Int = 0
    for element in trucks {
        output += "\(indent) trucks[\(trucksElementIndex)] {\n"
        element.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent)}\n"
        trucksElementIndex++
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override var hashValue:Int {
      get {
          var hashCode:Int = 7
          for element in trucks {
              hashCode = (hashCode &* 31) &+ element.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }
}

final class ActiveTrucksResponseBuilder : GeneratedMessageBuilder {
  private var builderResult:ActiveTrucksResponse

  required override init () {
     builderResult = ActiveTrucksResponse()
     super.init()
  }
  var trucks:Array<ActiveTrucksResponse.Truck> {
       get {
           return builderResult.trucks
       }
       set (value) {
           builderResult.trucks = value
       }
  }
  func clearTrucks() -> ActiveTrucksResponseBuilder {
    builderResult.trucks.removeAll(keepCapacity: false)
    return self
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> ActiveTrucksResponseBuilder {
    builderResult = ActiveTrucksResponse()
    return self
  }
  override func clone() -> ActiveTrucksResponseBuilder {
    return ActiveTrucksResponse.builderWithPrototype(builderResult)
  }
  func build() -> ActiveTrucksResponse {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> ActiveTrucksResponse {
    var returnMe:ActiveTrucksResponse = builderResult
    return returnMe
  }
  func mergeFrom(other:ActiveTrucksResponse) -> ActiveTrucksResponseBuilder {
    if (other == ActiveTrucksResponse()) {
      return self
    }
  if !other.trucks.isEmpty  {
     builderResult.trucks += other.trucks
  }
      mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->ActiveTrucksResponseBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ActiveTrucksResponseBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 10 :
        var subBuilder = ActiveTrucksResponse.Truck.builder()
        input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
        trucks += [subBuilder.buildPartial()]

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final class TrucksForVendorRequest : GeneratedMessage {
  required init() {
       super.init()
  }
  override func isInitialized() -> Bool {
   return true
  }
  override func writeToCodedOutputStream(output:CodedOutputStream) {
    unknownFields.writeToCodedOutputStream(output)
  }
  override func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> TrucksForVendorRequest {
    return TrucksForVendorRequest.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TrucksForVendorRequest {
    return TrucksForVendorRequest.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> TrucksForVendorRequest {
    return TrucksForVendorRequest.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TrucksForVendorRequest {
    return TrucksForVendorRequest.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> TrucksForVendorRequest {
    return TrucksForVendorRequest.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TrucksForVendorRequest {
    return TrucksForVendorRequest.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> TrucksForVendorRequestBuilder {
    return TrucksForVendorRequestBuilder()
  }
  class func builderWithPrototype(prototype:TrucksForVendorRequest) -> TrucksForVendorRequestBuilder {
    return TrucksForVendorRequest.builder().mergeFrom(prototype)
  }
  func builder() -> TrucksForVendorRequestBuilder {
    return TrucksForVendorRequest.builder()
  }
  func toBuilder() -> TrucksForVendorRequestBuilder {
    return TrucksForVendorRequest.builderWithPrototype(self)
  }
  override func writeDescriptionTo(inout output:String, indent:String) {
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override var hashValue:Int {
      get {
          var hashCode:Int = 7
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }
}

final class TrucksForVendorRequestBuilder : GeneratedMessageBuilder {
  private var builderResult:TrucksForVendorRequest

  required override init () {
     builderResult = TrucksForVendorRequest()
     super.init()
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> TrucksForVendorRequestBuilder {
    builderResult = TrucksForVendorRequest()
    return self
  }
  override func clone() -> TrucksForVendorRequestBuilder {
    return TrucksForVendorRequest.builderWithPrototype(builderResult)
  }
  func build() -> TrucksForVendorRequest {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> TrucksForVendorRequest {
    var returnMe:TrucksForVendorRequest = builderResult
    return returnMe
  }
  func mergeFrom(other:TrucksForVendorRequest) -> TrucksForVendorRequestBuilder {
    if (other == TrucksForVendorRequest()) {
      return self
    }
      mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->TrucksForVendorRequestBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TrucksForVendorRequestBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final class TrucksForVendorResponse : GeneratedMessage {
  private(set) var hasIsNew:Bool = false
  private(set) var isNew:Bool = true

  private(set) var trucks:Array<Truck>  = Array<Truck>()
  required init() {
       super.init()
  }
  override func isInitialized() -> Bool {
    if !hasIsNew {
      return false
    }
   return true
  }
  override func writeToCodedOutputStream(output:CodedOutputStream) {
    for element in trucks {
        output.writeMessage(1, value:element)
    }
    if hasIsNew {
      output.writeBool(2, value:isNew)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    for element in trucks {
        size += WireFormat.computeMessageSize(1, value:element)
    }
    if hasIsNew {
      size += WireFormat.computeBoolSize(2, value:isNew)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> TrucksForVendorResponse {
    return TrucksForVendorResponse.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TrucksForVendorResponse {
    return TrucksForVendorResponse.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> TrucksForVendorResponse {
    return TrucksForVendorResponse.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TrucksForVendorResponse {
    return TrucksForVendorResponse.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> TrucksForVendorResponse {
    return TrucksForVendorResponse.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TrucksForVendorResponse {
    return TrucksForVendorResponse.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> TrucksForVendorResponseBuilder {
    return TrucksForVendorResponseBuilder()
  }
  class func builderWithPrototype(prototype:TrucksForVendorResponse) -> TrucksForVendorResponseBuilder {
    return TrucksForVendorResponse.builder().mergeFrom(prototype)
  }
  func builder() -> TrucksForVendorResponseBuilder {
    return TrucksForVendorResponse.builder()
  }
  func toBuilder() -> TrucksForVendorResponseBuilder {
    return TrucksForVendorResponse.builderWithPrototype(self)
  }
  override func writeDescriptionTo(inout output:String, indent:String) {
    var trucksElementIndex:Int = 0
    for element in trucks {
        output += "\(indent) trucks[\(trucksElementIndex)] {\n"
        element.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent)}\n"
        trucksElementIndex++
    }
    if hasIsNew {
      output += "\(indent) isNew: \(isNew) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override var hashValue:Int {
      get {
          var hashCode:Int = 7
          for element in trucks {
              hashCode = (hashCode &* 31) &+ element.hashValue
          }
          if hasIsNew {
             hashCode = (hashCode &* 31) &+ isNew.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }
}

final class TrucksForVendorResponseBuilder : GeneratedMessageBuilder {
  private var builderResult:TrucksForVendorResponse

  required override init () {
     builderResult = TrucksForVendorResponse()
     super.init()
  }
  var trucks:Array<Truck> {
       get {
           return builderResult.trucks
       }
       set (value) {
           builderResult.trucks = value
       }
  }
  func clearTrucks() -> TrucksForVendorResponseBuilder {
    builderResult.trucks.removeAll(keepCapacity: false)
    return self
  }
  var hasIsNew:Bool {
       get {
            return builderResult.hasIsNew
       }
  }
  var isNew:Bool {
       get {
            return builderResult.isNew
       }
       set (value) {
           builderResult.hasIsNew = true
           builderResult.isNew = value
       }
  }
  func clearIsNew() -> TrucksForVendorResponseBuilder{
       builderResult.hasIsNew = false
       builderResult.isNew = true
       return self
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> TrucksForVendorResponseBuilder {
    builderResult = TrucksForVendorResponse()
    return self
  }
  override func clone() -> TrucksForVendorResponseBuilder {
    return TrucksForVendorResponse.builderWithPrototype(builderResult)
  }
  func build() -> TrucksForVendorResponse {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> TrucksForVendorResponse {
    var returnMe:TrucksForVendorResponse = builderResult
    return returnMe
  }
  func mergeFrom(other:TrucksForVendorResponse) -> TrucksForVendorResponseBuilder {
    if (other == TrucksForVendorResponse()) {
      return self
    }
  if !other.trucks.isEmpty  {
     builderResult.trucks += other.trucks
  }
  if other.hasIsNew {
       isNew = other.isNew
  }
      mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->TrucksForVendorResponseBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TrucksForVendorResponseBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 10 :
        var subBuilder = Truck.builder()
        input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
        trucks += [subBuilder.buildPartial()]

      case 16 :
        isNew = input.readBool()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final class TruckProfilesRequest : GeneratedMessage {
  private(set) var hasLatitude:Bool = false
  private(set) var latitude:Double = 0

  private(set) var hasLongitude:Bool = false
  private(set) var longitude:Double = 0

  required init() {
       super.init()
  }
  override func isInitialized() -> Bool {
    if !hasLatitude {
      return false
    }
    if !hasLongitude {
      return false
    }
   return true
  }
  override func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasLatitude {
      output.writeDouble(1, value:latitude)
    }
    if hasLongitude {
      output.writeDouble(2, value:longitude)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasLatitude {
      size += WireFormat.computeDoubleSize(1, value:latitude)
    }
    if hasLongitude {
      size += WireFormat.computeDoubleSize(2, value:longitude)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> TruckProfilesRequest {
    return TruckProfilesRequest.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TruckProfilesRequest {
    return TruckProfilesRequest.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> TruckProfilesRequest {
    return TruckProfilesRequest.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TruckProfilesRequest {
    return TruckProfilesRequest.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> TruckProfilesRequest {
    return TruckProfilesRequest.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TruckProfilesRequest {
    return TruckProfilesRequest.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> TruckProfilesRequestBuilder {
    return TruckProfilesRequestBuilder()
  }
  class func builderWithPrototype(prototype:TruckProfilesRequest) -> TruckProfilesRequestBuilder {
    return TruckProfilesRequest.builder().mergeFrom(prototype)
  }
  func builder() -> TruckProfilesRequestBuilder {
    return TruckProfilesRequest.builder()
  }
  func toBuilder() -> TruckProfilesRequestBuilder {
    return TruckProfilesRequest.builderWithPrototype(self)
  }
  override func writeDescriptionTo(inout output:String, indent:String) {
    if hasLatitude {
      output += "\(indent) latitude: \(latitude) \n"
    }
    if hasLongitude {
      output += "\(indent) longitude: \(longitude) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasLatitude {
             hashCode = (hashCode &* 31) &+ latitude.hashValue
          }
          if hasLongitude {
             hashCode = (hashCode &* 31) &+ longitude.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }
}

final class TruckProfilesRequestBuilder : GeneratedMessageBuilder {
  private var builderResult:TruckProfilesRequest

  required override init () {
     builderResult = TruckProfilesRequest()
     super.init()
  }
  var hasLatitude:Bool {
       get {
            return builderResult.hasLatitude
       }
  }
  var latitude:Double {
       get {
            return builderResult.latitude
       }
       set (value) {
           builderResult.hasLatitude = true
           builderResult.latitude = value
       }
  }
  func clearLatitude() -> TruckProfilesRequestBuilder{
       builderResult.hasLatitude = false
       builderResult.latitude = 0
       return self
  }
  var hasLongitude:Bool {
       get {
            return builderResult.hasLongitude
       }
  }
  var longitude:Double {
       get {
            return builderResult.longitude
       }
       set (value) {
           builderResult.hasLongitude = true
           builderResult.longitude = value
       }
  }
  func clearLongitude() -> TruckProfilesRequestBuilder{
       builderResult.hasLongitude = false
       builderResult.longitude = 0
       return self
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> TruckProfilesRequestBuilder {
    builderResult = TruckProfilesRequest()
    return self
  }
  override func clone() -> TruckProfilesRequestBuilder {
    return TruckProfilesRequest.builderWithPrototype(builderResult)
  }
  func build() -> TruckProfilesRequest {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> TruckProfilesRequest {
    var returnMe:TruckProfilesRequest = builderResult
    return returnMe
  }
  func mergeFrom(other:TruckProfilesRequest) -> TruckProfilesRequestBuilder {
    if (other == TruckProfilesRequest()) {
      return self
    }
  if other.hasLatitude {
       latitude = other.latitude
  }
  if other.hasLongitude {
       longitude = other.longitude
  }
      mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->TruckProfilesRequestBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TruckProfilesRequestBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 9 :
        latitude = input.readDouble()

      case 17 :
        longitude = input.readDouble()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final class TruckProfilesResponse : GeneratedMessage {
  private(set) var trucks:Array<Truck>  = Array<Truck>()
  required init() {
       super.init()
  }
  override func isInitialized() -> Bool {
   return true
  }
  override func writeToCodedOutputStream(output:CodedOutputStream) {
    for element in trucks {
        output.writeMessage(1, value:element)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    for element in trucks {
        size += WireFormat.computeMessageSize(1, value:element)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> TruckProfilesResponse {
    return TruckProfilesResponse.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> TruckProfilesResponse {
    return TruckProfilesResponse.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> TruckProfilesResponse {
    return TruckProfilesResponse.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->TruckProfilesResponse {
    return TruckProfilesResponse.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> TruckProfilesResponse {
    return TruckProfilesResponse.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TruckProfilesResponse {
    return TruckProfilesResponse.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> TruckProfilesResponseBuilder {
    return TruckProfilesResponseBuilder()
  }
  class func builderWithPrototype(prototype:TruckProfilesResponse) -> TruckProfilesResponseBuilder {
    return TruckProfilesResponse.builder().mergeFrom(prototype)
  }
  func builder() -> TruckProfilesResponseBuilder {
    return TruckProfilesResponse.builder()
  }
  func toBuilder() -> TruckProfilesResponseBuilder {
    return TruckProfilesResponse.builderWithPrototype(self)
  }
  override func writeDescriptionTo(inout output:String, indent:String) {
    var trucksElementIndex:Int = 0
    for element in trucks {
        output += "\(indent) trucks[\(trucksElementIndex)] {\n"
        element.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent)}\n"
        trucksElementIndex++
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override var hashValue:Int {
      get {
          var hashCode:Int = 7
          for element in trucks {
              hashCode = (hashCode &* 31) &+ element.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }
}

final class TruckProfilesResponseBuilder : GeneratedMessageBuilder {
  private var builderResult:TruckProfilesResponse

  required override init () {
     builderResult = TruckProfilesResponse()
     super.init()
  }
  var trucks:Array<Truck> {
       get {
           return builderResult.trucks
       }
       set (value) {
           builderResult.trucks = value
       }
  }
  func clearTrucks() -> TruckProfilesResponseBuilder {
    builderResult.trucks.removeAll(keepCapacity: false)
    return self
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> TruckProfilesResponseBuilder {
    builderResult = TruckProfilesResponse()
    return self
  }
  override func clone() -> TruckProfilesResponseBuilder {
    return TruckProfilesResponse.builderWithPrototype(builderResult)
  }
  func build() -> TruckProfilesResponse {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> TruckProfilesResponse {
    var returnMe:TruckProfilesResponse = builderResult
    return returnMe
  }
  func mergeFrom(other:TruckProfilesResponse) -> TruckProfilesResponseBuilder {
    if (other == TruckProfilesResponse()) {
      return self
    }
  if !other.trucks.isEmpty  {
     builderResult.trucks += other.trucks
  }
      mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->TruckProfilesResponseBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TruckProfilesResponseBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 10 :
        var subBuilder = Truck.builder()
        input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
        trucks += [subBuilder.buildPartial()]

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final class Truck : GeneratedMessage {
  private(set) var hasId:Bool = false
  private(set) var id:String = ""

  private(set) var hasName:Bool = false
  private(set) var name:String = ""

  private(set) var hasImageUrl:Bool = false
  private(set) var imageUrl:String = ""

  private(set) var keywords:Array<String> = Array<String>()
  required init() {
       super.init()
  }
  override func isInitialized() -> Bool {
   return true
  }
  override func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasId {
      output.writeString(1, value:id)
    }
    if hasName {
      output.writeString(2, value:name)
    }
    if hasImageUrl {
      output.writeString(3, value:imageUrl)
    }
    if !keywords.isEmpty {
      for value in keywords {
        output.writeString(4, value:value)
      }
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasId {
      size += WireFormat.computeStringSize(1, value:id)
    }
    if hasName {
      size += WireFormat.computeStringSize(2, value:name)
    }
    if hasImageUrl {
      size += WireFormat.computeStringSize(3, value:imageUrl)
    }
    var dataSizeKeywords:Int32 = 0
    for element in keywords {
        dataSizeKeywords += WireFormat.computeStringSizeNoTag(element)
    }
    size += dataSizeKeywords
    size += 1 * Int32(keywords.count)
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> Truck {
    return Truck.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> Truck {
    return Truck.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> Truck {
    return Truck.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Truck {
    return Truck.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> Truck {
    return Truck.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Truck {
    return Truck.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> TruckBuilder {
    return TruckBuilder()
  }
  class func builderWithPrototype(prototype:Truck) -> TruckBuilder {
    return Truck.builder().mergeFrom(prototype)
  }
  func builder() -> TruckBuilder {
    return Truck.builder()
  }
  func toBuilder() -> TruckBuilder {
    return Truck.builderWithPrototype(self)
  }
  override func writeDescriptionTo(inout output:String, indent:String) {
    if hasId {
      output += "\(indent) id: \(id) \n"
    }
    if hasName {
      output += "\(indent) name: \(name) \n"
    }
    if hasImageUrl {
      output += "\(indent) imageUrl: \(imageUrl) \n"
    }
    var keywordsElementIndex:Int = 0
    for element in keywords  {
        output += "\(indent) keywords[\(keywordsElementIndex)]: \(element)\n"
        keywordsElementIndex++
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasId {
             hashCode = (hashCode &* 31) &+ id.hashValue
          }
          if hasName {
             hashCode = (hashCode &* 31) &+ name.hashValue
          }
          if hasImageUrl {
             hashCode = (hashCode &* 31) &+ imageUrl.hashValue
          }
          for element in keywords {
              hashCode = (hashCode &* 31) &+ element.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }
}

final class TruckBuilder : GeneratedMessageBuilder {
  private var builderResult:Truck

  required override init () {
     builderResult = Truck()
     super.init()
  }
  var hasId:Bool {
       get {
            return builderResult.hasId
       }
  }
  var id:String {
       get {
            return builderResult.id
       }
       set (value) {
           builderResult.hasId = true
           builderResult.id = value
       }
  }
  func clearId() -> TruckBuilder{
       builderResult.hasId = false
       builderResult.id = ""
       return self
  }
  var hasName:Bool {
       get {
            return builderResult.hasName
       }
  }
  var name:String {
       get {
            return builderResult.name
       }
       set (value) {
           builderResult.hasName = true
           builderResult.name = value
       }
  }
  func clearName() -> TruckBuilder{
       builderResult.hasName = false
       builderResult.name = ""
       return self
  }
  var hasImageUrl:Bool {
       get {
            return builderResult.hasImageUrl
       }
  }
  var imageUrl:String {
       get {
            return builderResult.imageUrl
       }
       set (value) {
           builderResult.hasImageUrl = true
           builderResult.imageUrl = value
       }
  }
  func clearImageUrl() -> TruckBuilder{
       builderResult.hasImageUrl = false
       builderResult.imageUrl = ""
       return self
  }
  var keywords:Array<String> {
       get {
           return builderResult.keywords
       }
       set (array) {
           builderResult.keywords = array
       }
  }
  func clearKeywords() -> TruckBuilder {
     builderResult.keywords.removeAll(keepCapacity: false)
     return self
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> TruckBuilder {
    builderResult = Truck()
    return self
  }
  override func clone() -> TruckBuilder {
    return Truck.builderWithPrototype(builderResult)
  }
  func build() -> Truck {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> Truck {
    var returnMe:Truck = builderResult
    return returnMe
  }
  func mergeFrom(other:Truck) -> TruckBuilder {
    if (other == Truck()) {
      return self
    }
  if other.hasId {
       id = other.id
  }
  if other.hasName {
       name = other.name
  }
  if other.hasImageUrl {
       imageUrl = other.imageUrl
  }
  if !other.keywords.isEmpty {
      builderResult.keywords += other.keywords
  }
      mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->TruckBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> TruckBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 10 :
        id = input.readString()

      case 18 :
        name = input.readString()

      case 26 :
        imageUrl = input.readString()

      case 34 :
        keywords += [input.readString()]

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final class ServingModeRequest : GeneratedMessage {
  private(set) var hasTruckId:Bool = false
  private(set) var truckId:String = ""

  private(set) var hasIsInServingMode:Bool = false
  private(set) var isInServingMode:Bool = false

  private(set) var hasTruckLatitude:Bool = false
  private(set) var truckLatitude:Double = 0

  private(set) var hasTruckLongitude:Bool = false
  private(set) var truckLongitude:Double = 0

  required init() {
       super.init()
  }
  override func isInitialized() -> Bool {
    if !hasTruckId {
      return false
    }
    if !hasIsInServingMode {
      return false
    }
   return true
  }
  override func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasTruckId {
      output.writeString(1, value:truckId)
    }
    if hasIsInServingMode {
      output.writeBool(2, value:isInServingMode)
    }
    if hasTruckLatitude {
      output.writeDouble(3, value:truckLatitude)
    }
    if hasTruckLongitude {
      output.writeDouble(4, value:truckLongitude)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasTruckId {
      size += WireFormat.computeStringSize(1, value:truckId)
    }
    if hasIsInServingMode {
      size += WireFormat.computeBoolSize(2, value:isInServingMode)
    }
    if hasTruckLatitude {
      size += WireFormat.computeDoubleSize(3, value:truckLatitude)
    }
    if hasTruckLongitude {
      size += WireFormat.computeDoubleSize(4, value:truckLongitude)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> ServingModeRequest {
    return ServingModeRequest.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ServingModeRequest {
    return ServingModeRequest.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> ServingModeRequest {
    return ServingModeRequest.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ServingModeRequest {
    return ServingModeRequest.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> ServingModeRequest {
    return ServingModeRequest.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ServingModeRequest {
    return ServingModeRequest.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> ServingModeRequestBuilder {
    return ServingModeRequestBuilder()
  }
  class func builderWithPrototype(prototype:ServingModeRequest) -> ServingModeRequestBuilder {
    return ServingModeRequest.builder().mergeFrom(prototype)
  }
  func builder() -> ServingModeRequestBuilder {
    return ServingModeRequest.builder()
  }
  func toBuilder() -> ServingModeRequestBuilder {
    return ServingModeRequest.builderWithPrototype(self)
  }
  override func writeDescriptionTo(inout output:String, indent:String) {
    if hasTruckId {
      output += "\(indent) truckId: \(truckId) \n"
    }
    if hasIsInServingMode {
      output += "\(indent) isInServingMode: \(isInServingMode) \n"
    }
    if hasTruckLatitude {
      output += "\(indent) truckLatitude: \(truckLatitude) \n"
    }
    if hasTruckLongitude {
      output += "\(indent) truckLongitude: \(truckLongitude) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasTruckId {
             hashCode = (hashCode &* 31) &+ truckId.hashValue
          }
          if hasIsInServingMode {
             hashCode = (hashCode &* 31) &+ isInServingMode.hashValue
          }
          if hasTruckLatitude {
             hashCode = (hashCode &* 31) &+ truckLatitude.hashValue
          }
          if hasTruckLongitude {
             hashCode = (hashCode &* 31) &+ truckLongitude.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }
}

final class ServingModeRequestBuilder : GeneratedMessageBuilder {
  private var builderResult:ServingModeRequest

  required override init () {
     builderResult = ServingModeRequest()
     super.init()
  }
  var hasTruckId:Bool {
       get {
            return builderResult.hasTruckId
       }
  }
  var truckId:String {
       get {
            return builderResult.truckId
       }
       set (value) {
           builderResult.hasTruckId = true
           builderResult.truckId = value
       }
  }
  func clearTruckId() -> ServingModeRequestBuilder{
       builderResult.hasTruckId = false
       builderResult.truckId = ""
       return self
  }
  var hasIsInServingMode:Bool {
       get {
            return builderResult.hasIsInServingMode
       }
  }
  var isInServingMode:Bool {
       get {
            return builderResult.isInServingMode
       }
       set (value) {
           builderResult.hasIsInServingMode = true
           builderResult.isInServingMode = value
       }
  }
  func clearIsInServingMode() -> ServingModeRequestBuilder{
       builderResult.hasIsInServingMode = false
       builderResult.isInServingMode = false
       return self
  }
  var hasTruckLatitude:Bool {
       get {
            return builderResult.hasTruckLatitude
       }
  }
  var truckLatitude:Double {
       get {
            return builderResult.truckLatitude
       }
       set (value) {
           builderResult.hasTruckLatitude = true
           builderResult.truckLatitude = value
       }
  }
  func clearTruckLatitude() -> ServingModeRequestBuilder{
       builderResult.hasTruckLatitude = false
       builderResult.truckLatitude = 0
       return self
  }
  var hasTruckLongitude:Bool {
       get {
            return builderResult.hasTruckLongitude
       }
  }
  var truckLongitude:Double {
       get {
            return builderResult.truckLongitude
       }
       set (value) {
           builderResult.hasTruckLongitude = true
           builderResult.truckLongitude = value
       }
  }
  func clearTruckLongitude() -> ServingModeRequestBuilder{
       builderResult.hasTruckLongitude = false
       builderResult.truckLongitude = 0
       return self
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> ServingModeRequestBuilder {
    builderResult = ServingModeRequest()
    return self
  }
  override func clone() -> ServingModeRequestBuilder {
    return ServingModeRequest.builderWithPrototype(builderResult)
  }
  func build() -> ServingModeRequest {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> ServingModeRequest {
    var returnMe:ServingModeRequest = builderResult
    return returnMe
  }
  func mergeFrom(other:ServingModeRequest) -> ServingModeRequestBuilder {
    if (other == ServingModeRequest()) {
      return self
    }
  if other.hasTruckId {
       truckId = other.truckId
  }
  if other.hasIsInServingMode {
       isInServingMode = other.isInServingMode
  }
  if other.hasTruckLatitude {
       truckLatitude = other.truckLatitude
  }
  if other.hasTruckLongitude {
       truckLongitude = other.truckLongitude
  }
      mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->ServingModeRequestBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ServingModeRequestBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 10 :
        truckId = input.readString()

      case 16 :
        isInServingMode = input.readBool()

      case 25 :
        truckLatitude = input.readDouble()

      case 33 :
        truckLongitude = input.readDouble()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final class ServingModeResponse : GeneratedMessage {
  required init() {
       super.init()
  }
  override func isInitialized() -> Bool {
   return true
  }
  override func writeToCodedOutputStream(output:CodedOutputStream) {
    unknownFields.writeToCodedOutputStream(output)
  }
  override func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> ServingModeResponse {
    return ServingModeResponse.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ServingModeResponse {
    return ServingModeResponse.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> ServingModeResponse {
    return ServingModeResponse.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ServingModeResponse {
    return ServingModeResponse.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> ServingModeResponse {
    return ServingModeResponse.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ServingModeResponse {
    return ServingModeResponse.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> ServingModeResponseBuilder {
    return ServingModeResponseBuilder()
  }
  class func builderWithPrototype(prototype:ServingModeResponse) -> ServingModeResponseBuilder {
    return ServingModeResponse.builder().mergeFrom(prototype)
  }
  func builder() -> ServingModeResponseBuilder {
    return ServingModeResponse.builder()
  }
  func toBuilder() -> ServingModeResponseBuilder {
    return ServingModeResponse.builderWithPrototype(self)
  }
  override func writeDescriptionTo(inout output:String, indent:String) {
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override var hashValue:Int {
      get {
          var hashCode:Int = 7
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }
}

final class ServingModeResponseBuilder : GeneratedMessageBuilder {
  private var builderResult:ServingModeResponse

  required override init () {
     builderResult = ServingModeResponse()
     super.init()
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> ServingModeResponseBuilder {
    builderResult = ServingModeResponse()
    return self
  }
  override func clone() -> ServingModeResponseBuilder {
    return ServingModeResponse.builderWithPrototype(builderResult)
  }
  func build() -> ServingModeResponse {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> ServingModeResponse {
    var returnMe:ServingModeResponse = builderResult
    return returnMe
  }
  func mergeFrom(other:ServingModeResponse) -> ServingModeResponseBuilder {
    if (other == ServingModeResponse()) {
      return self
    }
      mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->ServingModeResponseBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ServingModeResponseBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

//Class extensions: NSData


extension ActiveTrucksRequest {
    class func parseFromNSData(data:NSData) -> ActiveTrucksRequest {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ActiveTrucksRequest.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ActiveTrucksRequest {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ActiveTrucksRequest.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension ActiveTrucksResponse.Truck {
    class func parseFromNSData(data:NSData) -> ActiveTrucksResponse.Truck {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ActiveTrucksResponse.Truck.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ActiveTrucksResponse.Truck {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ActiveTrucksResponse.Truck.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension ActiveTrucksResponse {
    class func parseFromNSData(data:NSData) -> ActiveTrucksResponse {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ActiveTrucksResponse.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ActiveTrucksResponse {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ActiveTrucksResponse.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension TrucksForVendorRequest {
    class func parseFromNSData(data:NSData) -> TrucksForVendorRequest {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return TrucksForVendorRequest.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> TrucksForVendorRequest {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return TrucksForVendorRequest.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension TrucksForVendorResponse {
    class func parseFromNSData(data:NSData) -> TrucksForVendorResponse {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return TrucksForVendorResponse.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> TrucksForVendorResponse {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return TrucksForVendorResponse.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension TruckProfilesRequest {
    class func parseFromNSData(data:NSData) -> TruckProfilesRequest {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return TruckProfilesRequest.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> TruckProfilesRequest {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return TruckProfilesRequest.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension TruckProfilesResponse {
    class func parseFromNSData(data:NSData) -> TruckProfilesResponse {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return TruckProfilesResponse.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> TruckProfilesResponse {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return TruckProfilesResponse.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension Truck {
    class func parseFromNSData(data:NSData) -> Truck {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return Truck.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> Truck {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return Truck.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension ServingModeRequest {
    class func parseFromNSData(data:NSData) -> ServingModeRequest {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ServingModeRequest.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ServingModeRequest {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ServingModeRequest.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
extension ServingModeResponse {
    class func parseFromNSData(data:NSData) -> ServingModeResponse {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ServingModeResponse.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ServingModeResponse {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ServingModeResponse.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}

// @@protoc_insertion_point(global_scope)
