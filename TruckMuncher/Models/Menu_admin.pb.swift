// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
import ProtocolBuffers

internal struct MenuAdminRoot {
  internal static var sharedInstance : MenuAdminRoot {
   struct Static {
       static let instance : MenuAdminRoot = MenuAdminRoot()
   }
   return Static.instance
  }
  var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(extensionRegistry)
    MenuRoot.sharedInstance.registerAllExtensions(extensionRegistry)
  }
  internal func registerAllExtensions(registry:ExtensionRegistry) {
  }
}

internal func == (lhs: MenuItemRequest, rhs: MenuItemRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasMenuItemId == rhs.hasMenuItemId) && (!lhs.hasMenuItemId || lhs.menuItemId == rhs.menuItemId)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: MenuItemResponse, rhs: MenuItemResponse) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasMenuItem == rhs.hasMenuItem) && (!lhs.hasMenuItem || lhs.menuItem == rhs.menuItem)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ModifyMenuItemRequest, rhs: ModifyMenuItemRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasTruckId == rhs.hasTruckId) && (!lhs.hasTruckId || lhs.truckId == rhs.truckId)
  fieldCheck = fieldCheck && (lhs.hasCategoryId == rhs.hasCategoryId) && (!lhs.hasCategoryId || lhs.categoryId == rhs.categoryId)
  fieldCheck = fieldCheck && (lhs.menuItems == rhs.menuItems)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ModifyMenuItemResponse, rhs: ModifyMenuItemResponse) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasMenu == rhs.hasMenu) && (!lhs.hasMenu || lhs.menu == rhs.menu)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: DeleteMenuItemRequest, rhs: DeleteMenuItemRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasMenuItemId == rhs.hasMenuItemId) && (!lhs.hasMenuItemId || lhs.menuItemId == rhs.menuItemId)
  fieldCheck = fieldCheck && (lhs.hasTruckId == rhs.hasTruckId) && (!lhs.hasTruckId || lhs.truckId == rhs.truckId)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: DeleteMenuItemResponse, rhs: DeleteMenuItemResponse) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasMenu == rhs.hasMenu) && (!lhs.hasMenu || lhs.menu == rhs.menu)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: CategoryRequest, rhs: CategoryRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasCategoryId == rhs.hasCategoryId) && (!lhs.hasCategoryId || lhs.categoryId == rhs.categoryId)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: CategoryResponse, rhs: CategoryResponse) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasCategory == rhs.hasCategory) && (!lhs.hasCategory || lhs.category == rhs.category)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ModifyCategoryRequest.Category, rhs: ModifyCategoryRequest.Category) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasNotes == rhs.hasNotes) && (!lhs.hasNotes || lhs.notes == rhs.notes)
  fieldCheck = fieldCheck && (lhs.hasOrderInMenu == rhs.hasOrderInMenu) && (!lhs.hasOrderInMenu || lhs.orderInMenu == rhs.orderInMenu)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ModifyCategoryRequest, rhs: ModifyCategoryRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.categories == rhs.categories)
  fieldCheck = fieldCheck && (lhs.hasTruckId == rhs.hasTruckId) && (!lhs.hasTruckId || lhs.truckId == rhs.truckId)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: ModifyCategoryResponse, rhs: ModifyCategoryResponse) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasMenu == rhs.hasMenu) && (!lhs.hasMenu || lhs.menu == rhs.menu)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: DeleteCategoryRequest, rhs: DeleteCategoryRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasCategoryId == rhs.hasCategoryId) && (!lhs.hasCategoryId || lhs.categoryId == rhs.categoryId)
  fieldCheck = fieldCheck && (lhs.hasTruckId == rhs.hasTruckId) && (!lhs.hasTruckId || lhs.truckId == rhs.truckId)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: DeleteCategoryResponse, rhs: DeleteCategoryResponse) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasMenu == rhs.hasMenu) && (!lhs.hasMenu || lhs.menu == rhs.menu)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: MenuItemTagsRequest, rhs: MenuItemTagsRequest) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

internal func == (lhs: MenuItemTagsResponse, rhs: MenuItemTagsResponse) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.tags == rhs.tags)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

final internal class MenuItemRequest : GeneratedMessage {
  private(set) var hasMenuItemId:Bool = false
  private(set) var menuItemId:String = ""

  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !hasMenuItemId {
      return false
    }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasMenuItemId {
      output.writeString(1, value:menuItemId)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasMenuItemId {
      size += WireFormat.computeStringSize(1, value:menuItemId)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  internal class func parseFromData(data:[Byte]) -> MenuItemRequest {
    return MenuItemRequest.builder().mergeFromData(data).build()
  }
  internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> MenuItemRequest {
    return MenuItemRequest.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) -> MenuItemRequest {
    return MenuItemRequest.builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->MenuItemRequest {
    return MenuItemRequest.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) -> MenuItemRequest {
    return MenuItemRequest.builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> MenuItemRequest {
    return MenuItemRequest.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func builder() -> MenuItemRequestBuilder {
    return MenuItemRequest.classBuilder() as MenuItemRequestBuilder
  }
  internal func builder() -> MenuItemRequestBuilder {
    return classBuilder() as MenuItemRequestBuilder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return MenuItemRequestBuilder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return MenuItemRequest.builder()
  }
  internal func toBuilder() -> MenuItemRequestBuilder {
    return MenuItemRequest.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:MenuItemRequest) -> MenuItemRequestBuilder {
    return MenuItemRequest.builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) {
    if hasMenuItemId {
      output += "\(indent) menuItemId: \(menuItemId) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasMenuItemId {
             hashCode = (hashCode &* 31) &+ menuItemId.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "MenuItemRequest"
  }
  override internal func className() -> String {
      return "MenuItemRequest"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return MenuItemRequest.self
  }


  //Meta information declaration end

}

final internal class MenuItemRequestBuilder : GeneratedMessageBuilder {
  private var builderResult:MenuItemRequest

  required override internal init () {
     builderResult = MenuItemRequest()
     super.init()
  }
  var hasMenuItemId:Bool {
       get {
            return builderResult.hasMenuItemId
       }
  }
  var menuItemId:String {
       get {
            return builderResult.menuItemId
       }
       set (value) {
           builderResult.hasMenuItemId = true
           builderResult.menuItemId = value
       }
  }
  internal func clearMenuItemId() -> MenuItemRequestBuilder{
       builderResult.hasMenuItemId = false
       builderResult.menuItemId = ""
       return self
  }
  override internal var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  internal override func clear() -> MenuItemRequestBuilder {
    builderResult = MenuItemRequest()
    return self
  }
  internal override func clone() -> MenuItemRequestBuilder {
    return MenuItemRequest.builderWithPrototype(builderResult)
  }
  internal override func build() -> MenuItemRequest {
       checkInitialized()
       return buildPartial()
  }
  internal func buildPartial() -> MenuItemRequest {
    var returnMe:MenuItemRequest = builderResult
    return returnMe
  }
  internal func mergeFrom(other:MenuItemRequest) -> MenuItemRequestBuilder {
    if (other == MenuItemRequest()) {
     return self
    }
    if other.hasMenuItemId {
         menuItemId = other.menuItemId
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream) ->MenuItemRequestBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> MenuItemRequestBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 10 :
        menuItemId = input.readString()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final internal class MenuItemResponse : GeneratedMessage {
  private(set) var hasMenuItem:Bool = false
  private(set) var menuItem:MenuItem = MenuItem()
  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !hasMenuItem {
      return false
    }
    if !menuItem.isInitialized() {
      return false
    }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasMenuItem {
      output.writeMessage(1, value:menuItem)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasMenuItem {
      size += WireFormat.computeMessageSize(1, value:menuItem)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  internal class func parseFromData(data:[Byte]) -> MenuItemResponse {
    return MenuItemResponse.builder().mergeFromData(data).build()
  }
  internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> MenuItemResponse {
    return MenuItemResponse.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) -> MenuItemResponse {
    return MenuItemResponse.builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->MenuItemResponse {
    return MenuItemResponse.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) -> MenuItemResponse {
    return MenuItemResponse.builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> MenuItemResponse {
    return MenuItemResponse.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func builder() -> MenuItemResponseBuilder {
    return MenuItemResponse.classBuilder() as MenuItemResponseBuilder
  }
  internal func builder() -> MenuItemResponseBuilder {
    return classBuilder() as MenuItemResponseBuilder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return MenuItemResponseBuilder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return MenuItemResponse.builder()
  }
  internal func toBuilder() -> MenuItemResponseBuilder {
    return MenuItemResponse.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:MenuItemResponse) -> MenuItemResponseBuilder {
    return MenuItemResponse.builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) {
    if hasMenuItem {
      output += "\(indent) menuItem {\n"
      menuItem.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasMenuItem {
            hashCode = (hashCode &* 31) &+ menuItem.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "MenuItemResponse"
  }
  override internal func className() -> String {
      return "MenuItemResponse"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return MenuItemResponse.self
  }


  //Meta information declaration end

}

final internal class MenuItemResponseBuilder : GeneratedMessageBuilder {
  private var builderResult:MenuItemResponse

  required override internal init () {
     builderResult = MenuItemResponse()
     super.init()
  }
  var hasMenuItem:Bool {
       get {
           return builderResult.hasMenuItem
       }
  }
  var menuItem:MenuItem {
       get {
           return builderResult.menuItem
       }
       set (value) {
           builderResult.hasMenuItem = true
           builderResult.menuItem = value
       }
  }
  internal func setMenuItemBuilder(builderForValue:MenuItemBuilder) -> MenuItemResponseBuilder {
    menuItem = builderForValue.build()
    return self
  }
  internal func mergeMenuItem(value:MenuItem) -> MenuItemResponseBuilder {
    if (builderResult.hasMenuItem) {
      builderResult.menuItem = MenuItem.builderWithPrototype(builderResult.menuItem).mergeFrom(value).buildPartial()
    } else {
      builderResult.menuItem = value
    }
    builderResult.hasMenuItem = true
    return self
  }
  internal func clearMenuItem() -> MenuItemResponseBuilder {
    builderResult.hasMenuItem = false
    builderResult.menuItem = MenuItem()
    return self
  }
  override internal var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  internal override func clear() -> MenuItemResponseBuilder {
    builderResult = MenuItemResponse()
    return self
  }
  internal override func clone() -> MenuItemResponseBuilder {
    return MenuItemResponse.builderWithPrototype(builderResult)
  }
  internal override func build() -> MenuItemResponse {
       checkInitialized()
       return buildPartial()
  }
  internal func buildPartial() -> MenuItemResponse {
    var returnMe:MenuItemResponse = builderResult
    return returnMe
  }
  internal func mergeFrom(other:MenuItemResponse) -> MenuItemResponseBuilder {
    if (other == MenuItemResponse()) {
     return self
    }
    if (other.hasMenuItem) {
        mergeMenuItem(other.menuItem)
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream) ->MenuItemResponseBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> MenuItemResponseBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 10 :
        var subBuilder:MenuItemBuilder = MenuItem.builder()
        if hasMenuItem {
          subBuilder.mergeFrom(menuItem)
        }
        input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
        menuItem = subBuilder.buildPartial()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final internal class ModifyMenuItemRequest : GeneratedMessage {
  private(set) var hasTruckId:Bool = false
  private(set) var truckId:String = ""

  private(set) var hasCategoryId:Bool = false
  private(set) var categoryId:String = ""

  private(set) var menuItems:Array<MenuItem>  = Array<MenuItem>()
  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !hasTruckId {
      return false
    }
    if !hasCategoryId {
      return false
    }
    var isInitmenuItems:Bool = true
    for oneElementmenuItems in menuItems {
        if (!oneElementmenuItems.isInitialized()) {
            isInitmenuItems = false
            break 
        }
    }
    if !isInitmenuItems {
     return isInitmenuItems
     }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasTruckId {
      output.writeString(1, value:truckId)
    }
    if hasCategoryId {
      output.writeString(2, value:categoryId)
    }
    for oneElementmenuItems in menuItems {
        output.writeMessage(3, value:oneElementmenuItems)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasTruckId {
      size += WireFormat.computeStringSize(1, value:truckId)
    }
    if hasCategoryId {
      size += WireFormat.computeStringSize(2, value:categoryId)
    }
    for oneElementmenuItems in menuItems {
        size += WireFormat.computeMessageSize(3, value:oneElementmenuItems)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  internal class func parseFromData(data:[Byte]) -> ModifyMenuItemRequest {
    return ModifyMenuItemRequest.builder().mergeFromData(data).build()
  }
  internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ModifyMenuItemRequest {
    return ModifyMenuItemRequest.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) -> ModifyMenuItemRequest {
    return ModifyMenuItemRequest.builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ModifyMenuItemRequest {
    return ModifyMenuItemRequest.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) -> ModifyMenuItemRequest {
    return ModifyMenuItemRequest.builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ModifyMenuItemRequest {
    return ModifyMenuItemRequest.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func builder() -> ModifyMenuItemRequestBuilder {
    return ModifyMenuItemRequest.classBuilder() as ModifyMenuItemRequestBuilder
  }
  internal func builder() -> ModifyMenuItemRequestBuilder {
    return classBuilder() as ModifyMenuItemRequestBuilder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return ModifyMenuItemRequestBuilder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return ModifyMenuItemRequest.builder()
  }
  internal func toBuilder() -> ModifyMenuItemRequestBuilder {
    return ModifyMenuItemRequest.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:ModifyMenuItemRequest) -> ModifyMenuItemRequestBuilder {
    return ModifyMenuItemRequest.builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) {
    if hasTruckId {
      output += "\(indent) truckId: \(truckId) \n"
    }
    if hasCategoryId {
      output += "\(indent) categoryId: \(categoryId) \n"
    }
    var menuItemsElementIndex:Int = 0
    for oneElementmenuItems in menuItems {
        output += "\(indent) menuItems[\(menuItemsElementIndex)] {\n"
        oneElementmenuItems.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent)}\n"
        menuItemsElementIndex++
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasTruckId {
             hashCode = (hashCode &* 31) &+ truckId.hashValue
          }
          if hasCategoryId {
             hashCode = (hashCode &* 31) &+ categoryId.hashValue
          }
          for oneElementmenuItems in menuItems {
              hashCode = (hashCode &* 31) &+ oneElementmenuItems.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "ModifyMenuItemRequest"
  }
  override internal func className() -> String {
      return "ModifyMenuItemRequest"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return ModifyMenuItemRequest.self
  }


  //Meta information declaration end

}

final internal class ModifyMenuItemRequestBuilder : GeneratedMessageBuilder {
  private var builderResult:ModifyMenuItemRequest

  required override internal init () {
     builderResult = ModifyMenuItemRequest()
     super.init()
  }
  var hasTruckId:Bool {
       get {
            return builderResult.hasTruckId
       }
  }
  var truckId:String {
       get {
            return builderResult.truckId
       }
       set (value) {
           builderResult.hasTruckId = true
           builderResult.truckId = value
       }
  }
  internal func clearTruckId() -> ModifyMenuItemRequestBuilder{
       builderResult.hasTruckId = false
       builderResult.truckId = ""
       return self
  }
  var hasCategoryId:Bool {
       get {
            return builderResult.hasCategoryId
       }
  }
  var categoryId:String {
       get {
            return builderResult.categoryId
       }
       set (value) {
           builderResult.hasCategoryId = true
           builderResult.categoryId = value
       }
  }
  internal func clearCategoryId() -> ModifyMenuItemRequestBuilder{
       builderResult.hasCategoryId = false
       builderResult.categoryId = ""
       return self
  }
  var menuItems:Array<MenuItem> {
       get {
           return builderResult.menuItems
       }
       set (value) {
           builderResult.menuItems = value
       }
  }
  internal func clearMenuItems() -> ModifyMenuItemRequestBuilder {
    builderResult.menuItems.removeAll(keepCapacity: false)
    return self
  }
  override internal var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  internal override func clear() -> ModifyMenuItemRequestBuilder {
    builderResult = ModifyMenuItemRequest()
    return self
  }
  internal override func clone() -> ModifyMenuItemRequestBuilder {
    return ModifyMenuItemRequest.builderWithPrototype(builderResult)
  }
  internal override func build() -> ModifyMenuItemRequest {
       checkInitialized()
       return buildPartial()
  }
  internal func buildPartial() -> ModifyMenuItemRequest {
    var returnMe:ModifyMenuItemRequest = builderResult
    return returnMe
  }
  internal func mergeFrom(other:ModifyMenuItemRequest) -> ModifyMenuItemRequestBuilder {
    if (other == ModifyMenuItemRequest()) {
     return self
    }
    if other.hasTruckId {
         truckId = other.truckId
    }
    if other.hasCategoryId {
         categoryId = other.categoryId
    }
    if !other.menuItems.isEmpty  {
       builderResult.menuItems += other.menuItems
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ModifyMenuItemRequestBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ModifyMenuItemRequestBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 10 :
        truckId = input.readString()

      case 18 :
        categoryId = input.readString()

      case 26 :
        var subBuilder = MenuItem.builder()
        input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
        menuItems += [subBuilder.buildPartial()]

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final internal class ModifyMenuItemResponse : GeneratedMessage {
  private(set) var hasMenu:Bool = false
  private(set) var menu:Menu = Menu()
  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if hasMenu {
     if !menu.isInitialized() {
       return false
     }
    }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasMenu {
      output.writeMessage(1, value:menu)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasMenu {
      size += WireFormat.computeMessageSize(1, value:menu)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  internal class func parseFromData(data:[Byte]) -> ModifyMenuItemResponse {
    return ModifyMenuItemResponse.builder().mergeFromData(data).build()
  }
  internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ModifyMenuItemResponse {
    return ModifyMenuItemResponse.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) -> ModifyMenuItemResponse {
    return ModifyMenuItemResponse.builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ModifyMenuItemResponse {
    return ModifyMenuItemResponse.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) -> ModifyMenuItemResponse {
    return ModifyMenuItemResponse.builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ModifyMenuItemResponse {
    return ModifyMenuItemResponse.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func builder() -> ModifyMenuItemResponseBuilder {
    return ModifyMenuItemResponse.classBuilder() as ModifyMenuItemResponseBuilder
  }
  internal func builder() -> ModifyMenuItemResponseBuilder {
    return classBuilder() as ModifyMenuItemResponseBuilder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return ModifyMenuItemResponseBuilder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return ModifyMenuItemResponse.builder()
  }
  internal func toBuilder() -> ModifyMenuItemResponseBuilder {
    return ModifyMenuItemResponse.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:ModifyMenuItemResponse) -> ModifyMenuItemResponseBuilder {
    return ModifyMenuItemResponse.builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) {
    if hasMenu {
      output += "\(indent) menu {\n"
      menu.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasMenu {
            hashCode = (hashCode &* 31) &+ menu.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "ModifyMenuItemResponse"
  }
  override internal func className() -> String {
      return "ModifyMenuItemResponse"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return ModifyMenuItemResponse.self
  }


  //Meta information declaration end

}

final internal class ModifyMenuItemResponseBuilder : GeneratedMessageBuilder {
  private var builderResult:ModifyMenuItemResponse

  required override internal init () {
     builderResult = ModifyMenuItemResponse()
     super.init()
  }
  var hasMenu:Bool {
       get {
           return builderResult.hasMenu
       }
  }
  var menu:Menu {
       get {
           return builderResult.menu
       }
       set (value) {
           builderResult.hasMenu = true
           builderResult.menu = value
       }
  }
  internal func setMenuBuilder(builderForValue:MenuBuilder) -> ModifyMenuItemResponseBuilder {
    menu = builderForValue.build()
    return self
  }
  internal func mergeMenu(value:Menu) -> ModifyMenuItemResponseBuilder {
    if (builderResult.hasMenu) {
      builderResult.menu = Menu.builderWithPrototype(builderResult.menu).mergeFrom(value).buildPartial()
    } else {
      builderResult.menu = value
    }
    builderResult.hasMenu = true
    return self
  }
  internal func clearMenu() -> ModifyMenuItemResponseBuilder {
    builderResult.hasMenu = false
    builderResult.menu = Menu()
    return self
  }
  override internal var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  internal override func clear() -> ModifyMenuItemResponseBuilder {
    builderResult = ModifyMenuItemResponse()
    return self
  }
  internal override func clone() -> ModifyMenuItemResponseBuilder {
    return ModifyMenuItemResponse.builderWithPrototype(builderResult)
  }
  internal override func build() -> ModifyMenuItemResponse {
       checkInitialized()
       return buildPartial()
  }
  internal func buildPartial() -> ModifyMenuItemResponse {
    var returnMe:ModifyMenuItemResponse = builderResult
    return returnMe
  }
  internal func mergeFrom(other:ModifyMenuItemResponse) -> ModifyMenuItemResponseBuilder {
    if (other == ModifyMenuItemResponse()) {
     return self
    }
    if (other.hasMenu) {
        mergeMenu(other.menu)
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ModifyMenuItemResponseBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ModifyMenuItemResponseBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 10 :
        var subBuilder:MenuBuilder = Menu.builder()
        if hasMenu {
          subBuilder.mergeFrom(menu)
        }
        input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
        menu = subBuilder.buildPartial()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final internal class DeleteMenuItemRequest : GeneratedMessage {
  private(set) var hasMenuItemId:Bool = false
  private(set) var menuItemId:String = ""

  private(set) var hasTruckId:Bool = false
  private(set) var truckId:String = ""

  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !hasMenuItemId {
      return false
    }
    if !hasTruckId {
      return false
    }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasMenuItemId {
      output.writeString(1, value:menuItemId)
    }
    if hasTruckId {
      output.writeString(2, value:truckId)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasMenuItemId {
      size += WireFormat.computeStringSize(1, value:menuItemId)
    }
    if hasTruckId {
      size += WireFormat.computeStringSize(2, value:truckId)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  internal class func parseFromData(data:[Byte]) -> DeleteMenuItemRequest {
    return DeleteMenuItemRequest.builder().mergeFromData(data).build()
  }
  internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> DeleteMenuItemRequest {
    return DeleteMenuItemRequest.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) -> DeleteMenuItemRequest {
    return DeleteMenuItemRequest.builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->DeleteMenuItemRequest {
    return DeleteMenuItemRequest.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) -> DeleteMenuItemRequest {
    return DeleteMenuItemRequest.builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> DeleteMenuItemRequest {
    return DeleteMenuItemRequest.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func builder() -> DeleteMenuItemRequestBuilder {
    return DeleteMenuItemRequest.classBuilder() as DeleteMenuItemRequestBuilder
  }
  internal func builder() -> DeleteMenuItemRequestBuilder {
    return classBuilder() as DeleteMenuItemRequestBuilder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return DeleteMenuItemRequestBuilder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return DeleteMenuItemRequest.builder()
  }
  internal func toBuilder() -> DeleteMenuItemRequestBuilder {
    return DeleteMenuItemRequest.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:DeleteMenuItemRequest) -> DeleteMenuItemRequestBuilder {
    return DeleteMenuItemRequest.builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) {
    if hasMenuItemId {
      output += "\(indent) menuItemId: \(menuItemId) \n"
    }
    if hasTruckId {
      output += "\(indent) truckId: \(truckId) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasMenuItemId {
             hashCode = (hashCode &* 31) &+ menuItemId.hashValue
          }
          if hasTruckId {
             hashCode = (hashCode &* 31) &+ truckId.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "DeleteMenuItemRequest"
  }
  override internal func className() -> String {
      return "DeleteMenuItemRequest"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return DeleteMenuItemRequest.self
  }


  //Meta information declaration end

}

final internal class DeleteMenuItemRequestBuilder : GeneratedMessageBuilder {
  private var builderResult:DeleteMenuItemRequest

  required override internal init () {
     builderResult = DeleteMenuItemRequest()
     super.init()
  }
  var hasMenuItemId:Bool {
       get {
            return builderResult.hasMenuItemId
       }
  }
  var menuItemId:String {
       get {
            return builderResult.menuItemId
       }
       set (value) {
           builderResult.hasMenuItemId = true
           builderResult.menuItemId = value
       }
  }
  internal func clearMenuItemId() -> DeleteMenuItemRequestBuilder{
       builderResult.hasMenuItemId = false
       builderResult.menuItemId = ""
       return self
  }
  var hasTruckId:Bool {
       get {
            return builderResult.hasTruckId
       }
  }
  var truckId:String {
       get {
            return builderResult.truckId
       }
       set (value) {
           builderResult.hasTruckId = true
           builderResult.truckId = value
       }
  }
  internal func clearTruckId() -> DeleteMenuItemRequestBuilder{
       builderResult.hasTruckId = false
       builderResult.truckId = ""
       return self
  }
  override internal var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  internal override func clear() -> DeleteMenuItemRequestBuilder {
    builderResult = DeleteMenuItemRequest()
    return self
  }
  internal override func clone() -> DeleteMenuItemRequestBuilder {
    return DeleteMenuItemRequest.builderWithPrototype(builderResult)
  }
  internal override func build() -> DeleteMenuItemRequest {
       checkInitialized()
       return buildPartial()
  }
  internal func buildPartial() -> DeleteMenuItemRequest {
    var returnMe:DeleteMenuItemRequest = builderResult
    return returnMe
  }
  internal func mergeFrom(other:DeleteMenuItemRequest) -> DeleteMenuItemRequestBuilder {
    if (other == DeleteMenuItemRequest()) {
     return self
    }
    if other.hasMenuItemId {
         menuItemId = other.menuItemId
    }
    if other.hasTruckId {
         truckId = other.truckId
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream) ->DeleteMenuItemRequestBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> DeleteMenuItemRequestBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 10 :
        menuItemId = input.readString()

      case 18 :
        truckId = input.readString()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final internal class DeleteMenuItemResponse : GeneratedMessage {
  private(set) var hasMenu:Bool = false
  private(set) var menu:Menu = Menu()
  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if hasMenu {
     if !menu.isInitialized() {
       return false
     }
    }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasMenu {
      output.writeMessage(1, value:menu)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasMenu {
      size += WireFormat.computeMessageSize(1, value:menu)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  internal class func parseFromData(data:[Byte]) -> DeleteMenuItemResponse {
    return DeleteMenuItemResponse.builder().mergeFromData(data).build()
  }
  internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> DeleteMenuItemResponse {
    return DeleteMenuItemResponse.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) -> DeleteMenuItemResponse {
    return DeleteMenuItemResponse.builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->DeleteMenuItemResponse {
    return DeleteMenuItemResponse.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) -> DeleteMenuItemResponse {
    return DeleteMenuItemResponse.builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> DeleteMenuItemResponse {
    return DeleteMenuItemResponse.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func builder() -> DeleteMenuItemResponseBuilder {
    return DeleteMenuItemResponse.classBuilder() as DeleteMenuItemResponseBuilder
  }
  internal func builder() -> DeleteMenuItemResponseBuilder {
    return classBuilder() as DeleteMenuItemResponseBuilder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return DeleteMenuItemResponseBuilder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return DeleteMenuItemResponse.builder()
  }
  internal func toBuilder() -> DeleteMenuItemResponseBuilder {
    return DeleteMenuItemResponse.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:DeleteMenuItemResponse) -> DeleteMenuItemResponseBuilder {
    return DeleteMenuItemResponse.builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) {
    if hasMenu {
      output += "\(indent) menu {\n"
      menu.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasMenu {
            hashCode = (hashCode &* 31) &+ menu.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "DeleteMenuItemResponse"
  }
  override internal func className() -> String {
      return "DeleteMenuItemResponse"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return DeleteMenuItemResponse.self
  }


  //Meta information declaration end

}

final internal class DeleteMenuItemResponseBuilder : GeneratedMessageBuilder {
  private var builderResult:DeleteMenuItemResponse

  required override internal init () {
     builderResult = DeleteMenuItemResponse()
     super.init()
  }
  var hasMenu:Bool {
       get {
           return builderResult.hasMenu
       }
  }
  var menu:Menu {
       get {
           return builderResult.menu
       }
       set (value) {
           builderResult.hasMenu = true
           builderResult.menu = value
       }
  }
  internal func setMenuBuilder(builderForValue:MenuBuilder) -> DeleteMenuItemResponseBuilder {
    menu = builderForValue.build()
    return self
  }
  internal func mergeMenu(value:Menu) -> DeleteMenuItemResponseBuilder {
    if (builderResult.hasMenu) {
      builderResult.menu = Menu.builderWithPrototype(builderResult.menu).mergeFrom(value).buildPartial()
    } else {
      builderResult.menu = value
    }
    builderResult.hasMenu = true
    return self
  }
  internal func clearMenu() -> DeleteMenuItemResponseBuilder {
    builderResult.hasMenu = false
    builderResult.menu = Menu()
    return self
  }
  override internal var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  internal override func clear() -> DeleteMenuItemResponseBuilder {
    builderResult = DeleteMenuItemResponse()
    return self
  }
  internal override func clone() -> DeleteMenuItemResponseBuilder {
    return DeleteMenuItemResponse.builderWithPrototype(builderResult)
  }
  internal override func build() -> DeleteMenuItemResponse {
       checkInitialized()
       return buildPartial()
  }
  internal func buildPartial() -> DeleteMenuItemResponse {
    var returnMe:DeleteMenuItemResponse = builderResult
    return returnMe
  }
  internal func mergeFrom(other:DeleteMenuItemResponse) -> DeleteMenuItemResponseBuilder {
    if (other == DeleteMenuItemResponse()) {
     return self
    }
    if (other.hasMenu) {
        mergeMenu(other.menu)
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream) ->DeleteMenuItemResponseBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> DeleteMenuItemResponseBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 10 :
        var subBuilder:MenuBuilder = Menu.builder()
        if hasMenu {
          subBuilder.mergeFrom(menu)
        }
        input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
        menu = subBuilder.buildPartial()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final internal class CategoryRequest : GeneratedMessage {
  private(set) var hasCategoryId:Bool = false
  private(set) var categoryId:String = ""

  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !hasCategoryId {
      return false
    }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasCategoryId {
      output.writeString(1, value:categoryId)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasCategoryId {
      size += WireFormat.computeStringSize(1, value:categoryId)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  internal class func parseFromData(data:[Byte]) -> CategoryRequest {
    return CategoryRequest.builder().mergeFromData(data).build()
  }
  internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> CategoryRequest {
    return CategoryRequest.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) -> CategoryRequest {
    return CategoryRequest.builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->CategoryRequest {
    return CategoryRequest.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) -> CategoryRequest {
    return CategoryRequest.builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> CategoryRequest {
    return CategoryRequest.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func builder() -> CategoryRequestBuilder {
    return CategoryRequest.classBuilder() as CategoryRequestBuilder
  }
  internal func builder() -> CategoryRequestBuilder {
    return classBuilder() as CategoryRequestBuilder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return CategoryRequestBuilder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return CategoryRequest.builder()
  }
  internal func toBuilder() -> CategoryRequestBuilder {
    return CategoryRequest.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:CategoryRequest) -> CategoryRequestBuilder {
    return CategoryRequest.builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) {
    if hasCategoryId {
      output += "\(indent) categoryId: \(categoryId) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasCategoryId {
             hashCode = (hashCode &* 31) &+ categoryId.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "CategoryRequest"
  }
  override internal func className() -> String {
      return "CategoryRequest"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return CategoryRequest.self
  }


  //Meta information declaration end

}

final internal class CategoryRequestBuilder : GeneratedMessageBuilder {
  private var builderResult:CategoryRequest

  required override internal init () {
     builderResult = CategoryRequest()
     super.init()
  }
  var hasCategoryId:Bool {
       get {
            return builderResult.hasCategoryId
       }
  }
  var categoryId:String {
       get {
            return builderResult.categoryId
       }
       set (value) {
           builderResult.hasCategoryId = true
           builderResult.categoryId = value
       }
  }
  internal func clearCategoryId() -> CategoryRequestBuilder{
       builderResult.hasCategoryId = false
       builderResult.categoryId = ""
       return self
  }
  override internal var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  internal override func clear() -> CategoryRequestBuilder {
    builderResult = CategoryRequest()
    return self
  }
  internal override func clone() -> CategoryRequestBuilder {
    return CategoryRequest.builderWithPrototype(builderResult)
  }
  internal override func build() -> CategoryRequest {
       checkInitialized()
       return buildPartial()
  }
  internal func buildPartial() -> CategoryRequest {
    var returnMe:CategoryRequest = builderResult
    return returnMe
  }
  internal func mergeFrom(other:CategoryRequest) -> CategoryRequestBuilder {
    if (other == CategoryRequest()) {
     return self
    }
    if other.hasCategoryId {
         categoryId = other.categoryId
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream) ->CategoryRequestBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> CategoryRequestBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 10 :
        categoryId = input.readString()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final internal class CategoryResponse : GeneratedMessage {
  private(set) var hasCategory:Bool = false
  private(set) var category:Category = Category()
  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !hasCategory {
      return false
    }
    if !category.isInitialized() {
      return false
    }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasCategory {
      output.writeMessage(1, value:category)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasCategory {
      size += WireFormat.computeMessageSize(1, value:category)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  internal class func parseFromData(data:[Byte]) -> CategoryResponse {
    return CategoryResponse.builder().mergeFromData(data).build()
  }
  internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> CategoryResponse {
    return CategoryResponse.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) -> CategoryResponse {
    return CategoryResponse.builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->CategoryResponse {
    return CategoryResponse.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) -> CategoryResponse {
    return CategoryResponse.builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> CategoryResponse {
    return CategoryResponse.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func builder() -> CategoryResponseBuilder {
    return CategoryResponse.classBuilder() as CategoryResponseBuilder
  }
  internal func builder() -> CategoryResponseBuilder {
    return classBuilder() as CategoryResponseBuilder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return CategoryResponseBuilder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return CategoryResponse.builder()
  }
  internal func toBuilder() -> CategoryResponseBuilder {
    return CategoryResponse.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:CategoryResponse) -> CategoryResponseBuilder {
    return CategoryResponse.builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) {
    if hasCategory {
      output += "\(indent) category {\n"
      category.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasCategory {
            hashCode = (hashCode &* 31) &+ category.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "CategoryResponse"
  }
  override internal func className() -> String {
      return "CategoryResponse"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return CategoryResponse.self
  }


  //Meta information declaration end

}

final internal class CategoryResponseBuilder : GeneratedMessageBuilder {
  private var builderResult:CategoryResponse

  required override internal init () {
     builderResult = CategoryResponse()
     super.init()
  }
  var hasCategory:Bool {
       get {
           return builderResult.hasCategory
       }
  }
  var category:Category {
       get {
           return builderResult.category
       }
       set (value) {
           builderResult.hasCategory = true
           builderResult.category = value
       }
  }
  internal func setCategoryBuilder(builderForValue:CategoryBuilder) -> CategoryResponseBuilder {
    category = builderForValue.build()
    return self
  }
  internal func mergeCategory(value:Category) -> CategoryResponseBuilder {
    if (builderResult.hasCategory) {
      builderResult.category = Category.builderWithPrototype(builderResult.category).mergeFrom(value).buildPartial()
    } else {
      builderResult.category = value
    }
    builderResult.hasCategory = true
    return self
  }
  internal func clearCategory() -> CategoryResponseBuilder {
    builderResult.hasCategory = false
    builderResult.category = Category()
    return self
  }
  override internal var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  internal override func clear() -> CategoryResponseBuilder {
    builderResult = CategoryResponse()
    return self
  }
  internal override func clone() -> CategoryResponseBuilder {
    return CategoryResponse.builderWithPrototype(builderResult)
  }
  internal override func build() -> CategoryResponse {
       checkInitialized()
       return buildPartial()
  }
  internal func buildPartial() -> CategoryResponse {
    var returnMe:CategoryResponse = builderResult
    return returnMe
  }
  internal func mergeFrom(other:CategoryResponse) -> CategoryResponseBuilder {
    if (other == CategoryResponse()) {
     return self
    }
    if (other.hasCategory) {
        mergeCategory(other.category)
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream) ->CategoryResponseBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> CategoryResponseBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 10 :
        var subBuilder:CategoryBuilder = Category.builder()
        if hasCategory {
          subBuilder.mergeFrom(category)
        }
        input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
        category = subBuilder.buildPartial()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final internal class ModifyCategoryRequest : GeneratedMessage {


  //Nested type declaration start

    final internal class Category : GeneratedMessage {
      private(set) var hasId:Bool = false
      private(set) var id:String = ""

      private(set) var hasName:Bool = false
      private(set) var name:String = ""

      private(set) var hasNotes:Bool = false
      private(set) var notes:String = ""

      private(set) var hasOrderInMenu:Bool = false
      private(set) var orderInMenu:Int32 = Int32(0)

      required internal init() {
           super.init()
      }
      override internal func isInitialized() -> Bool {
       return true
      }
      override internal func writeToCodedOutputStream(output:CodedOutputStream) {
        if hasId {
          output.writeString(1, value:id)
        }
        if hasName {
          output.writeString(2, value:name)
        }
        if hasNotes {
          output.writeString(3, value:notes)
        }
        if hasOrderInMenu {
          output.writeInt32(4, value:orderInMenu)
        }
        unknownFields.writeToCodedOutputStream(output)
      }
      override internal func serializedSize() -> Int32 {
        var size:Int32 = memoizedSerializedSize
        if size != -1 {
         return size
        }

        size = 0
        if hasId {
          size += WireFormat.computeStringSize(1, value:id)
        }
        if hasName {
          size += WireFormat.computeStringSize(2, value:name)
        }
        if hasNotes {
          size += WireFormat.computeStringSize(3, value:notes)
        }
        if hasOrderInMenu {
          size += WireFormat.computeInt32Size(4, value:orderInMenu)
        }
        size += unknownFields.serializedSize()
        memoizedSerializedSize = size
        return size
      }
      internal class func parseFromData(data:[Byte]) -> ModifyCategoryRequest.Category {
        return ModifyCategoryRequest.Category.builder().mergeFromData(data).build()
      }
      internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ModifyCategoryRequest.Category {
        return ModifyCategoryRequest.Category.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
      }
      internal class func parseFromInputStream(input:NSInputStream) -> ModifyCategoryRequest.Category {
        return ModifyCategoryRequest.Category.builder().mergeFromInputStream(input).build()
      }
      internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ModifyCategoryRequest.Category {
        return ModifyCategoryRequest.Category.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      internal class func parseFromCodedInputStream(input:CodedInputStream) -> ModifyCategoryRequest.Category {
        return ModifyCategoryRequest.Category.builder().mergeFromCodedInputStream(input).build()
      }
      internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ModifyCategoryRequest.Category {
        return ModifyCategoryRequest.Category.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
      }
      internal class func builder() -> ModifyCategoryRequest.CategoryBuilder {
        return ModifyCategoryRequest.Category.classBuilder() as ModifyCategoryRequest.CategoryBuilder
      }
      internal func builder() -> ModifyCategoryRequest.CategoryBuilder {
        return classBuilder() as ModifyCategoryRequest.CategoryBuilder
      }
      internal override class func classBuilder() -> MessageBuilder {
        return ModifyCategoryRequest.CategoryBuilder()
      }
      internal override func classBuilder() -> MessageBuilder {
        return ModifyCategoryRequest.Category.builder()
      }
      internal func toBuilder() -> ModifyCategoryRequest.CategoryBuilder {
        return ModifyCategoryRequest.Category.builderWithPrototype(self)
      }
      internal class func builderWithPrototype(prototype:ModifyCategoryRequest.Category) -> ModifyCategoryRequest.CategoryBuilder {
        return ModifyCategoryRequest.Category.builder().mergeFrom(prototype)
      }
      override internal func writeDescriptionTo(inout output:String, indent:String) {
        if hasId {
          output += "\(indent) id: \(id) \n"
        }
        if hasName {
          output += "\(indent) name: \(name) \n"
        }
        if hasNotes {
          output += "\(indent) notes: \(notes) \n"
        }
        if hasOrderInMenu {
          output += "\(indent) orderInMenu: \(orderInMenu) \n"
        }
        unknownFields.writeDescriptionTo(&output, indent:indent)
      }
      override internal var hashValue:Int {
          get {
              var hashCode:Int = 7
              if hasId {
                 hashCode = (hashCode &* 31) &+ id.hashValue
              }
              if hasName {
                 hashCode = (hashCode &* 31) &+ name.hashValue
              }
              if hasNotes {
                 hashCode = (hashCode &* 31) &+ notes.hashValue
              }
              if hasOrderInMenu {
                 hashCode = (hashCode &* 31) &+ orderInMenu.hashValue
              }
              hashCode = (hashCode &* 31) &+  unknownFields.hashValue
              return hashCode
          }
      }


      //Meta information declaration start

      override internal class func className() -> String {
          return "ModifyCategoryRequest.Category"
      }
      override internal func className() -> String {
          return "ModifyCategoryRequest.Category"
      }
      override internal func classMetaType() -> GeneratedMessage.Type {
          return ModifyCategoryRequest.Category.self
      }


      //Meta information declaration end

    }

    final internal class CategoryBuilder : GeneratedMessageBuilder {
      private var builderResult:ModifyCategoryRequest.Category

      required override internal init () {
         builderResult = ModifyCategoryRequest.Category()
         super.init()
      }
      var hasId:Bool {
           get {
                return builderResult.hasId
           }
      }
      var id:String {
           get {
                return builderResult.id
           }
           set (value) {
               builderResult.hasId = true
               builderResult.id = value
           }
      }
      internal func clearId() -> ModifyCategoryRequest.CategoryBuilder{
           builderResult.hasId = false
           builderResult.id = ""
           return self
      }
      var hasName:Bool {
           get {
                return builderResult.hasName
           }
      }
      var name:String {
           get {
                return builderResult.name
           }
           set (value) {
               builderResult.hasName = true
               builderResult.name = value
           }
      }
      internal func clearName() -> ModifyCategoryRequest.CategoryBuilder{
           builderResult.hasName = false
           builderResult.name = ""
           return self
      }
      var hasNotes:Bool {
           get {
                return builderResult.hasNotes
           }
      }
      var notes:String {
           get {
                return builderResult.notes
           }
           set (value) {
               builderResult.hasNotes = true
               builderResult.notes = value
           }
      }
      internal func clearNotes() -> ModifyCategoryRequest.CategoryBuilder{
           builderResult.hasNotes = false
           builderResult.notes = ""
           return self
      }
      var hasOrderInMenu:Bool {
           get {
                return builderResult.hasOrderInMenu
           }
      }
      var orderInMenu:Int32 {
           get {
                return builderResult.orderInMenu
           }
           set (value) {
               builderResult.hasOrderInMenu = true
               builderResult.orderInMenu = value
           }
      }
      internal func clearOrderInMenu() -> ModifyCategoryRequest.CategoryBuilder{
           builderResult.hasOrderInMenu = false
           builderResult.orderInMenu = Int32(0)
           return self
      }
      override internal var internalGetResult:GeneratedMessage {
           get {
              return builderResult
           }
      }
      internal override func clear() -> ModifyCategoryRequest.CategoryBuilder {
        builderResult = ModifyCategoryRequest.Category()
        return self
      }
      internal override func clone() -> ModifyCategoryRequest.CategoryBuilder {
        return ModifyCategoryRequest.Category.builderWithPrototype(builderResult)
      }
      internal override func build() -> ModifyCategoryRequest.Category {
           checkInitialized()
           return buildPartial()
      }
      internal func buildPartial() -> ModifyCategoryRequest.Category {
        var returnMe:ModifyCategoryRequest.Category = builderResult
        return returnMe
      }
      internal func mergeFrom(other:ModifyCategoryRequest.Category) -> ModifyCategoryRequest.CategoryBuilder {
        if (other == ModifyCategoryRequest.Category()) {
         return self
        }
        if other.hasId {
             id = other.id
        }
        if other.hasName {
             name = other.name
        }
        if other.hasNotes {
             notes = other.notes
        }
        if other.hasOrderInMenu {
             orderInMenu = other.orderInMenu
        }
        mergeUnknownFields(other.unknownFields)
        return self
      }
      internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ModifyCategoryRequest.CategoryBuilder {
           return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
      }
      internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ModifyCategoryRequest.CategoryBuilder {
        var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
        while (true) {
          var tag = input.readTag()
          switch tag {
          case 0: 
            self.unknownFields = unknownFieldsBuilder.build()
            return self

          case 10 :
            id = input.readString()

          case 18 :
            name = input.readString()

          case 26 :
            notes = input.readString()

          case 32 :
            orderInMenu = input.readInt32()

          default:
            if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
               unknownFields = unknownFieldsBuilder.build()
               return self
            }
          }
        }
      }
    }



  //Nested type declaration end

  private(set) var hasTruckId:Bool = false
  private(set) var truckId:String = ""

  private(set) var categories:Array<ModifyCategoryRequest.Category>  = Array<ModifyCategoryRequest.Category>()
  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !hasTruckId {
      return false
    }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) {
    for oneElementcategories in categories {
        output.writeMessage(1, value:oneElementcategories)
    }
    if hasTruckId {
      output.writeString(2, value:truckId)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    for oneElementcategories in categories {
        size += WireFormat.computeMessageSize(1, value:oneElementcategories)
    }
    if hasTruckId {
      size += WireFormat.computeStringSize(2, value:truckId)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  internal class func parseFromData(data:[Byte]) -> ModifyCategoryRequest {
    return ModifyCategoryRequest.builder().mergeFromData(data).build()
  }
  internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ModifyCategoryRequest {
    return ModifyCategoryRequest.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) -> ModifyCategoryRequest {
    return ModifyCategoryRequest.builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ModifyCategoryRequest {
    return ModifyCategoryRequest.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) -> ModifyCategoryRequest {
    return ModifyCategoryRequest.builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ModifyCategoryRequest {
    return ModifyCategoryRequest.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func builder() -> ModifyCategoryRequestBuilder {
    return ModifyCategoryRequest.classBuilder() as ModifyCategoryRequestBuilder
  }
  internal func builder() -> ModifyCategoryRequestBuilder {
    return classBuilder() as ModifyCategoryRequestBuilder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return ModifyCategoryRequestBuilder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return ModifyCategoryRequest.builder()
  }
  internal func toBuilder() -> ModifyCategoryRequestBuilder {
    return ModifyCategoryRequest.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:ModifyCategoryRequest) -> ModifyCategoryRequestBuilder {
    return ModifyCategoryRequest.builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) {
    var categoriesElementIndex:Int = 0
    for oneElementcategories in categories {
        output += "\(indent) categories[\(categoriesElementIndex)] {\n"
        oneElementcategories.writeDescriptionTo(&output, indent:"\(indent)  ")
        output += "\(indent)}\n"
        categoriesElementIndex++
    }
    if hasTruckId {
      output += "\(indent) truckId: \(truckId) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          for oneElementcategories in categories {
              hashCode = (hashCode &* 31) &+ oneElementcategories.hashValue
          }
          if hasTruckId {
             hashCode = (hashCode &* 31) &+ truckId.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "ModifyCategoryRequest"
  }
  override internal func className() -> String {
      return "ModifyCategoryRequest"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return ModifyCategoryRequest.self
  }


  //Meta information declaration end

}

final internal class ModifyCategoryRequestBuilder : GeneratedMessageBuilder {
  private var builderResult:ModifyCategoryRequest

  required override internal init () {
     builderResult = ModifyCategoryRequest()
     super.init()
  }
  var categories:Array<ModifyCategoryRequest.Category> {
       get {
           return builderResult.categories
       }
       set (value) {
           builderResult.categories = value
       }
  }
  internal func clearCategories() -> ModifyCategoryRequestBuilder {
    builderResult.categories.removeAll(keepCapacity: false)
    return self
  }
  var hasTruckId:Bool {
       get {
            return builderResult.hasTruckId
       }
  }
  var truckId:String {
       get {
            return builderResult.truckId
       }
       set (value) {
           builderResult.hasTruckId = true
           builderResult.truckId = value
       }
  }
  internal func clearTruckId() -> ModifyCategoryRequestBuilder{
       builderResult.hasTruckId = false
       builderResult.truckId = ""
       return self
  }
  override internal var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  internal override func clear() -> ModifyCategoryRequestBuilder {
    builderResult = ModifyCategoryRequest()
    return self
  }
  internal override func clone() -> ModifyCategoryRequestBuilder {
    return ModifyCategoryRequest.builderWithPrototype(builderResult)
  }
  internal override func build() -> ModifyCategoryRequest {
       checkInitialized()
       return buildPartial()
  }
  internal func buildPartial() -> ModifyCategoryRequest {
    var returnMe:ModifyCategoryRequest = builderResult
    return returnMe
  }
  internal func mergeFrom(other:ModifyCategoryRequest) -> ModifyCategoryRequestBuilder {
    if (other == ModifyCategoryRequest()) {
     return self
    }
    if !other.categories.isEmpty  {
       builderResult.categories += other.categories
    }
    if other.hasTruckId {
         truckId = other.truckId
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ModifyCategoryRequestBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ModifyCategoryRequestBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 10 :
        var subBuilder = ModifyCategoryRequest.Category.builder()
        input.readMessage(subBuilder,extensionRegistry:extensionRegistry)
        categories += [subBuilder.buildPartial()]

      case 18 :
        truckId = input.readString()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final internal class ModifyCategoryResponse : GeneratedMessage {
  private(set) var hasMenu:Bool = false
  private(set) var menu:Menu = Menu()
  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if hasMenu {
     if !menu.isInitialized() {
       return false
     }
    }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasMenu {
      output.writeMessage(1, value:menu)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasMenu {
      size += WireFormat.computeMessageSize(1, value:menu)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  internal class func parseFromData(data:[Byte]) -> ModifyCategoryResponse {
    return ModifyCategoryResponse.builder().mergeFromData(data).build()
  }
  internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> ModifyCategoryResponse {
    return ModifyCategoryResponse.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) -> ModifyCategoryResponse {
    return ModifyCategoryResponse.builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->ModifyCategoryResponse {
    return ModifyCategoryResponse.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) -> ModifyCategoryResponse {
    return ModifyCategoryResponse.builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ModifyCategoryResponse {
    return ModifyCategoryResponse.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func builder() -> ModifyCategoryResponseBuilder {
    return ModifyCategoryResponse.classBuilder() as ModifyCategoryResponseBuilder
  }
  internal func builder() -> ModifyCategoryResponseBuilder {
    return classBuilder() as ModifyCategoryResponseBuilder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return ModifyCategoryResponseBuilder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return ModifyCategoryResponse.builder()
  }
  internal func toBuilder() -> ModifyCategoryResponseBuilder {
    return ModifyCategoryResponse.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:ModifyCategoryResponse) -> ModifyCategoryResponseBuilder {
    return ModifyCategoryResponse.builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) {
    if hasMenu {
      output += "\(indent) menu {\n"
      menu.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasMenu {
            hashCode = (hashCode &* 31) &+ menu.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "ModifyCategoryResponse"
  }
  override internal func className() -> String {
      return "ModifyCategoryResponse"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return ModifyCategoryResponse.self
  }


  //Meta information declaration end

}

final internal class ModifyCategoryResponseBuilder : GeneratedMessageBuilder {
  private var builderResult:ModifyCategoryResponse

  required override internal init () {
     builderResult = ModifyCategoryResponse()
     super.init()
  }
  var hasMenu:Bool {
       get {
           return builderResult.hasMenu
       }
  }
  var menu:Menu {
       get {
           return builderResult.menu
       }
       set (value) {
           builderResult.hasMenu = true
           builderResult.menu = value
       }
  }
  internal func setMenuBuilder(builderForValue:MenuBuilder) -> ModifyCategoryResponseBuilder {
    menu = builderForValue.build()
    return self
  }
  internal func mergeMenu(value:Menu) -> ModifyCategoryResponseBuilder {
    if (builderResult.hasMenu) {
      builderResult.menu = Menu.builderWithPrototype(builderResult.menu).mergeFrom(value).buildPartial()
    } else {
      builderResult.menu = value
    }
    builderResult.hasMenu = true
    return self
  }
  internal func clearMenu() -> ModifyCategoryResponseBuilder {
    builderResult.hasMenu = false
    builderResult.menu = Menu()
    return self
  }
  override internal var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  internal override func clear() -> ModifyCategoryResponseBuilder {
    builderResult = ModifyCategoryResponse()
    return self
  }
  internal override func clone() -> ModifyCategoryResponseBuilder {
    return ModifyCategoryResponse.builderWithPrototype(builderResult)
  }
  internal override func build() -> ModifyCategoryResponse {
       checkInitialized()
       return buildPartial()
  }
  internal func buildPartial() -> ModifyCategoryResponse {
    var returnMe:ModifyCategoryResponse = builderResult
    return returnMe
  }
  internal func mergeFrom(other:ModifyCategoryResponse) -> ModifyCategoryResponseBuilder {
    if (other == ModifyCategoryResponse()) {
     return self
    }
    if (other.hasMenu) {
        mergeMenu(other.menu)
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream) ->ModifyCategoryResponseBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ModifyCategoryResponseBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 10 :
        var subBuilder:MenuBuilder = Menu.builder()
        if hasMenu {
          subBuilder.mergeFrom(menu)
        }
        input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
        menu = subBuilder.buildPartial()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final internal class DeleteCategoryRequest : GeneratedMessage {
  private(set) var hasCategoryId:Bool = false
  private(set) var categoryId:String = ""

  private(set) var hasTruckId:Bool = false
  private(set) var truckId:String = ""

  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if !hasCategoryId {
      return false
    }
    if !hasTruckId {
      return false
    }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasCategoryId {
      output.writeString(1, value:categoryId)
    }
    if hasTruckId {
      output.writeString(2, value:truckId)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasCategoryId {
      size += WireFormat.computeStringSize(1, value:categoryId)
    }
    if hasTruckId {
      size += WireFormat.computeStringSize(2, value:truckId)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  internal class func parseFromData(data:[Byte]) -> DeleteCategoryRequest {
    return DeleteCategoryRequest.builder().mergeFromData(data).build()
  }
  internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> DeleteCategoryRequest {
    return DeleteCategoryRequest.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) -> DeleteCategoryRequest {
    return DeleteCategoryRequest.builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->DeleteCategoryRequest {
    return DeleteCategoryRequest.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) -> DeleteCategoryRequest {
    return DeleteCategoryRequest.builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> DeleteCategoryRequest {
    return DeleteCategoryRequest.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func builder() -> DeleteCategoryRequestBuilder {
    return DeleteCategoryRequest.classBuilder() as DeleteCategoryRequestBuilder
  }
  internal func builder() -> DeleteCategoryRequestBuilder {
    return classBuilder() as DeleteCategoryRequestBuilder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return DeleteCategoryRequestBuilder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return DeleteCategoryRequest.builder()
  }
  internal func toBuilder() -> DeleteCategoryRequestBuilder {
    return DeleteCategoryRequest.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:DeleteCategoryRequest) -> DeleteCategoryRequestBuilder {
    return DeleteCategoryRequest.builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) {
    if hasCategoryId {
      output += "\(indent) categoryId: \(categoryId) \n"
    }
    if hasTruckId {
      output += "\(indent) truckId: \(truckId) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasCategoryId {
             hashCode = (hashCode &* 31) &+ categoryId.hashValue
          }
          if hasTruckId {
             hashCode = (hashCode &* 31) &+ truckId.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "DeleteCategoryRequest"
  }
  override internal func className() -> String {
      return "DeleteCategoryRequest"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return DeleteCategoryRequest.self
  }


  //Meta information declaration end

}

final internal class DeleteCategoryRequestBuilder : GeneratedMessageBuilder {
  private var builderResult:DeleteCategoryRequest

  required override internal init () {
     builderResult = DeleteCategoryRequest()
     super.init()
  }
  var hasCategoryId:Bool {
       get {
            return builderResult.hasCategoryId
       }
  }
  var categoryId:String {
       get {
            return builderResult.categoryId
       }
       set (value) {
           builderResult.hasCategoryId = true
           builderResult.categoryId = value
       }
  }
  internal func clearCategoryId() -> DeleteCategoryRequestBuilder{
       builderResult.hasCategoryId = false
       builderResult.categoryId = ""
       return self
  }
  var hasTruckId:Bool {
       get {
            return builderResult.hasTruckId
       }
  }
  var truckId:String {
       get {
            return builderResult.truckId
       }
       set (value) {
           builderResult.hasTruckId = true
           builderResult.truckId = value
       }
  }
  internal func clearTruckId() -> DeleteCategoryRequestBuilder{
       builderResult.hasTruckId = false
       builderResult.truckId = ""
       return self
  }
  override internal var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  internal override func clear() -> DeleteCategoryRequestBuilder {
    builderResult = DeleteCategoryRequest()
    return self
  }
  internal override func clone() -> DeleteCategoryRequestBuilder {
    return DeleteCategoryRequest.builderWithPrototype(builderResult)
  }
  internal override func build() -> DeleteCategoryRequest {
       checkInitialized()
       return buildPartial()
  }
  internal func buildPartial() -> DeleteCategoryRequest {
    var returnMe:DeleteCategoryRequest = builderResult
    return returnMe
  }
  internal func mergeFrom(other:DeleteCategoryRequest) -> DeleteCategoryRequestBuilder {
    if (other == DeleteCategoryRequest()) {
     return self
    }
    if other.hasCategoryId {
         categoryId = other.categoryId
    }
    if other.hasTruckId {
         truckId = other.truckId
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream) ->DeleteCategoryRequestBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> DeleteCategoryRequestBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 10 :
        categoryId = input.readString()

      case 18 :
        truckId = input.readString()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final internal class DeleteCategoryResponse : GeneratedMessage {
  private(set) var hasMenu:Bool = false
  private(set) var menu:Menu = Menu()
  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
    if hasMenu {
     if !menu.isInitialized() {
       return false
     }
    }
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasMenu {
      output.writeMessage(1, value:menu)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasMenu {
      size += WireFormat.computeMessageSize(1, value:menu)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  internal class func parseFromData(data:[Byte]) -> DeleteCategoryResponse {
    return DeleteCategoryResponse.builder().mergeFromData(data).build()
  }
  internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> DeleteCategoryResponse {
    return DeleteCategoryResponse.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) -> DeleteCategoryResponse {
    return DeleteCategoryResponse.builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->DeleteCategoryResponse {
    return DeleteCategoryResponse.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) -> DeleteCategoryResponse {
    return DeleteCategoryResponse.builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> DeleteCategoryResponse {
    return DeleteCategoryResponse.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func builder() -> DeleteCategoryResponseBuilder {
    return DeleteCategoryResponse.classBuilder() as DeleteCategoryResponseBuilder
  }
  internal func builder() -> DeleteCategoryResponseBuilder {
    return classBuilder() as DeleteCategoryResponseBuilder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return DeleteCategoryResponseBuilder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return DeleteCategoryResponse.builder()
  }
  internal func toBuilder() -> DeleteCategoryResponseBuilder {
    return DeleteCategoryResponse.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:DeleteCategoryResponse) -> DeleteCategoryResponseBuilder {
    return DeleteCategoryResponse.builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) {
    if hasMenu {
      output += "\(indent) menu {\n"
      menu.writeDescriptionTo(&output, indent:"\(indent)  ")
      output += "\(indent) }\n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasMenu {
            hashCode = (hashCode &* 31) &+ menu.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "DeleteCategoryResponse"
  }
  override internal func className() -> String {
      return "DeleteCategoryResponse"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return DeleteCategoryResponse.self
  }


  //Meta information declaration end

}

final internal class DeleteCategoryResponseBuilder : GeneratedMessageBuilder {
  private var builderResult:DeleteCategoryResponse

  required override internal init () {
     builderResult = DeleteCategoryResponse()
     super.init()
  }
  var hasMenu:Bool {
       get {
           return builderResult.hasMenu
       }
  }
  var menu:Menu {
       get {
           return builderResult.menu
       }
       set (value) {
           builderResult.hasMenu = true
           builderResult.menu = value
       }
  }
  internal func setMenuBuilder(builderForValue:MenuBuilder) -> DeleteCategoryResponseBuilder {
    menu = builderForValue.build()
    return self
  }
  internal func mergeMenu(value:Menu) -> DeleteCategoryResponseBuilder {
    if (builderResult.hasMenu) {
      builderResult.menu = Menu.builderWithPrototype(builderResult.menu).mergeFrom(value).buildPartial()
    } else {
      builderResult.menu = value
    }
    builderResult.hasMenu = true
    return self
  }
  internal func clearMenu() -> DeleteCategoryResponseBuilder {
    builderResult.hasMenu = false
    builderResult.menu = Menu()
    return self
  }
  override internal var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  internal override func clear() -> DeleteCategoryResponseBuilder {
    builderResult = DeleteCategoryResponse()
    return self
  }
  internal override func clone() -> DeleteCategoryResponseBuilder {
    return DeleteCategoryResponse.builderWithPrototype(builderResult)
  }
  internal override func build() -> DeleteCategoryResponse {
       checkInitialized()
       return buildPartial()
  }
  internal func buildPartial() -> DeleteCategoryResponse {
    var returnMe:DeleteCategoryResponse = builderResult
    return returnMe
  }
  internal func mergeFrom(other:DeleteCategoryResponse) -> DeleteCategoryResponseBuilder {
    if (other == DeleteCategoryResponse()) {
     return self
    }
    if (other.hasMenu) {
        mergeMenu(other.menu)
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream) ->DeleteCategoryResponseBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> DeleteCategoryResponseBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 10 :
        var subBuilder:MenuBuilder = Menu.builder()
        if hasMenu {
          subBuilder.mergeFrom(menu)
        }
        input.readMessage(subBuilder, extensionRegistry:extensionRegistry)
        menu = subBuilder.buildPartial()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final internal class MenuItemTagsRequest : GeneratedMessage {
  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) {
    unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  internal class func parseFromData(data:[Byte]) -> MenuItemTagsRequest {
    return MenuItemTagsRequest.builder().mergeFromData(data).build()
  }
  internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> MenuItemTagsRequest {
    return MenuItemTagsRequest.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) -> MenuItemTagsRequest {
    return MenuItemTagsRequest.builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->MenuItemTagsRequest {
    return MenuItemTagsRequest.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) -> MenuItemTagsRequest {
    return MenuItemTagsRequest.builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> MenuItemTagsRequest {
    return MenuItemTagsRequest.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func builder() -> MenuItemTagsRequestBuilder {
    return MenuItemTagsRequest.classBuilder() as MenuItemTagsRequestBuilder
  }
  internal func builder() -> MenuItemTagsRequestBuilder {
    return classBuilder() as MenuItemTagsRequestBuilder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return MenuItemTagsRequestBuilder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return MenuItemTagsRequest.builder()
  }
  internal func toBuilder() -> MenuItemTagsRequestBuilder {
    return MenuItemTagsRequest.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:MenuItemTagsRequest) -> MenuItemTagsRequestBuilder {
    return MenuItemTagsRequest.builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) {
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "MenuItemTagsRequest"
  }
  override internal func className() -> String {
      return "MenuItemTagsRequest"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return MenuItemTagsRequest.self
  }


  //Meta information declaration end

}

final internal class MenuItemTagsRequestBuilder : GeneratedMessageBuilder {
  private var builderResult:MenuItemTagsRequest

  required override internal init () {
     builderResult = MenuItemTagsRequest()
     super.init()
  }
  override internal var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  internal override func clear() -> MenuItemTagsRequestBuilder {
    builderResult = MenuItemTagsRequest()
    return self
  }
  internal override func clone() -> MenuItemTagsRequestBuilder {
    return MenuItemTagsRequest.builderWithPrototype(builderResult)
  }
  internal override func build() -> MenuItemTagsRequest {
       checkInitialized()
       return buildPartial()
  }
  internal func buildPartial() -> MenuItemTagsRequest {
    var returnMe:MenuItemTagsRequest = builderResult
    return returnMe
  }
  internal func mergeFrom(other:MenuItemTagsRequest) -> MenuItemTagsRequestBuilder {
    if (other == MenuItemTagsRequest()) {
     return self
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream) ->MenuItemTagsRequestBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> MenuItemTagsRequestBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

final internal class MenuItemTagsResponse : GeneratedMessage {
  private(set) var tags:Array<String> = Array<String>()
  required internal init() {
       super.init()
  }
  override internal func isInitialized() -> Bool {
   return true
  }
  override internal func writeToCodedOutputStream(output:CodedOutputStream) {
    if !tags.isEmpty {
      for oneValuetags in tags {
        output.writeString(1, value:oneValuetags)
      }
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override internal func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    var dataSizeTags:Int32 = 0
    for oneValuetags in tags {
        dataSizeTags += WireFormat.computeStringSizeNoTag(oneValuetags)
    }
    size += dataSizeTags
    size += 1 * Int32(tags.count)
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  internal class func parseFromData(data:[Byte]) -> MenuItemTagsResponse {
    return MenuItemTagsResponse.builder().mergeFromData(data).build()
  }
  internal class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> MenuItemTagsResponse {
    return MenuItemTagsResponse.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromInputStream(input:NSInputStream) -> MenuItemTagsResponse {
    return MenuItemTagsResponse.builder().mergeFromInputStream(input).build()
  }
  internal class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->MenuItemTagsResponse {
    return MenuItemTagsResponse.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream) -> MenuItemTagsResponse {
    return MenuItemTagsResponse.builder().mergeFromCodedInputStream(input).build()
  }
  internal class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> MenuItemTagsResponse {
    return MenuItemTagsResponse.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  internal class func builder() -> MenuItemTagsResponseBuilder {
    return MenuItemTagsResponse.classBuilder() as MenuItemTagsResponseBuilder
  }
  internal func builder() -> MenuItemTagsResponseBuilder {
    return classBuilder() as MenuItemTagsResponseBuilder
  }
  internal override class func classBuilder() -> MessageBuilder {
    return MenuItemTagsResponseBuilder()
  }
  internal override func classBuilder() -> MessageBuilder {
    return MenuItemTagsResponse.builder()
  }
  internal func toBuilder() -> MenuItemTagsResponseBuilder {
    return MenuItemTagsResponse.builderWithPrototype(self)
  }
  internal class func builderWithPrototype(prototype:MenuItemTagsResponse) -> MenuItemTagsResponseBuilder {
    return MenuItemTagsResponse.builder().mergeFrom(prototype)
  }
  override internal func writeDescriptionTo(inout output:String, indent:String) {
    var tagsElementIndex:Int = 0
    for oneValuetags in tags  {
        output += "\(indent) tags[\(tagsElementIndex)]: \(oneValuetags)\n"
        tagsElementIndex++
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override internal var hashValue:Int {
      get {
          var hashCode:Int = 7
          for oneValuetags in tags {
              hashCode = (hashCode &* 31) &+ oneValuetags.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override internal class func className() -> String {
      return "MenuItemTagsResponse"
  }
  override internal func className() -> String {
      return "MenuItemTagsResponse"
  }
  override internal func classMetaType() -> GeneratedMessage.Type {
      return MenuItemTagsResponse.self
  }


  //Meta information declaration end

}

final internal class MenuItemTagsResponseBuilder : GeneratedMessageBuilder {
  private var builderResult:MenuItemTagsResponse

  required override internal init () {
     builderResult = MenuItemTagsResponse()
     super.init()
  }
  var tags:Array<String> {
       get {
           return builderResult.tags
       }
       set (array) {
           builderResult.tags = array
       }
  }
  internal func clearTags() -> MenuItemTagsResponseBuilder {
     builderResult.tags.removeAll(keepCapacity: false)
     return self
  }
  override internal var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  internal override func clear() -> MenuItemTagsResponseBuilder {
    builderResult = MenuItemTagsResponse()
    return self
  }
  internal override func clone() -> MenuItemTagsResponseBuilder {
    return MenuItemTagsResponse.builderWithPrototype(builderResult)
  }
  internal override func build() -> MenuItemTagsResponse {
       checkInitialized()
       return buildPartial()
  }
  internal func buildPartial() -> MenuItemTagsResponse {
    var returnMe:MenuItemTagsResponse = builderResult
    return returnMe
  }
  internal func mergeFrom(other:MenuItemTagsResponse) -> MenuItemTagsResponseBuilder {
    if (other == MenuItemTagsResponse()) {
     return self
    }
    if !other.tags.isEmpty {
        builderResult.tags += other.tags
    }
    mergeUnknownFields(other.unknownFields)
    return self
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream) ->MenuItemTagsResponseBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  internal override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> MenuItemTagsResponseBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 10 :
        tags += [input.readString()]

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

//Class extensions: NSData


internal extension MenuItemRequest {
    class func parseFromNSData(data:NSData) -> MenuItemRequest {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return MenuItemRequest.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> MenuItemRequest {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return MenuItemRequest.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
internal extension MenuItemResponse {
    class func parseFromNSData(data:NSData) -> MenuItemResponse {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return MenuItemResponse.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> MenuItemResponse {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return MenuItemResponse.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
internal extension ModifyMenuItemRequest {
    class func parseFromNSData(data:NSData) -> ModifyMenuItemRequest {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ModifyMenuItemRequest.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ModifyMenuItemRequest {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ModifyMenuItemRequest.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
internal extension ModifyMenuItemResponse {
    class func parseFromNSData(data:NSData) -> ModifyMenuItemResponse {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ModifyMenuItemResponse.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ModifyMenuItemResponse {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ModifyMenuItemResponse.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
internal extension DeleteMenuItemRequest {
    class func parseFromNSData(data:NSData) -> DeleteMenuItemRequest {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return DeleteMenuItemRequest.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> DeleteMenuItemRequest {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return DeleteMenuItemRequest.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
internal extension DeleteMenuItemResponse {
    class func parseFromNSData(data:NSData) -> DeleteMenuItemResponse {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return DeleteMenuItemResponse.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> DeleteMenuItemResponse {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return DeleteMenuItemResponse.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
internal extension CategoryRequest {
    class func parseFromNSData(data:NSData) -> CategoryRequest {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return CategoryRequest.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> CategoryRequest {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return CategoryRequest.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
internal extension CategoryResponse {
    class func parseFromNSData(data:NSData) -> CategoryResponse {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return CategoryResponse.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> CategoryResponse {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return CategoryResponse.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
internal extension ModifyCategoryRequest.Category {
    class func parseFromNSData(data:NSData) -> ModifyCategoryRequest.Category {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ModifyCategoryRequest.Category.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ModifyCategoryRequest.Category {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ModifyCategoryRequest.Category.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
internal extension ModifyCategoryRequest {
    class func parseFromNSData(data:NSData) -> ModifyCategoryRequest {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ModifyCategoryRequest.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ModifyCategoryRequest {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ModifyCategoryRequest.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
internal extension ModifyCategoryResponse {
    class func parseFromNSData(data:NSData) -> ModifyCategoryResponse {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ModifyCategoryResponse.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> ModifyCategoryResponse {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return ModifyCategoryResponse.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
internal extension DeleteCategoryRequest {
    class func parseFromNSData(data:NSData) -> DeleteCategoryRequest {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return DeleteCategoryRequest.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> DeleteCategoryRequest {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return DeleteCategoryRequest.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
internal extension DeleteCategoryResponse {
    class func parseFromNSData(data:NSData) -> DeleteCategoryResponse {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return DeleteCategoryResponse.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> DeleteCategoryResponse {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return DeleteCategoryResponse.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
internal extension MenuItemTagsRequest {
    class func parseFromNSData(data:NSData) -> MenuItemTagsRequest {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return MenuItemTagsRequest.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> MenuItemTagsRequest {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return MenuItemTagsRequest.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}
internal extension MenuItemTagsResponse {
    class func parseFromNSData(data:NSData) -> MenuItemTagsResponse {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return MenuItemTagsResponse.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> MenuItemTagsResponse {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return MenuItemTagsResponse.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}

// @@protoc_insertion_point(global_scope)
