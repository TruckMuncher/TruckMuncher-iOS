// Generated by the protocol buffer compiler.  DO NOT EDIT!

import Foundation
import ProtocolBuffers

private class ErrorRoot {
var extensionRegistry:ExtensionRegistry

init() {
extensionRegistry = ExtensionRegistry()
registerAllExtensions(extensionRegistry)
}
func registerAllExtensions(registry:ExtensionRegistry) {
}
}

func == (lhs: Error, rhs: Error) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasInternalCode == rhs.hasInternalCode) && (!lhs.hasInternalCode || lhs.internalCode == rhs.internalCode)
  fieldCheck = fieldCheck && (lhs.hasUserMessage == rhs.hasUserMessage) && (!lhs.hasUserMessage || lhs.userMessage == rhs.userMessage)
  return (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
}

final class Error : GeneratedMessage {
  private(set) var hasInternalCode:Bool = false
  private(set) var internalCode:String = ""

  private(set) var hasUserMessage:Bool = false
  private(set) var userMessage:String = ""

  required init() {
       super.init()
  }
  override func isInitialized() -> Bool {
    if !hasInternalCode {
      return false
    }
    if !hasUserMessage {
      return false
    }
   return true
  }
  override func writeToCodedOutputStream(output:CodedOutputStream) {
    if hasInternalCode {
      output.writeString(1, value:internalCode)
    }
    if hasUserMessage {
      output.writeString(2, value:userMessage)
    }
    unknownFields.writeToCodedOutputStream(output)
  }
  override func serializedSize() -> Int32 {
    var size:Int32 = memoizedSerializedSize
    if size != -1 {
     return size
    }

    size = 0
    if hasInternalCode {
      size += WireFormat.computeStringSize(1, value:internalCode)
    }
    if hasUserMessage {
      size += WireFormat.computeStringSize(2, value:userMessage)
    }
    size += unknownFields.serializedSize()
    memoizedSerializedSize = size
    return size
  }
  class func parseFromData(data:[Byte]) -> Error {
    return Error.builder().mergeFromData(data).build()
  }
  class func parseFromData(data:[Byte], extensionRegistry:ExtensionRegistry) -> Error {
    return Error.builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromInputStream(input:NSInputStream) -> Error {
    return Error.builder().mergeFromInputStream(input).build()
  }
  class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) ->Error {
    return Error.builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream) -> Error {
    return Error.builder().mergeFromCodedInputStream(input).build()
  }
  class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> Error {
    return Error.builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  class func builder() -> ErrorBuilder {
    return ErrorBuilder()
  }
  class func builderWithPrototype(prototype:Error) -> ErrorBuilder {
    return Error.builder().mergeFrom(prototype)
  }
  func builder() -> ErrorBuilder {
    return Error.builder()
  }
  func toBuilder() -> ErrorBuilder {
    return Error.builderWithPrototype(self)
  }
  override func writeDescriptionTo(inout output:String, indent:String) {
    if hasInternalCode {
      output += "\(indent) internalCode: \(internalCode) \n"
    }
    if hasUserMessage {
      output += "\(indent) userMessage: \(userMessage) \n"
    }
    unknownFields.writeDescriptionTo(&output, indent:indent)
  }
  override var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasInternalCode {
             hashCode = (hashCode &* 31) &+ internalCode.hashValue
          }
          if hasUserMessage {
             hashCode = (hashCode &* 31) &+ userMessage.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }
}

final class ErrorBuilder : GeneratedMessageBuilder {
  private var builderResult:Error

  required override init () {
     builderResult = Error()
     super.init()
  }
  var hasInternalCode:Bool {
       get {
            return builderResult.hasInternalCode
       }
  }
  var internalCode:String {
       get {
            return builderResult.internalCode
       }
       set (value) {
           builderResult.hasInternalCode = true
           builderResult.internalCode = value
       }
  }
  func clearInternalCode() -> ErrorBuilder{
       builderResult.hasInternalCode = false
       builderResult.internalCode = ""
       return self
  }
  var hasUserMessage:Bool {
       get {
            return builderResult.hasUserMessage
       }
  }
  var userMessage:String {
       get {
            return builderResult.userMessage
       }
       set (value) {
           builderResult.hasUserMessage = true
           builderResult.userMessage = value
       }
  }
  func clearUserMessage() -> ErrorBuilder{
       builderResult.hasUserMessage = false
       builderResult.userMessage = ""
       return self
  }
  override var internalGetResult:GeneratedMessage {
       get {
          return builderResult
       }
  }
  override func clear() -> ErrorBuilder {
    builderResult = Error()
    return self
  }
  override func clone() -> ErrorBuilder {
    return Error.builderWithPrototype(builderResult)
  }
  func build() -> Error {
       checkInitialized()
       return buildPartial()
  }
  func buildPartial() -> Error {
    var returnMe:Error = builderResult
    return returnMe
  }
  func mergeFrom(other:Error) -> ErrorBuilder {
    if (other == Error()) {
      return self
    }
  if other.hasInternalCode {
       internalCode = other.internalCode
  }
  if other.hasUserMessage {
       userMessage = other.userMessage
  }
      mergeUnknownFields(other.unknownFields)
    return self
  }
  override func mergeFromCodedInputStream(input:CodedInputStream) ->ErrorBuilder {
       return mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
  }
  override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) -> ErrorBuilder {
    var unknownFieldsBuilder:UnknownFieldSetBuilder = UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
    while (true) {
      var tag = input.readTag()
      switch tag {
      case 0: 
        self.unknownFields = unknownFieldsBuilder.build()
        return self

      case 10 :
        internalCode = input.readString()

      case 18 :
        userMessage = input.readString()

      default:
        if (!parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:tag)) {
           unknownFields = unknownFieldsBuilder.build()
           return self
        }
      }
    }
  }
}

//Class extensions: NSData


extension Error {
    class func parseFromNSData(data:NSData) -> Error {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return Error.builder().mergeFromData(bytes).build()
    }
    class func parseFromNSData(data:NSData, extensionRegistry:ExtensionRegistry) -> Error {
        var bytes = [Byte](count: data.length, repeatedValue: 0)
        data.getBytes(&bytes)
        return Error.builder().mergeFromData(bytes, extensionRegistry:extensionRegistry).build()
    }
}

// @@protoc_insertion_point(global_scope)
